<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>回忆点滴</title>
  
  <subtitle>迷茫是什么？&lt;/br&gt; 迷茫就是大事干不了, 小事不想干&lt;/br&gt; 能力配置不上欲望, 才华配不上梦想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qdhaiqiang.github.io/"/>
  <updated>2020-10-04T14:14:54.568Z</updated>
  <id>https://qdhaiqiang.github.io/</id>
  
  <author>
    <name>马海强</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序猿的MacOS环境(二)</title>
    <link href="https://qdhaiqiang.github.io/2020/10/01/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84MacOS%E7%8E%AF%E5%A2%83(%E4%BA%8C)/"/>
    <id>https://qdhaiqiang.github.io/2020/10/01/程序猿的MacOS环境(二)/</id>
    <published>2020-10-01T12:16:51.000Z</published>
    <updated>2020-10-04T14:14:54.568Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇的补充<br><a href="https://www.jianshu.com/p/c485142a6a7e" target="_blank" rel="noopener">简书地址</a></p><a id="more"></a><p>推荐：<a href="https://www.jianshu.com/p/2f8b0f0aca93" target="_blank" rel="noopener">https://www.jianshu.com/p/2f8b0f0aca93</a><br>本篇：比较好用的几款日常软件<br>推荐来源：<a href="https://www.jianshu.com/p/bdb899112d5b" target="_blank" rel="noopener">10个macOS免费小工具，能帮你省下一大笔钱</a></p><h2 id="1-iShot"><a href="#1-iShot" class="headerlink" title="1. iShot"></a>1. iShot</h2><p>截图软件,本人一直用的是非专业版的Xnip，日常截图也基本够用，也能滚屏截图，但是没有延时截图的功能，主要是不是免费的。</p><p>替代品iShot我反而觉得更胜一筹。<br><img src="/2020/10/01/程序猿的MacOS环境(二)/程序猿的MacOS环境(二" alt="image.png">/iShot.png)</p><p>还支持录屏，重点是录屏还可以直接转成gif，方便至极。</p><h2 id="2-翻译工具Bob"><a href="#2-翻译工具Bob" class="headerlink" title="2. 翻译工具Bob"></a>2. 翻译工具Bob</h2><p>除了能选中文字，粘贴文字进行翻译，还可以截图翻译，通过 OCR 识别文字，Bob 可以直接截图翻译，这样突破了文字限制，可以直接翻译图片或者视频中某个画面内容，即便你不需要翻译的时候，也可以将其作为一个 OCR 识别工具使用，直接复制识别后的内容，实测识别准确率很可观。</p><h2 id="3-NTFS-读写工具：Paragon-NTFS-Tuxera-NTFS（100-元）——-NTFS-Tool（免费）"><a href="#3-NTFS-读写工具：Paragon-NTFS-Tuxera-NTFS（100-元）——-NTFS-Tool（免费）" class="headerlink" title="3. NTFS 读写工具：Paragon NTFS / Tuxera NTFS（100+元）—— NTFS Tool（免费）"></a>3. NTFS 读写工具：Paragon NTFS / Tuxera NTFS（100+元）—— NTFS Tool（免费）</h2><p>我想很多刚刚接触 macOS 都会遇到这个麻烦——NTFS 格式硬盘无法读取，此前通过搜索引擎了解到用户量比较大的是 Paragon NTFS 和 Tuxera NTFS 这两款工具，由于代理方不一样，售价也不统一，但也基本都在 100 元以上，出于软件包大小以及 UI 风格，我最终购买了 Paragon NTFS，使用到现在倒也没遇到什么不如意。</p><p><img src="/2020/10/01/程序猿的MacOS环境(二)/程序猿的MacOS环境(二" alt="image">/Paragon NTFS.png)</p><p>在准备这篇文章，又重新了解了一下，新出现了不少价格更低甚至免费的 NTFS 读写工具，其它付费的我就不说了，NTFS Tool 这款免费开源的工具倒是值得推荐。安装完成后，直接在 Finder 中对硬盘中文件进行读写操作。不过 NTFS Tool 对于系统盘的识别上似乎有些不一样，使用上倒也没什么问题。</p><p><img src="/2020/10/01/程序猿的MacOS环境(二)/程序猿的MacOS环境(二" alt="image">/Paragon NTFS2.png)</p><p>基本 macOS 上所有的 NTFS 读写工具只是能让系统正常读写 NTFS 格式硬盘，其它所有的文件操作还是在 Finder 中完成，不过这类工具倒是也可以作为外接硬盘的管理作用。</p><p>无论是用的哪一款工具，只要能够实现想要的目的，那就够了，NTFS Tool 可能不是最好用的，但作为免费开源工具，这样却也是足够了。</p><h2 id="4-ffmpeg"><a href="#4-ffmpeg" class="headerlink" title="4. ffmpeg"></a>4. ffmpeg</h2><p>视频格式转换、视频转 gif、视频压缩等视频操作的命令行工具。基本现在播放器的软件都使用了该仓库的代码。我平常主要用它压缩视频，例如介绍 utools 章节的视频，原视频 23M，然后通过它压缩 8M，方便快捷。缺点是命令行复杂，需要好好调教，我本人用的较少。</p><ol><li>主页地址：<a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">github.com/FFmpeg/FFmp…</a></li><li>下载： <code>brew install ffmpeg</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇的补充&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/c485142a6a7e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="https://qdhaiqiang.github.io/categories/mac/"/>
    
    
      <category term="mac" scheme="https://qdhaiqiang.github.io/tags/mac/"/>
    
      <category term="tools" scheme="https://qdhaiqiang.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>程序猿的MacOS环境(一)</title>
    <link href="https://qdhaiqiang.github.io/2020/09/29/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84MacOS%E7%8E%AF%E5%A2%83(%E4%B8%80)/"/>
    <id>https://qdhaiqiang.github.io/2020/09/29/程序猿的MacOS环境(一)/</id>
    <published>2020-09-29T12:16:51.000Z</published>
    <updated>2020-10-04T14:12:23.187Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2f8b0f0aca93" target="_blank" rel="noopener">简书地址</a></p><a id="more"></a><p>每个江湖上的高手都有自己趁手的兵器，你也应该有你自己的那把小李飞刀。<br>小李飞刀这个兵器还真不是突然想到的。</p><p>要是问我什么不是方天画戟、青龙偃月刀、丈八蛇矛云云，或者为啥不是独孤求败的利剑、紫薇软剑、玄铁重剑之类的。我就呵呵了，你见过哪个道法高深的神仙，随身手里扛着这么大的兵器，关二哥拉屎时应该不会扛着青龙偃月刀吧。</p><p>小李飞刀则不然，随身携带，杀伤力不弱于其他，最重要的其实是小李飞刀是在浪子李寻欢手里，李寻欢此人是一个倾倒天下多情红颜的潇洒浪子，一个重情重义的悲情英雄，一生都被身心的痛苦折磨，却又不轻易显示喜怒哀乐，复杂的内心情感全靠眼神表现。所以计算式小李飞刀只是在百晓生兵器谱上排第三，我还是更喜欢，也许我是不喜欢天机老人的懦弱，和上官金虹的恶霸行为。</p><p>有人说，自古没有最厉害的兵器，只有最厉害的人。也是，孤独前辈的第四把剑就是木剑，“四十岁后，草木竹石均可为剑”，何其雄壮，人家有傲视群雄的本事的啊，这境界太高了，没几个能达到的。</p><p>我不反对上面的观点，但是顺手的兵器总也是能为平庸的人增添战斗力，要不然那么多人去抢倚天剑、屠龙刀。</p><p>废话太多了哈。。。😁</p><p>作为一坨程序猿，我想表达的意思是打造自己最趁手，最适合自己工作的工具—-要不换个标题：MacOS系统上常用的软件和插件。</p><p>关键词：程序猿、MacOS</p><p>所以我要说微信，QQ之类的估计您的揍我了。</p><p>先推荐两个资源下载地址：</p><p><strong><a href="https://xclient.info/?t=b43ff20a95f7a8f8c2453e68b2650326403e6b99" target="_blank" rel="noopener">xclient.info</a></strong><br><strong><a href="https://www.waitsun.com/" target="_blank" rel="noopener">爱情守望者</a></strong></p><p><strong>必备应用：</strong></p><ul><li>git客户端：gitKarken，sourceTree</li><li>接口测试工具：postman</li><li>笔记工具：为知笔记，印象笔记</li><li>IDE：Intellij Idea，VS code，Emcas</li><li>markdown写作工具：Typora</li><li>翻墙客户端：Shadowsocks</li><li>手机投屏软件：Vysor，有谷歌浏览器插件</li><li>硬盘U盘读写软件：Tuxera Disk Manager</li></ul><p>####一些在线工具和网址:</p><blockquote><p>发起在线问卷调查：<a href="https://www.wenjuan.com/" target="_blank" rel="noopener">https://www.wenjuan.com/</a><br>在线定时任务执行写法工具：<a href="http://cron.qqe2.com/" target="_blank" rel="noopener">http://cron.qqe2.com/</a><br>国际推荐使用：<a href="https://cdnjs.com/" target="_blank" rel="noopener">https://cdnjs.com/</a><br>下载系统及工具：<a href="http://msdn.itellyou.cn" target="_blank" rel="noopener">http://msdn.itellyou.cn</a><br>优雅高效的免费在线APP原型工具  <a href="http://www.xiaopiu.com/" target="_blank" rel="noopener">http://www.xiaopiu.com/</a><br>showdoc文档工具：<a href="https://www.showdoc.cc/web/#/" target="_blank" rel="noopener">https://www.showdoc.cc/web/#/</a><br>各种java工具：<a href="http://www.hutool.cn/" target="_blank" rel="noopener">http://www.hutool.cn/</a><br>在线无损压缩图片：<a href="https://squoosh.app/" target="_blank" rel="noopener">https://squoosh.app/</a><br>生成短链接：<a href="http://www.surl.sinaapp.com/" target="_blank" rel="noopener">http://www.surl.sinaapp.com/</a><br>在线工具集合：<a href="http://oktools.net" target="_blank" rel="noopener">http://oktools.net</a><br>在线工具集合2 ：<a href="http://www.atoolbox.net/" target="_blank" rel="noopener">http://www.atoolbox.net</a><br>mockjs: <a href="http://mockjs.com/" target="_blank" rel="noopener">http://mockjs.com/</a><br>lisp里json转edn/map：<a href="http://pschwarz.bicycle.io/json-to-edn/" target="_blank" rel="noopener">http://pschwarz.bicycle.io/json-to-edn/</a></p></blockquote><h2 id="1-shell客户端"><a href="#1-shell客户端" class="headerlink" title="1. shell客户端"></a>1. shell客户端</h2><p>iterm2截止目前最喜欢的shell客户端，没有之一，之所以加个截止目前，是因为今年用emcas，都说这里面的shell也很赞。</p><p>做后端开发，经常要快速进入某一台远端服务器，然后看个log，改个配置啥的，这时候iterm+sshpass就能让你事半功倍了。<br>关于怎么配，此处不再细说。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz  </span><br><span class="line">tar xvzf sshpass-1.05.tar.gz  </span><br><span class="line">cd sshpass-1.05</span><br><span class="line">./configure  </span><br><span class="line">make  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>推荐两个网友的杰作，一个安装，一个使用。<br><a href="https://www.iteye.com/blog/tinyhema-2093795" target="_blank" rel="noopener">mac下使用sshpass实现ssh记住密码</a><br><a href="https://www.jianshu.com/p/ae7bf4086b0d" target="_blank" rel="noopener">Mac下，使用sshpass让iTerm2支持ssh登录信息保存</a></p><p>安装sshpass有问题的用户，可以试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb</span><br><span class="line">Updating Homebrew...</span><br><span class="line">Warning: Calling Non-checksummed download of sshpass formula file from an arbitrary URL is deprecated! Use &apos;brew extract&apos; or &apos;brew create&apos; and &apos;brew tap-new&apos; to create a formula file in a tap on GitHub instead.</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; Downloading http://sourceforge.net/projects/sshpass/files/sshpass/1.06/sshpass-1.06.tar.gz</span><br><span class="line">==&gt; Downloading from https://netcologne.dl.sourceforge.net/project/sshpass/sshpass/1.06/sshpass-1.06.tar.gz</span><br><span class="line">######################################################################## 100.0%</span><br><span class="line">==&gt; ./configure --prefix=/usr/local/Cellar/sshpass/1.06</span><br><span class="line">==&gt; make install</span><br><span class="line">🍺  /usr/local/Cellar/sshpass/1.06: 9 files, 45.8KB, built in 9 seconds</span><br></pre></td></tr></table></figure></p><p>安装成功。</p><p>iterm里另一个不得不用的是<code>Zsh</code>和<code>Oh My Zsh</code>家庭套餐，点到为止，网上一搜一大把，选个自己喜欢的theme用就行了。</p><p>iterm2的profiles里执行一个登录的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sshpass -f /Users/mahaiqiang/Documents/sshpass/&lt;file_name&gt; ssh -p&lt;port&gt; marvin@ip</span><br></pre></td></tr></table></figure></p><p>file_name 只存储这个ip对应的用户登录密码，而且文件没有后缀。</p><p>如果没有安装成功sshpass，也可以用iterm的命令行模式，执行一个shell脚本，脚本的内容可能荣幸<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/expect -f</span></span><br><span class="line">set user &lt;user-name&gt;</span><br><span class="line">set host &lt;ip&gt;</span><br><span class="line">set password &lt;password&gt;</span><br><span class="line">set port &lt;port&gt;</span><br><span class="line">set timeout -1</span><br><span class="line"></span><br><span class="line">spawn ssh -p $port $user@$host</span><br><span class="line">expect "*assword:*"</span><br><span class="line">send "$password\r"</span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure></p><p>High起来吧</p><ul><li>2020-10-04<br>json_pp，json_pp 我主要是用来格式化 curl 命令行的结果，例如测试某个 restful 接口，返回的 json，在命令行就会自动给你格式化好输出，json_pp 安装：<code>brew install jsonpp</code></li></ul><h2 id="2-Navicat-Permium"><a href="#2-Navicat-Permium" class="headerlink" title="2. Navicat Permium"></a>2. Navicat Permium</h2><p><a href="https://navicat.com.cn/products/navicat-premium" target="_blank" rel="noopener">Navicat Premium </a>是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、MongoDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、MongoDB Atlas、阿里云、腾讯云和华为云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。</p><p>数据库工具在Mac上我比较钟情这款，导入导出都很方便，其他不推荐。不要说不是免费版，我相信你一定有办法免费，而且你还能搞个汉化版。</p><p>在Windows我用的最多<a href="https://www.heidisql.com/" target="_blank" rel="noopener">HeidiSQL</a>，轻量级，非常稳定的数据库客户端。是可惜没有mac版。</p><h2 id="3-transmit"><a href="#3-transmit" class="headerlink" title="3. transmit"></a>3. transmit</h2><p>相同功能的我还用过的filezilla和WinScp，但是从体验和视觉上来说，我更喜欢transmit，简洁直观</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="transmit">/transmit.png)</p><h2 id="4-tinyCal"><a href="#4-tinyCal" class="headerlink" title="4. tinyCal"></a>4. tinyCal</h2><p>这个小日历可了不得，试图比mac自带的日历小，但是又比mac状态栏上那个还不如没有日历表好。截图如下：</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="tinyCal">/tinyCal.png)</p><p>还有农历，看着不错吧，在设置个开机自启，系统自带的可以关闭了。</p><h2 id="5-Alfred"><a href="#5-Alfred" class="headerlink" title="5. Alfred"></a>5. Alfred</h2><p>这个是在去年在海尔一起工作的小唐同学那里看来的，直接抄一下原创：<br>Alfred作为老牌效率神器，网上很多帖子都已经做过介绍，这里说一下Alfred的剪贴板。</p><p>Alfred的剪贴板可以保存最近几天位于系统剪贴板的所有内容。因此如果当键入命令时，突然想起来这个命令我昨天好像复制过，那就可以直接调出来，贴进命令行即可。</p><p>这款神器可是<a href="https://github.com/hzlzh/Best-App" target="_blank" rel="noopener">Best-App</a>排行NO.1的，可见一斑。</p><p>使用教程：<a href="https://www.jianshu.com/p/e9f3352c785f" target="_blank" rel="noopener">5分钟上手Mac效率神器Alfred以及Alfred常用操作</a></p><h2 id="6-LICECap-捕捉屏幕生成GIF"><a href="#6-LICECap-捕捉屏幕生成GIF" class="headerlink" title="6. LICECap 捕捉屏幕生成GIF"></a>6. LICECap 捕捉屏幕生成GIF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install LICECap</span><br></pre></td></tr></table></figure><p>相对应的截图软件推荐<a href="https://zh.xnipapp.com/" target="_blank" rel="noopener">xnipapp</a>一款免费的截图软件，还支持滚动截图，离线操作。</p><h2 id="7-Recorder-it"><a href="#7-Recorder-it" class="headerlink" title="7. Recorder it"></a>7. Recorder it</h2><p>屏幕录制软件，可以在xclient.info上下载到。</p><h2 id="8-keycastr-显示快捷键"><a href="#8-keycastr-显示快捷键" class="headerlink" title="8. keycastr 显示快捷键"></a>8. keycastr 显示快捷键</h2><p>在你想做一个教程时，不管是gif了，还是录屏了，你或许在冥思苦想到底怎么解释我在键盘上按了啥，这回不用解释了，你按了啥有软件帮你显示出来了，简单明了。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install keycastr</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="keycastr">/keycastr.png)</p><p>配合上生成gif搞个小教程简直不要太爽。</p><h2 id="9-ssh-tunnel"><a href="#9-ssh-tunnel" class="headerlink" title="9. ssh tunnel"></a>9. ssh tunnel</h2><p>再复制小唐同学推荐的一个神器ssh tunnel。</p><h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>我们需要搭建开发环境，使得本地的web server/api server 能够访问位于云服务器上局域网环境中的数据库，例如百度云提供的数据库服务。这些数据库服务器可以在百度云的机器上直接访问，而不能在公网环境下通过公网ip访问。这个时候可以用百度云的普通server建一个tunnel，从而实现数据访问。在xshell中也有类似功能，中文翻译做：隧道。</p><h4 id="界面展示："><a href="#界面展示：" class="headerlink" title="界面展示："></a>界面展示：</h4><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image">/ssh tunnel.png)</p><p>如图便是建立了三个tunnel，分别连向了两个关系型数据库服务器和一个redis服务器。<br>举例来说第一条隧道连接，使用时的访问方法，就是直接localhost:13306即可。<br>当然，直接用ssh命令也可解决，但麻烦不是。程序员就应该能偷懒的时候尽可能偷懒，美其名曰：解放和发展生产力~<br>命令行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -CfNg -L 16306:postgresql94.rd*****lwr2zr.rds.bj.baidubce.com:3306 root@180.***.***.189</span><br></pre></td></tr></table></figure><p>原作者：<a href="https://www.jianshu.com/p/e0b96caa3e7c" target="_blank" rel="noopener">tangxqa</a></p><h2 id="10-PicGo"><a href="#10-PicGo" class="headerlink" title="10. PicGo"></a>10. PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">图床</a>，上传图片后直接将复制复制到了粘贴板，非常方便，尤其要写markdown<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="PicGo">/PicGo.png)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install PicGo</span><br></pre></td></tr></table></figure></p><p>如果常写markdown的话，绝对是个不错的选择，谁还每个github账号，合理使用资源就行了，图片拖进上传区，直接就能返回来个markdown的地址放到粘贴板里了。至于怎么利用github做图床自行google下。</p><h2 id="11-Charles抓包工具"><a href="#11-Charles抓包工具" class="headerlink" title="11. Charles抓包工具"></a>11. Charles抓包工具</h2><p><a href="http://www.charlesproxy.com/" target="_blank" rel="noopener">Charles</a>是一款抓包代理调试工具、类 Fiddler。<br>ios系统手机上有一款抓包神器：stream<br>安卓手机上一般用：Packet Capture，或者抓包精灵</p><h2 id="12-内网穿透工具"><a href="#12-内网穿透工具" class="headerlink" title="12. 内网穿透工具"></a>12. 内网穿透工具</h2><p>这个东西不常用，但是如果不知道还有个这么个玩意儿那就有点low了。<br>我用过serveo和ngrok，ngrok相对稳定，但是使用便捷性赶不上什么都不用serveo一句命令的快。<br>我的两个总结：<br><a href="https://www.jianshu.com/p/57485240708c" target="_blank" rel="noopener">使用serveo一秒钟实现内网穿透</a><br><a href="https://www.jianshu.com/p/4f008e2b7622" target="_blank" rel="noopener">使用ngrok一分钟实现内网穿透</a></p><h2 id="13-为知笔记-印象笔记"><a href="#13-为知笔记-印象笔记" class="headerlink" title="13. 为知笔记|印象笔记"></a>13. 为知笔记|印象笔记</h2><p>有时候你会有两台电脑，或者需要用移动端看看曾经报错的一些有效资源，这时候如果没有个云笔记，有点说不过去了，而且这种笔记不管是保存自己的东西，还可以通过google浏览器插件快速收藏网页，将某<br>一篇博客剪切成自己的东西笔记。</p><h2 id="14-Parallels虚拟机神器"><a href="#14-Parallels虚拟机神器" class="headerlink" title="14. Parallels虚拟机神器"></a>14. Parallels虚拟机神器</h2><p>带你飞~</p><h2 id="15-LogTail-日志监控查看工具"><a href="#15-LogTail-日志监控查看工具" class="headerlink" title="15. LogTail 日志监控查看工具"></a>15. LogTail 日志监控查看工具</h2><p>前面说到的iterm配合sshpass登录到服务器不是个啥问题了，但是最近用的不管是阿里云和百度云的ECS，在终端连接一会儿后就会自动断开，而且我也不知道咋搞，就算是tail 了，一会儿没有动就自己断开了，非常糟心。</p><p>今天终于找到了一款我众里寻他千百度的logtail，我简直爱死他了，查看云服务器日志居然还有这么个玩意儿，简直神器啊，来两张图看看：<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="我收藏的标签">/LogTail.png)</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="滚动时自动开始/停止tail">/LogTail2.png)</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="标签功能">/LogTail3.png)</p><p>有了它服务器上的日志就不需要搭建类似ELK或者EFK环境了。</p><h2 id="16-mpv：一个高可配的程序猿专用视频播放器"><a href="#16-mpv：一个高可配的程序猿专用视频播放器" class="headerlink" title="16. mpv：一个高可配的程序猿专用视频播放器"></a>16. <a href="https://mpv.io/" target="_blank" rel="noopener">mpv</a>：一个高可配的程序猿专用视频播放器</h2><p>安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install mpv</span><br></pre></td></tr></table></figure></p><p>这是一款一个跨平台、简洁、开源、免费、且性能和功能兼备万能视频播放器。MPV 是一个基于 MPlayer 和 mplayer2 的开源极简全能播放器。支持各种视频格式、音频解码、支持特效字幕（电影动漫的ass特效字幕都没啥问题），不仅支持本地播放，同样支持网络播放。重点是 MPV 具有多系统平台支持、命令行、自定义、GPU 解码、脚本支持等特点……</p><p><a href="https://www.iplaysoft.com/mpv.html" target="_blank" rel="noopener">看这篇介绍</a></p><h2 id="17-Moom"><a href="#17-Moom" class="headerlink" title="17 Moom"></a>17 Moom</h2><p>或许有许多人和小编一样，感觉Mac OS在使用时各种都很好用，但是就是对于窗口大小的调整需要用鼠标去拖动大小不满意。</p><p>  那么有没有一种更为快速的方法，可以让你迅速的最大化、最小化各种窗口，甚至和WIN10系统一样做到左右对半分配两个窗口呢？当然有！只需要在你的Mac上安装Moom这一款小软件即可实现。</p><p>Moom是苹果os平台上优秀的窗口管理工具，可以快速修改当前窗口的大小并放置在指定位置，默认情况下拥有五种尺寸可选，单击选项即可更改窗口大小，如最大化，移动到左边、右边等操作，还可以自定义窗口，让用户可以更好的查看mac上的内容。<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="moom">/Moom.png)</p><h2 id="18-PopClip"><a href="#18-PopClip" class="headerlink" title="18. PopClip"></a>18. PopClip</h2><p>一款在 Mac 上人尽皆知的小工具，它简单高效，具有强大的拓展功能，PopClip 最基本的功能即用鼠标选中一段文字就可以做复制粘贴的动作，省去了我们平时 Command+C or V 的麻烦。</p><p>除此之外，再无拓展支持的情况下，根据鼠标选中的内容，PopClip 还自身支持链接的跳转打开、自带词典的翻译、邮件地址跳转、搜索引擎搜索、单词纠正等功能，但这个工具真正强大之处在于它的拓展功能的使用哦。<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image.png">/PopClip.png)</p><h1 id="小插件"><a href="#小插件" class="headerlink" title="小插件"></a>小插件</h1><ol><li><p>Bartender<br>展开和收缩状态栏<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image.png">/Bartender.png)</p></li><li><p>外接2K显示器无法开启hign dpi时的处理</p></li></ol><p>开启教程：<a href="https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=11669269&amp;page=1" target="_blank" rel="noopener">https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=11669269&amp;page=1</a><br>用到的三个软件：</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image">/Bartender.png)</p><p>设置完成之后，在外接显示器也可以看到hign dpi的选项：</p><p><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image">/Bartender2.png)</p><ol start="3"><li>Go2Shell<br>在访达里增加一个打开命令行的快捷入口，快速进入命令行<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image.png">/Go2Shell.png)</li></ol><p>还可以设置在哪打开<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image.png">/Go2Shell2.png)</p><ol start="4"><li><p>FeHelper<br>一款谷歌浏览器插件，主要是免费的工具集合。<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="FeHelper">/FeHelper.png)</p></li><li><p>Octotree<br>这又是一款chrome插件，能将github项目在左侧边栏以目录树形结构展示。让你更直观地感受自己或别人的项目。感谢@朋友你的学生卡掉了 同学的推荐<br><img src="/2020/09/29/程序猿的MacOS环境(一)/程序猿的MacOS环境(一" alt="image.png">/Octotree.png)</p></li><li><p>WeChatPlugin mac<br>mac微信助手，<a href="https://www.jianshu.com/p/b6ecd2c3c1dd" target="_blank" rel="noopener">mac微信助手，功能全新升级</a>，有很多比如消息防撤回、远程控制(已支持语音)、微信多开、第二次登录免认证等等的功能。</p></li></ol><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="https://www.jianshu.com/p/65cec2a1055d" target="_blank" rel="noopener">工欲善其事，必先利其器-程序员工具推荐</a><br><a href="https://www.macdown.com/news/3644.html" target="_blank" rel="noopener">正是有了这些神器，让我再也离不开Mac！</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/2f8b0f0aca93&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="https://qdhaiqiang.github.io/categories/mac/"/>
    
    
      <category term="mac" scheme="https://qdhaiqiang.github.io/tags/mac/"/>
    
      <category term="tools" scheme="https://qdhaiqiang.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>安卓有线无线投屏神器---scrcpy</title>
    <link href="https://qdhaiqiang.github.io/2020/09/28/%E5%AE%89%E5%8D%93%E6%9C%89%E7%BA%BF%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8---scrcpy/"/>
    <id>https://qdhaiqiang.github.io/2020/09/28/安卓有线无线投屏神器---scrcpy/</id>
    <published>2020-09-28T15:23:00.000Z</published>
    <updated>2020-10-02T15:36:41.571Z</updated>
    
    <content type="html"><![CDATA[<p>一款最简单，切PC上可以操作移动设备的安卓投屏软件，基于adb实现<br><a href="https://www.jianshu.com/p/04bdcf8a09b9" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>用过sync，用过免费的软件<a href="https://letsview.com/zh/" target="_blank" rel="noopener">幕享</a>，最后发现哪一款也没有scrcpy好使。</p><p>需要两个命令行，<code>adb</code>和<code>scrcpy</code></p><p>安装就不用描述了，能有把手机投到电脑上的想法的人应该都能安装上。</p><p>安装上以后就更了不得了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># mahaiqiang @ mahaiqiangs-MacBook-Pro in ~ [8:58:14]</span><br><span class="line">$ adb usb</span><br><span class="line">* daemon not running; starting now at tcp:5037</span><br><span class="line">* daemon started successfully</span><br><span class="line">restarting in USB mode</span><br><span class="line"></span><br><span class="line"># mahaiqiang @ mahaiqiangs-MacBook-Pro in ~ [8:59:10]</span><br><span class="line">$ scrcpy</span><br><span class="line">2020-09-28 08:59:14.880 scrcpy[1865:48805] INFO: scrcpy 1.14 &lt;https://github.com/Genymobile/scrcpy&gt;</span><br><span class="line">/usr/local/Cellar/scrcpy/1.14_1/share/scrcpy/scrcpy-server: 1 file pushed. 1.3 MB/s (33142 bytes in 0.025s)</span><br><span class="line">[server] INFO: Device: HUAWEI EVA-AL00 (Android 8.0.0)</span><br><span class="line">2020-09-28 08:59:16.304 scrcpy[1865:48805] INFO: Created renderer: metal</span><br><span class="line">2020-09-28 08:59:16.304 scrcpy[1865:48805] INFO: Renderer: metal</span><br><span class="line">2020-09-28 08:59:16.311 scrcpy[1865:48805] INFO: Initial texture: 1080x1920</span><br></pre></td></tr></table></figure></p><p>如果电脑信任了手机,开了USB调试，这时候应该能从电脑上看到手机了，就是这么简单。</p><p>强烈推荐<br><a href="https://blog.csdn.net/was172/article/details/99705855" target="_blank" rel="noopener">scrcpy——Android投屏神器(使用教程)</a></p><p>稍微给自己备份一下，万一以上博客哪天下架了。</p><h2 id="使用scrcpy的要求"><a href="#使用scrcpy的要求" class="headerlink" title="使用scrcpy的要求"></a>使用scrcpy的要求</h2><ol><li>Android设备至少需要API 21（Android 5.0以上版本）;</li><li>确保在您的设备上启用了<a href="https://developer.android.com/studio/command-line/adb.html#Enabling" target="_blank" rel="noopener">adb调试</a>;</li><li>在某些设备上，您还需要启用<a href="https://github.com/Genymobile/scrcpy/issues/70#issuecomment-373286323" target="_blank" rel="noopener">其他选项</a>以使用键盘和鼠标控制它。</li></ol><h2 id="使用电脑连接手机"><a href="#使用电脑连接手机" class="headerlink" title="使用电脑连接手机"></a>使用电脑连接手机</h2><p>在Android手机中打开了USB调试后，我们即可在电脑中使用adb进行调试。</p><p>我使用的是Windows10系统，以下以Windows为例，MacOS或Linux请<a href="https://github.com/Genymobile/scrcpy#get-the-app" target="_blank" rel="noopener">点击这里</a>。</p><p>程序使用了Java语言，我们需要在电脑中搭建Java运行环境，参考：<a href="https://blog.csdn.net/sigmarising/article/details/80139287" target="_blank" rel="noopener">Windows10 配置 Java 开发环境</a></p><p>首先下载scrcpy，可去<code>releases</code>下载最新版本，目前最新版本为<code>v1.10</code>。</p><p>下载地址：<a href="https://github.com/Genymobile/scrcpy/releases" target="_blank" rel="noopener">https://github.com/Genymobile/scrcpy/releases</a></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-9f46707c232fe855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>打开cmd定位到此目录（在地址栏中输入<code>cmd</code>回车），或者将该目录如<code>D:\Github_Run\scrcpy-win64-v1.10</code>加入到系统环境变量中，程序的使用都在cmd命令行中操作。</p><h2 id="使用USB进行连接"><a href="#使用USB进行连接" class="headerlink" title="使用USB进行连接"></a>使用USB进行连接</h2><p>此方式推荐使用，相对更加流畅。</p><ol><li>手机通过USB连接到PC上，首次连接会弹出是否信任该电脑，点击始终信任即可。</li><li>运行<code>adb usb</code>查看是否连接成功</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Github_Run\scrcpy-win64-v1.10&gt;adb usb</span><br><span class="line">restarting in USB mode</span><br></pre></td></tr></table></figure><ol start="3"><li>运行<code>scrcpy</code>即可。</li></ol><h2 id="使用无线连接"><a href="#使用无线连接" class="headerlink" title="使用无线连接"></a>使用无线连接</h2><p>可参考官方文档：<a href="https://www.genymotion.com/blog/open-source-project-scrcpy-now-works-wirelessly/" target="_blank" rel="noopener">Open Source Project - Scrcpy now works wirelessly</a></p><p>此连接方式更加方便快捷，若宽带速率高，使用效果更佳，使用方法也非常简单。</p><ol><li>确保PC和手机在同一Wifi中</li><li>手机先通过USB与PC相连</li><li>在PC上运行 adb tcpip 服务端口，如端口为5555</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Github_Run\scrcpy-win64-v1.10&gt;adb tcpip 5555</span><br><span class="line">restarting in TCP mode port: 5555</span><br></pre></td></tr></table></figure><ol start="4"><li>拔下你的设备，断开USB连接</li><li>在PC上运行 adb connect 手机IP:服务端口（手机IP可通过手机的<code>状态信息</code>查看，或者登录路由器查看，一般以192.168开头）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D:\Github_Run\scrcpy-win64-v1.10&gt;adb connect 192.168.0.4:5555</span><br><span class="line">connected to 192.168.0.4:5555</span><br></pre></td></tr></table></figure><ol start="6"><li>运行scrcpy，在cmd中输入<code>scrcpy.exe</code></li></ol><p>参考：<br><a href="https://blog.csdn.net/was172/article/details/99705855" target="_blank" rel="noopener">scrcpy——Android投屏神器(使用教程)</a></p><p><a href="http://blog.lujun9972.win/blog/2019/03/20/%E4%BD%BF%E7%94%A8scrcpy%E6%8E%A7%E5%88%B6%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA/" target="_blank" rel="noopener">使用scrcpy控制你的手机</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一款最简单，切PC上可以操作移动设备的安卓投屏软件，基于adb实现&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/04bdcf8a09b9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="微信" scheme="https://qdhaiqiang.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>nginx文件目录服务器</title>
    <link href="https://qdhaiqiang.github.io/2020/09/22/nginx%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://qdhaiqiang.github.io/2020/09/22/nginx文件目录服务器/</id>
    <published>2020-09-22T15:00:00.000Z</published>
    <updated>2020-10-02T14:40:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>nginx搭建一个文件服务器<br><a href="https://www.jianshu.com/p/96560e2f4e47" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>用nginx配置一个文件服务器，并解决中文乱码问题，配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name downloadapp.3vyd.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos; always;</span><br><span class="line">add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;;</span><br><span class="line">add_header &apos;Access-Control-Expose-Headers&apos; &apos;Content-Length,Content-Range&apos;;</span><br><span class="line">add_header &apos;Access-Control-Allow-Headers&apos; &apos;Range&apos;;</span><br><span class="line">        root /var/packages;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">charset utf-8;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-9b7df3ca35a5bec4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>如果，开放目录，当时不允许直接访问，只能访问指定路径下的html文件，nginx.conf的配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    add_header Access-Control-Allow-Origin *;</span><br><span class="line">    add_header Access-Control-Allow-Headers *;</span><br><span class="line">    add_header Access-Control-Allow-Credentials true always;</span><br><span class="line">    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;</span><br><span class="line">    add_header Access-Control-Max-Age 1728000 always;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8088;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        </span><br><span class="line">        # location / &#123;</span><br><span class="line">        #     root   /var/jenkins/report/admin/dist;</span><br><span class="line">        #     try_files $uri $uri/ /index.html;</span><br><span class="line">        #     index  index.html;</span><br><span class="line">        # &#125;</span><br><span class="line"></span><br><span class="line">        location /report &#123;</span><br><span class="line">            if ($request_method = &apos;OPTIONS&apos;) &#123;</span><br><span class="line">                add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;;</span><br><span class="line">                add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</span><br><span class="line">                add_header &apos;Access-Control-Allow-Headers&apos; &apos;*&apos;;</span><br><span class="line">                return 204;</span><br><span class="line">            &#125;</span><br><span class="line">            root   /var/jenkins_home;</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">            index  index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~* \.(eot|ttf|woff)$ &#123;</span><br><span class="line">          add_header Access-Control-Allow-Origin *;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-9cfb0b549fddf60b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-fc56aec1386eae03.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="403"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.tencent.com/developer/article/1142152" target="_blank" rel="noopener">nginx开启目录浏览及解决中文文件名乱码问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx搭建一个文件服务器&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/96560e2f4e47&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nginx" scheme="https://qdhaiqiang.github.io/categories/nginx/"/>
    
    
      <category term="nginx" scheme="https://qdhaiqiang.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>websocket本地调试html</title>
    <link href="https://qdhaiqiang.github.io/2020/09/13/websocket%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95html/"/>
    <id>https://qdhaiqiang.github.io/2020/09/13/websocket本地调试html/</id>
    <published>2020-09-13T14:00:00.000Z</published>
    <updated>2020-10-02T14:40:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>新起websocket服务后本地如何调试呢？<br><a href="https://www.jianshu.com/p/8ad2746b0866" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>先看看本地这个静态html在浏览器里看到的页面。</p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-7d808ef9f949ee34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;title&gt;本地websocket测试&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;本地,websocket,测试工具&quot; /&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;本地,websocket,测试工具&quot; /&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.btn-group&#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=&apos;text&apos; value=&apos;ws://localhost:3000/api/ws&apos; class=&quot;form-control&quot; style=&apos;width:390px;display:inline&apos;</span><br><span class="line"> id=&apos;wsaddr&apos; /&gt;</span><br><span class="line">&lt;div class=&quot;btn-group&quot; &gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;addsocket();&apos;&gt;连接&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;closesocket();&apos;&gt;断开&lt;/button&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;$(&quot;#wsaddr&quot;).val(&quot;&quot;)&apos;&gt;清空&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div id=&quot;output&quot; style=&quot;border:1px solid #ccc;height:365px;overflow: auto;margin: 20px 0;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; id=&apos;message&apos; class=&quot;form-control&quot; style=&apos;width:810px&apos; placeholder=&quot;待发信息&quot; onkeydown=&quot;en(event);&quot;&gt;</span><br><span class="line">&lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-default&quot; type=&quot;button&quot; onclick=&quot;doSend();&quot;&gt;发送&lt;/button&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha384-LVoNJ6yst/aLxKvxwp6s2GAabqPczfWh6xzm38S/YtjUyZ+3aTKOnD/OJVGYLZDl&quot; src=&quot;https://lib.baomitu.com/jquery/3.5.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function formatDate(now) &#123;</span><br><span class="line">var year = now.getFullYear();</span><br><span class="line">var month = now.getMonth() + 1;</span><br><span class="line">var date = now.getDate();</span><br><span class="line">var hour = now.getHours();</span><br><span class="line">var minute = now.getMinutes();</span><br><span class="line">var second = now.getSeconds();</span><br><span class="line">return year + &quot;-&quot; + (month = month &lt; 10 ? (&quot;0&quot; + month) : month) + &quot;-&quot; + (date = date &lt; 10 ? (&quot;0&quot; + date) : date) +</span><br><span class="line">&quot; &quot; + (hour = hour &lt; 10 ? (&quot;0&quot; + hour) : hour) + &quot;:&quot; + (minute = minute &lt; 10 ? (&quot;0&quot; + minute) : minute) + &quot;:&quot; + (</span><br><span class="line">second = second &lt; 10 ? (&quot;0&quot; + second) : second);</span><br><span class="line">&#125;</span><br><span class="line">var output;</span><br><span class="line">var websocket;</span><br><span class="line"> </span><br><span class="line">function init() &#123;</span><br><span class="line">output = document.getElementById(&quot;output&quot;);</span><br><span class="line">testWebSocket();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function addsocket() &#123;</span><br><span class="line">var wsaddr = $(&quot;#wsaddr&quot;).val();</span><br><span class="line">if (wsaddr == &apos;&apos;) &#123;</span><br><span class="line">alert(&quot;请填写websocket的地址&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">StartWebSocket(wsaddr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function closesocket() &#123;</span><br><span class="line">websocket.close();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function StartWebSocket(wsUri) &#123;</span><br><span class="line">websocket = new WebSocket(wsUri);</span><br><span class="line">websocket.onopen = function(evt) &#123;</span><br><span class="line">onOpen(evt)</span><br><span class="line">&#125;;</span><br><span class="line">websocket.onclose = function(evt) &#123;</span><br><span class="line">onClose(evt)</span><br><span class="line">&#125;;</span><br><span class="line">websocket.onmessage = function(evt) &#123;</span><br><span class="line">onMessage(evt)</span><br><span class="line">&#125;;</span><br><span class="line">websocket.onerror = function(evt) &#123;</span><br><span class="line">onError(evt)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function onOpen(evt) &#123;</span><br><span class="line">writeToScreen(&quot;&lt;span style=&apos;color:red&apos;&gt;连接成功，现在你可以发送信息啦！！！&lt;/span&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function onClose(evt) &#123;</span><br><span class="line">writeToScreen(&quot;&lt;span style=&apos;color:red&apos;&gt;websocket连接已断开!!!&lt;/span&gt;&quot;);</span><br><span class="line">websocket.close();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function onMessage(evt) &#123;</span><br><span class="line">writeToScreen(&apos;&lt;span style=&quot;color:blue&quot;&gt;服务端回应&amp;nbsp;&apos; + formatDate(new Date()) + &apos;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;bubble&quot;&gt;&apos; +</span><br><span class="line">evt.data + &apos;&lt;/span&gt;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function onError(evt) &#123;</span><br><span class="line">writeToScreen(&apos;&lt;span style=&quot;color: red;&quot;&gt;发生错误:&lt;/span&gt; &apos; + evt.data);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function doSend() &#123;</span><br><span class="line">var message = $(&quot;#message&quot;).val();</span><br><span class="line">if (message == &apos;&apos;) &#123;</span><br><span class="line">alert(&quot;请先填写发送信息&quot;);</span><br><span class="line">$(&quot;#message&quot;).focus();</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (typeof websocket === &quot;undefined&quot;) &#123;</span><br><span class="line">alert(&quot;websocket还没有连接，或者连接失败，请检测&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">if (websocket.readyState == 3) &#123;</span><br><span class="line">alert(&quot;websocket已经关闭，请重新连接&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">console.log(websocket);</span><br><span class="line">$(&quot;#message&quot;).val(&apos;&apos;);</span><br><span class="line">writeToScreen(&apos;&lt;span style=&quot;color:green&quot;&gt;你发送的信息&amp;nbsp;&apos; + formatDate(new Date()) + &apos;&lt;/span&gt;&lt;br/&gt;&apos; + message);</span><br><span class="line">websocket.send(message);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function writeToScreen(message) &#123;</span><br><span class="line">var div = &quot;&lt;div class=&apos;newmessage&apos;&gt;&quot; + message + &quot;&lt;/div&gt;&quot;;</span><br><span class="line">var d = $(&quot;#output&quot;);</span><br><span class="line">var d = d[0];</span><br><span class="line">var doScroll = d.scrollTop == d.scrollHeight - d.clientHeight;</span><br><span class="line">$(&quot;#output&quot;).append(div);</span><br><span class="line">if (doScroll) &#123;</span><br><span class="line">d.scrollTop = d.scrollHeight - d.clientHeight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">function en(event) &#123;</span><br><span class="line">var evt = evt ? evt : (window.event ? window.event : null);</span><br><span class="line">if (evt.keyCode == 13) &#123;</span><br><span class="line">doSend()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新起websocket服务后本地如何调试呢？&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/8ad2746b0866&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="微信" scheme="https://qdhaiqiang.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>shadow-cljs hooks解决css延迟加载导致页面邹形问题</title>
    <link href="https://qdhaiqiang.github.io/2020/08/29/shadow-cljs%20hooks%E8%A7%A3%E5%86%B3css%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E9%82%B9%E5%BD%A2%E9%97%AE%E9%A2%98/"/>
    <id>https://qdhaiqiang.github.io/2020/08/29/shadow-cljs hooks解决css延迟加载导致页面邹形问题/</id>
    <published>2020-08-28T16:31:27.000Z</published>
    <updated>2020-10-02T14:40:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>在shadow-cljs项目中在最后编译的时候将所有的css写入到同一个css文件，在index.html里引用一次<br><a href="https://www.jianshu.com/p/ff7885afaab9" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>我司使用shadow-cljs编译clojure script代码，考虑到大家都编辑一个css文件的话，冲突比较严重，并且代码也没有模块化，所以每个模块有自己的样式文件，目前都是在自己业务模块或者component里引入自己的css文件，结构基本是这样的：<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> login-main []</span><br><span class="line">  [<span class="symbol">:div</span></span><br><span class="line">   [<span class="symbol">:link</span> &#123;<span class="symbol">:rel</span> <span class="string">"stylesheet"</span> <span class="symbol">:href</span> <span class="string">"/css/login.css"</span> &#125;]</span><br><span class="line">   [<span class="symbol">:div</span> <span class="string">"登录组件样式"</span>]])</span><br></pre></td></tr></table></figure></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>好处：</p><ul><li>代码模块化，业务组件与样式文件一一对应，便于开发团队维护代码。</li><li>不用在入口文件里引入一堆css文件，减少commit冲突。</li><li>减少资源浪费，只有页面加载处才加载css，系统不加载无用的资源文件。</li></ul><p>痛点</p><ul><li>一条足以致命，那就是产品体验不好，css加载延迟，几乎每个页面都出现如下一个瞬间。<br><img src="https://upload-images.jianshu.io/upload_images/4109786-c1571f59ff4e79be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定制"></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4109786-5497b1a6f46b1c32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="订单"></p><p>是的，你看的没有错，浏览确实没有加载完，网络好的话这个页面瞬间就过了，但是万一碰上不好的，那就尴尬了，并且有时候还出现过最后样式就没有出来的情况。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不能让组件渲染时才去加载css，所以link这个方案pass掉。<br>那么只能将css在<code>index.html</code>里引入，不管用不用得到，都先加载出来，让浏览器先缓存下来备用。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><ol><li>代码层面，还是分模块，业务模块和css模块一一对应。</li><li>在系统运行时将所有自定义的css合并到一个样式文件，在<code>index.html</code>中引用。</li></ol><p>其中第二点，在部署时可以使用脚本处理，但是在本地开发时就比较不便，不过好在shadow-cljs提供了<a href="https://shadow-cljs.github.io/docs/UsersGuide.html#build-hooks" target="_blank" rel="noopener">build-hooks</a>神器。加载配置中，让我们代码编译时做了这个合并css文件的工作。具体的配置是在根目录的<code>shadow-cljs.edn</code>中加入如下配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;...</span><br><span class="line"> :builds</span><br><span class="line"> &#123;:app &#123;:target ...</span><br><span class="line">           :build-hooks [(utils.hooks/watch-resource)]</span><br><span class="line">        ...&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>这个hooks的全部代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(ns utils.hooks</span><br><span class="line">  (:require [clojure.java.shell :as shell]))</span><br><span class="line"></span><br><span class="line">(defn watch-resource</span><br><span class="line">  &#123;:shadow.build/stage :flush&#125;</span><br><span class="line">  [build-state &amp; args]</span><br><span class="line">  (future</span><br><span class="line">    (prn &quot;configure completed&quot;)</span><br><span class="line">    (let [dir (System/getProperty &quot;user.dir&quot;)]</span><br><span class="line">      (clojure.java.shell/with-sh-dir (str dir &quot;/src/cljs/utils&quot;)</span><br><span class="line">        (clojure.java.shell/sh &quot;mergecss.sh&quot; (str dir &quot;/resources/public/css&quot;) (str dir &quot;/resources/public/css/style.css&quot;)))))</span><br><span class="line">  build-state)</span><br></pre></td></tr></table></figure></p><p>如果参考，shadow-cljs官方对<a href="https://shadow-cljs.github.io/docs/UsersGuide.html#build-hooks" target="_blank" rel="noopener">build-hooks</a>的说明，不难理解。解释两个东西</p><ol><li><code>(System/getProperty &quot;user.dir&quot;)</code>，这个是获取当前项目的工作目录，也就是项目跟目录，注意不是git根目录。有了这个，想获取什么目录或者文件，手到擒来。</li><li>hooks里还调用了一个脚本文件<code>mergecss.sh</code>,这个文件的作用是把开发团队自己写的所有css的内容copy到同一个<code>style.css</code>文件中去，第一个参数是要处理的目录(会向下遍历目录)，第二个参数是要写入的目标文件，附上脚本代码：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">获取第一个参数,目标目录</span></span><br><span class="line">srcpath=$1</span><br><span class="line"><span class="meta">#</span><span class="bash">第二个参数，输出文件</span></span><br><span class="line">target_file=$2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">先删除原目标文件</span></span><br><span class="line">rm -rf $&#123;target_file&#125;;</span><br><span class="line"></span><br><span class="line">function writeByDir()&#123;</span><br><span class="line">    for file in $1/*</span><br><span class="line">      do</span><br><span class="line">        if test -f $file; then</span><br><span class="line"><span class="meta">  #</span><span class="bash">_echo $(basename <span class="variable">$file</span>)</span></span><br><span class="line">          if [[ $(basename $file) = "antd.min.css" ]] || [[ $(basename $file) = "slick.min.css" ]] || [[ $(basename $file) = "slick-theme.min.css" ]]; then</span><br><span class="line">            echo "uncopy css :"$(basename $file)</span><br><span class="line">          else</span><br><span class="line">            cat "$file" &gt;&gt; "$&#123;target_file&#125;"</span><br><span class="line">          echo "" &gt;&gt; "$&#123;target_file&#125;"</span><br><span class="line">          fi</span><br><span class="line">        else</span><br><span class="line">          writeByDir $file</span><br><span class="line">       fi</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line">writeByDir $&#123;srcpath&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>此处由衷感慨下，repl真好用，clojure.java.shell这个库的使用，及最后钩子内容好不好使全靠这个工具调试。否则的话，修改hooks就要频繁启动shadow-cljs项目，并且如果hooks函数有错误的没有任何报错信息，只是钩子函数不执行。</p></blockquote><p>这样本地开发的css文件也能及时写入到<code>style.css</code>里，在<code>index.html</code>引用这个文件，妥了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot; type=&quot;text/css&quot; &gt;</span><br></pre></td></tr></table></figure></p><h2 id="一顿操作猛如虎，定睛一看原地杵"><a href="#一顿操作猛如虎，定睛一看原地杵" class="headerlink" title="一顿操作猛如虎，定睛一看原地杵"></a>一顿操作猛如虎，定睛一看原地杵</h2><p>以上操作还是不够完美，</p><ol><li><p>加上hook后，在本地修改自己的css后，钩子不执行，改的代码不会自己写入目标文件。<br>方案一：在9630端口上手动触发compile，强制flush。<br>方案二：开发过程中可以在cljs文件里link自己的样式文件，达到高效开发，link段落不用提交。</p></li><li><p>为了开发时不冲突，更新gitignore，生成的css不用commit到项目里，release环境在持续集成时执行该hook的操作，调用服务器的脚本文件。</p></li><li><p>样式文件没有hash，纯copy，只为解决css加载延迟导致的页面丑陋。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://blog.csdn.net/sirfenygu/article/details/47025083" target="_blank" rel="noopener">https://blog.csdn.net/sirfenygu/article/details/47025083</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在shadow-cljs项目中在最后编译的时候将所有的css写入到同一个css文件，在index.html里引用一次&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/ff7885afaab9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="微信" scheme="https://qdhaiqiang.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>mac上soundflower+OBS+微信公众号直播项目总结</title>
    <link href="https://qdhaiqiang.github.io/2020/08/16/mac%E4%B8%8Asoundflower+OBS+%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <id>https://qdhaiqiang.github.io/2020/08/16/mac上soundflower+OBS+微信公众号直播项目总结/</id>
    <published>2020-08-16T15:31:27.000Z</published>
    <updated>2020-10-02T14:40:16.646Z</updated>
    
    <content type="html"><![CDATA[<p>mac上使用腾讯会议+OBS客户端做直播<br><a href="https://www.jianshu.com/p/7764b4c643a6" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h2 id="1-本地微信公众号开发"><a href="#1-本地微信公众号开发" class="headerlink" title="1. 本地微信公众号开发"></a>1. 本地微信公众号开发</h2><p>参考：<a href="https://www.jianshu.com/p/05a58682cbac" target="_blank" rel="noopener">微信配置本地公众号开发环境</a></p><h2 id="2-runtime的addShutdownHook钩子不执行"><a href="#2-runtime的addShutdownHook钩子不执行" class="headerlink" title="2. runtime的addShutdownHook钩子不执行"></a>2. runtime的addShutdownHook钩子不执行</h2><p>参考：<a href="https://www.jianshu.com/p/8001a66d37c9" target="_blank" rel="noopener">Linux kill &amp; Java shutdownhook</a><br>最后用的kill-15 pid停止进程，或许有更好的方式，比如System.exit();</p><h4 id="读文件好说，项目启动时编译就会读"><a href="#读文件好说，项目启动时编译就会读" class="headerlink" title="读文件好说，项目启动时编译就会读"></a>读文件好说，项目启动时编译就会读</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">def</span></span> file-url <span class="string">"/opt/xhlive-training/pkg/activity/db.edn"</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> messages (<span class="name"><span class="builtin-name">atom</span></span> (<span class="name">clojure.edn/read-string</span> (<span class="name"><span class="builtin-name">slurp</span></span> file-url))))</span><br></pre></td></tr></table></figure><h4 id="增加hook"><a href="#增加hook" class="headerlink" title="增加hook"></a>增加hook</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> -main [&amp; args]</span><br><span class="line">  (<span class="name">start!</span>)</span><br><span class="line">  (<span class="name">.addShutdownHook</span> (<span class="name">Runtime/getRuntime</span>)</span><br><span class="line">                    (<span class="name"><span class="builtin-name">new</span></span> Thread (<span class="name"><span class="builtin-name">fn</span></span>[]</span><br><span class="line">                                  (<span class="name"><span class="builtin-name">prn</span></span> <span class="string">"I am going down...."</span>)</span><br><span class="line">                                  (<span class="name"><span class="builtin-name">when</span></span> (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">empty?</span></span> @messages))</span><br><span class="line">                                    (<span class="name">spit</span> file-url @messages)))))</span><br><span class="line">  (<span class="name">println</span> <span class="string">"启动ws...."</span>))</span><br></pre></td></tr></table></figure><h2 id="3-项目启动时读文件，项目结束时写文件"><a href="#3-项目启动时读文件，项目结束时写文件" class="headerlink" title="3. 项目启动时读文件，项目结束时写文件"></a>3. 项目启动时读文件，项目结束时写文件</h2><p>类似在服务结束时增加一些销毁现场的能力。<a href="https://zhuanlan.zhihu.com/p/82350423" target="_blank" rel="noopener">Java中使用shutdownHook的一些注意事项</a><br>上博主的介绍相对来说能够帮助addShutdownHook的场景了。</p><p>本文介绍clojure版实践。</p><h4 id="slurp-读函数"><a href="#slurp-读函数" class="headerlink" title="slurp 读函数"></a>slurp 读函数</h4><p>读取一个文本文件的全部内容</p><blockquote><p>clojure.core/slurp<br>读取一个文件的全部内容，并以字符串形式返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(comment</span><br><span class="line">  (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;)</span><br><span class="line">  ;; =&gt; &quot;a txt file line1\na txt file line2\n这是中文字符&quot;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="spit-写函数"><a href="#spit-写函数" class="headerlink" title="spit 写函数"></a>spit 写函数</h4><p>clojure.core/spit [file-path content &amp; options]<br>file-path：为文件路径；<br>content：为要写入文件的内容，所有的内容都会被转为String类型写入。<br>options：一些设置参数，常见的有：</p><p>:append true/false；当为true是，内容会从文件后面写入，如果要换行写入，需要在内容后面加入\n换行符，当为false时，会擦掉文件原有的内容。<br>:encoding “UTF-8”或”GBK”等。 默认是UTF-8.<br>spit函数会先打开文件，再将内容写入，再关闭文件。<br>spit都是以字符串形式写入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(comment</span><br><span class="line">  (spit &quot;files/file-test.txt&quot; &quot;新增文件内容\n&quot; :append false :encoding &quot;GBK&quot;)</span><br><span class="line">  (slurp &quot;files/file-test.txt&quot; :encoding &quot;GBK&quot;)</span><br><span class="line">  ;; =&gt; &quot;新增文件内容\n&quot;</span><br><span class="line">  (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;)</span><br><span class="line">  ;; =&gt; &quot;�����ļ�����\n&quot;</span><br><span class="line">  (spit &quot;files/file-test.txt&quot; &quot;新增文件内容\n&quot; :append false)</span><br><span class="line">  (slurp &quot;files/file-test.txt&quot; :encoding &quot;GBK&quot;)</span><br><span class="line">  ;; =&gt; &quot;鏂板鏂囦欢鍐呭\n&quot;</span><br><span class="line">  (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;)</span><br><span class="line">  ;; =&gt; &quot;新增文件内容\n&quot;</span><br><span class="line"></span><br><span class="line">  ;; 逐行写大量数据到文件时，用spit会降低效率，因为它每写一次都会执行打开、关闭文件。</span><br><span class="line">  ;; 此时可以用java.io.writer.</span><br><span class="line">  (with-open [w (cio/writer &quot;files/file-test.txt&quot;)]</span><br><span class="line">    (doseq [l  [&quot;第一行&quot; &quot;第二行&quot; &quot;第三行&quot;]]</span><br><span class="line">      (.write w l)</span><br><span class="line">      ;; 新起一行</span><br><span class="line">      (.newLine w)))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p>clojure使用两个库，不附源码。<br><a href="https://github.com/ptaoussanis/sente" target="_blank" rel="noopener">https://github.com/ptaoussanis/sente</a><br><a href="https://github.com/ptaoussanis/timbre" target="_blank" rel="noopener">https://github.com/ptaoussanis/timbre</a></p><h2 id="mac上使用OBS做直播"><a href="#mac上使用OBS做直播" class="headerlink" title="mac上使用OBS做直播"></a>mac上使用OBS做直播</h2><p>我们的方案是把腾讯会议的会议内容做一定的背景、头像的裁剪处理后用OBS studio软件把流推出去，然后在客户端用m3u8的格式拉取播放。</p><p>为什么单独提一下这个，因为mac上能把麦克风的声音播出去，但是桌面的声音拨不出去。换句话说，你用网易云音乐，想只把这个软件的声音用OBS播出去，是不可以的，于是借助soundFlower这款软件可以实现，在腾讯会议上选择soundflower (64ch)这个通道。<br><img src="https://upload-images.jianshu.io/upload_images/4109786-4c0676502c8378d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>OBS里设置也选择soundflower (64ch)<br><img src="https://upload-images.jianshu.io/upload_images/4109786-e9541b0fff6ca3c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以只将腾讯会议的声音播出去。</p><p>然而，这样有产生个新问题，腾讯会议的声音都被OBS拨出去了，自己的电脑端却听不见了，于是参考<br><a href="https://www.bilibili.com/video/av32168478/" target="_blank" rel="noopener">在MacOS上利用OBS+Soundflower内录声音与直播</a>这个教程配置了聚合输入和混合输出，相当于将一个声音进行了扩展，这样才妥当了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/linux2_scdn/article/details/52575659" target="_blank" rel="noopener">clojure实战——IO（1）</a><br><a href="https://www.bilibili.com/video/av32168478/" target="_blank" rel="noopener">在MacOS上利用OBS+Soundflower内录声音与直播</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac上使用腾讯会议+OBS客户端做直播&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/7764b4c643a6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="微信" scheme="https://qdhaiqiang.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design Pro V4安装&quot;辛&quot;路历程</title>
    <link href="https://qdhaiqiang.github.io/2020/08/09/Ant%20Design%20Pro%20V4%E5%AE%89%E8%A3%85%22%E8%BE%9B%22%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <id>https://qdhaiqiang.github.io/2020/08/09/Ant Design Pro V4安装&quot;辛&quot;路历程/</id>
    <published>2020-08-09T13:31:27.000Z</published>
    <updated>2020-10-02T14:40:16.646Z</updated>
    
    <content type="html"><![CDATA[<p>新版本antd pro后台项目的demo搭建使用<br><a href="https://www.jianshu.com/p/5c5c2d0fc119" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>以前安装ant design pro从github上clone下来，两句话就在浏览器看到登录页面了，现在这个东西越来越臃肿了，我就想要个页面，跑起来给客户看看样子，结果废了老劲了，也不知道都往里面搞了啥。</p><p>今天记录一下吧。<br>参考<a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">官网</a>教程.<br>选择ant-design-pro,Pro V4，TypeScript，complete.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ npm create umi</span><br><span class="line">? Select the boilerplate type ant-design-pro</span><br><span class="line">? 🧙 Be the first to experience the new umi@3 ? Pro V4</span><br><span class="line">? 🤓 Which language do you want to use? TypeScript</span><br><span class="line">? 🚀 Do you need all the blocks or a simple scaffold? complete</span><br><span class="line">&gt; 🙈 complete mode can only use the version of antd@4</span><br><span class="line">Cloning into &apos;/Users/marvin/git/opensource/react/antd-pro&apos;...</span><br><span class="line">remote: Enumerating objects: 564, done.</span><br><span class="line">remote: Counting objects: 100% (564/564), done.</span><br><span class="line">remote: Compressing objects: 100% (481/481), done.</span><br><span class="line">remote: Total 564 (delta 89), reused 318 (delta 62), pack-reused 0</span><br><span class="line">Receiving objects: 100% (564/564), 461.41 KiB | 435.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (89/89), done.</span><br><span class="line">&gt; 🚚 clone success</span><br><span class="line">&gt; Clean up...</span><br><span class="line">✨ File Generate Done</span><br></pre></td></tr></table></figure></p><p>项目创建成功后执行<code>npm install</code>,出个错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; node-pty@0.10.0-beta9 install /Users/marvin/git/opensource/react/antd-pro/node_modules/node-pty</span><br><span class="line">&gt; node scripts/install.js</span><br><span class="line"></span><br><span class="line">gyp WARN install got an error, rolling back install</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack ZlibError: zlib: unexpected end of file</span><br><span class="line">gyp ERR! stack     at Unzip.write (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:147:22)</span><br><span class="line">gyp ERR! stack     at Unzip.flush (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:98:10)</span><br><span class="line">gyp ERR! stack     at Unzip.end (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:104:10)</span><br><span class="line">gyp ERR! stack     at Unpack.end (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/tar/lib/parse.js:421:21)</span><br><span class="line">gyp ERR! stack     at IncomingMessage.onend (_stream_readable.js:679:10)</span><br><span class="line">gyp ERR! stack     at Object.onceWrapper (events.js:420:28)</span><br><span class="line">gyp ERR! stack     at IncomingMessage.emit (events.js:326:22)</span><br><span class="line">gyp ERR! stack     at IncomingMessage.&lt;anonymous&gt; (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/request/request.js:1000:23)</span><br><span class="line">gyp ERR! stack     at IncomingMessage.emit (events.js:326:22)</span><br><span class="line">gyp ERR! stack     at TLSSocket.socketCloseListener (_http_client.js:435:11)</span><br><span class="line">gyp ERR! System Darwin 19.6.0</span><br><span class="line">gyp ERR! command &quot;/Users/marvin/.nvm/versions/node/v14.5.0/bin/node&quot; &quot;/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class="line">gyp ERR! cwd /Users/marvin/git/opensource/react/antd-pro/node_modules/node-pty</span><br><span class="line">gyp ERR! node -v v14.5.0</span><br><span class="line">gyp ERR! node-gyp -v v5.1.0</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure></p><p>查了半天，按照<a href="https://www.jianshu.com/p/a2a2ddeb174c" target="_blank" rel="noopener">https://www.jianshu.com/p/a2a2ddeb174c</a><br>的思路，错误变成了下面这个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line">&gt; fsevents@1.2.13 install /Users/marvin/git/opensource/react/antd-pro/node_modules/jest-environment-jsdom-fourteen/node_modules/fsevents</span><br><span class="line">&gt; node install.js</span><br><span class="line"></span><br><span class="line">No receipt for &apos;com.apple.pkg.CLTools_Executables&apos; found at &apos;/&apos;.</span><br><span class="line"></span><br><span class="line">No receipt for &apos;com.apple.pkg.DeveloperToolsCLILeo&apos; found at &apos;/&apos;.</span><br><span class="line"></span><br><span class="line">No receipt for &apos;com.apple.pkg.DeveloperToolsCLI&apos; found at &apos;/&apos;.</span><br><span class="line"></span><br><span class="line">gyp: No Xcode or CLT version detected!</span><br><span class="line">gyp ERR! configure error</span><br><span class="line">gyp ERR! stack Error: `gyp` failed with exit code: 1</span><br><span class="line">gyp ERR! stack     at ChildProcess.onCpExit (/Users/marvin/.nvm/versions/node/v12.8.0/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:344:16)</span><br><span class="line">gyp ERR! stack     at ChildProcess.emit (events.js:203:13)</span><br><span class="line">gyp ERR! stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)</span><br><span class="line">gyp ERR! System Darwin 19.6.0</span><br><span class="line">gyp ERR! command &quot;/Users/marvin/.nvm/versions/node/v12.8.0/bin/node&quot; &quot;/Users/marvin/.nvm/versions/node/v12.8.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;</span><br><span class="line">gyp ERR! cwd /Users/marvin/git/opensource/react/antd-pro/node_modules/jest-environment-jsdom-fourteen/node_modules/fsevents</span><br><span class="line">gyp ERR! node -v v12.8.0</span><br><span class="line">gyp ERR! node-gyp -v v5.0.3</span><br><span class="line">gyp ERR! not ok</span><br></pre></td></tr></table></figure></p><p>在查询错误，终于<a href="https://juejin.im/post/6844904058076020743" target="_blank" rel="noopener">https://juejin.im/post/6844904058076020743</a>上找到了解决方案。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>尝试用如下命令进行修复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure></li></ol><p>复制代码系统提示如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates</span><br></pre></td></tr></table></figure></p><p>复制代码而事实上并没有所谓的”Software Update”可以更新</p><ol start="2"><li>正确姿势<br>一筹莫展之际，找到如下解决方案：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf $(xcode-select -print-path)</span><br><span class="line">$ xcode-select --install</span><br></pre></td></tr></table></figure></li></ol><p>终于安装成功了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新版本antd pro后台项目的demo搭建使用&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/5c5c2d0fc119&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="antd" scheme="https://qdhaiqiang.github.io/categories/antd/"/>
    
    
      <category term="antd" scheme="https://qdhaiqiang.github.io/tags/antd/"/>
    
  </entry>
  
  <entry>
    <title>微信配置本地公众号开发环境</title>
    <link href="https://qdhaiqiang.github.io/2020/08/06/%E5%BE%AE%E4%BF%A1%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://qdhaiqiang.github.io/2020/08/06/微信配置本地公众号开发环境/</id>
    <published>2020-08-06T15:31:27.000Z</published>
    <updated>2020-10-02T14:40:16.648Z</updated>
    
    <content type="html"><![CDATA[<p>配置微信公众号的本地开发环境<br><a href="https://www.jianshu.com/p/05a58682cbac" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h2 id="第一步：申请微信测试号"><a href="#第一步：申请微信测试号" class="headerlink" title="第一步：申请微信测试号"></a>第一步：申请微信测试号</h2><p><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index</a></p><p> <img src="https://upload-images.jianshu.io/upload_images/4109786-56a468432203bf0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="长图"></p><h2 id="第二步：在申请的测试号上配置回调域名等"><a href="#第二步：在申请的测试号上配置回调域名等" class="headerlink" title="第二步：在申请的测试号上配置回调域名等"></a>第二步：在申请的测试号上配置回调域名等</h2><p><img src="https://upload-images.jianshu.io/upload_images/4109786-ab666f8bdcd1a626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="第三步：核心"><a href="#第三步：核心" class="headerlink" title="第三步：核心"></a>第三步：核心</h2><p>在上面的<code>| 网页帐号 | [网页授权获取用户基本信息]&quot;网页授权获取用户基本信息&quot;</code>后点击【修改】,增加本地ip，注意</p><blockquote><p>一定带着端口号</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/4109786-3e2ccf3d2fe6b4bb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="image.png"></p><h2 id="第四步：微信开发者工具访问地址"><a href="#第四步：微信开发者工具访问地址" class="headerlink" title="第四步：微信开发者工具访问地址"></a>第四步：微信开发者工具访问地址</h2><p>redirect_uri要<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">在这儿</a>进行URL编码，然后用微信开发者工具打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx6d8c0247f15f96df&amp;redirect_uri=http%3a%2f%2f192.168.0.110%3a8000%2fweixin-redirect&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-eed37b103db621f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ul><li>redirect_uri 参数错误</li></ul><ol><li>微信测试号上没有配置授权回调域名</li><li>配置的授权回调页面域名跟请求时带着的参数不一样</li><li>本地开发有端口，配置的回调域名没有带着端口</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;配置微信公众号的本地开发环境&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/05a58682cbac&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="微信" scheme="https://qdhaiqiang.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>【转】Clojure 引用java文件 lein javac 报ClassNotFoundException</title>
    <link href="https://qdhaiqiang.github.io/2020/07/23/%E3%80%90%E8%BD%AC%E3%80%91Clojure%20%E5%BC%95%E7%94%A8java%E6%96%87%E4%BB%B6%20lein%20javac%20%E6%8A%A5ClassNotFoundException/"/>
    <id>https://qdhaiqiang.github.io/2020/07/23/【转】Clojure 引用java文件 lein javac 报ClassNotFoundException/</id>
    <published>2020-07-23T15:31:27.000Z</published>
    <updated>2020-10-02T14:40:16.647Z</updated>
    
    <content type="html"><![CDATA[<p>在luminus web的clojure模板里直接使用java文件的正确姿势。<br><a href="https://www.jianshu.com/p/80e3fcb4267e" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>经过两次才彻底解决的一个问题，把同事总计的在自己的小本子上转存一下。<a href="[http://blog.3vyd.com/blog/posts-output/2020-07-04-Clojure-Java-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E9%94%99%E8%AF%AF/](http://blog.3vyd.com/blog/posts-output/2020-07-04-Clojure-Java-%E6%96%87%E4%BB%B6%E7%BC%96%E8%BE%91%E9%94%99%E8%AF%AF/">猛戳此处</a><br>)进入我司blog系统。</p><p>在Clojure中使用Luminus进行Web开发时，如果有自定义Java文件，在<strong>开发环境</strong>中编译（<code>lein javac</code>）时，会出现<code>ClassNotFoundException</code>错误。</p><p>产生原因：在开发环境下，<code>env-&gt;dev-&gt;clj-&gt;user.clj</code>文件会自动加载，并且是在Java文件编译前执行。<code>user.clj</code>文件会引用<code>core</code>下的<code>start-app</code>，<code>core.clj</code>文件又会引用<code>handler</code>，如果在<code>handler</code>的引用文件中引用了自定义Java类时，就会出现<code>ClassNotFoundException</code>错误。</p><p>解决方法一：修改<code>user.clj</code>文件名</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 1. 将 user.clj 文件名修改为 hctest.clj</span></span><br><span class="line"><span class="comment">;; 2. 修改 hctest.clj 文件命名空间</span></span><br><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> hctest)</span><br><span class="line"><span class="comment">;; 3. 修改 project.clj 文件下的 :project/dev -&gt; :repl-options -&gt; :init-ns 值</span></span><br><span class="line">&#123;<span class="symbol">:project/dev</span></span><br><span class="line"> &#123;<span class="symbol">:repl-options</span></span><br><span class="line">  &#123;<span class="symbol">:init-ns</span> hctest&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>解决方法二：移动<code>user.clj</code>文件</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;; 可选 --&gt; 1. 修改 project.clj 下的 :profiles -&gt; :uberjar -&gt; :prep-tasks，在开始添加 "javac"</span></span><br><span class="line">&#123;<span class="symbol">:profiles</span></span><br><span class="line"> &#123;<span class="symbol">:uberjar</span> </span><br><span class="line">  &#123;<span class="symbol">:prep-tasks</span> [<span class="string">"javac"</span> <span class="string">"compile"</span>]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">;; 2. 将 env-&gt;clj-&gt;user.clj 文件移到到指定文件夹下，比如 env-&gt;clj-&gt;empty-&gt; user.clj，并修改命名空间为 empty.user</span></span><br><span class="line">(<span class="name"><span class="builtin-name">ns</span></span> empty.user)</span><br><span class="line"><span class="comment">;; 3. 修改 project.clj 下的 :project/dev -&gt; :repl-options -&gt; :init-ns 值</span></span><br><span class="line">&#123;<span class="symbol">:project/dev</span></span><br><span class="line"> &#123;<span class="symbol">:repl-options</span></span><br><span class="line">  &#123;<span class="symbol">:init-ns</span> empty.user&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://github.com/luminus-framework/luminus-template/issues/319" target="_blank" rel="noopener">https://github.com/luminus-framework/luminus-template/issues/319</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在luminus web的clojure模板里直接使用java文件的正确姿势。&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/80e3fcb4267e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="https://qdhaiqiang.github.io/categories/clojure/"/>
    
    
      <category term="clojure" scheme="https://qdhaiqiang.github.io/tags/clojure/"/>
    
  </entry>
  
  <entry>
    <title>postgressql数据库+postgrest服务搭建</title>
    <link href="https://qdhaiqiang.github.io/2020/06/21/postgressql%E6%95%B0%E6%8D%AE%E5%BA%93+postgrest%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/"/>
    <id>https://qdhaiqiang.github.io/2020/06/21/postgressql数据库+postgrest服务搭建/</id>
    <published>2020-06-21T15:15:11.000Z</published>
    <updated>2020-07-19T01:15:01.863Z</updated>
    
    <content type="html"><![CDATA[<p>在linux上搭建postgresql和postgrest服务<br><a href="https://www.jianshu.com/p/a71fa1207042" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>环境：ubuntu</p><h2 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h2><p>postgresql是又一款开源的关系数据库，经常有人拿来跟mysql进行对比，比如<a href="https://www.zhihu.com/question/20010554" target="_blank" rel="noopener">PostgreSQL 与 MySQL 相比，优势何在？</a>，上网搜了下，还真不少。本人了解太少，不做评论，老板要求用用咱就用，又可以学东西了（又有坑要踩了），学无止境…。</p><h2 id="postgresSql"><a href="#postgresSql" class="headerlink" title="postgresSql"></a>postgresSql</h2><h4 id="1-安装服务"><a href="#1-安装服务" class="headerlink" title="1.安装服务"></a>1.安装服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install postgresql postgresql-contrib</span><br></pre></td></tr></table></figure><h4 id="2-进入服务"><a href="#2-进入服务" class="headerlink" title="2.进入服务"></a>2.进入服务</h4><p>上一步安装完成后，执行如下命令启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service postgresql status</span><br><span class="line">service postgresql start</span><br></pre></td></tr></table></figure></p><p>默认情况下，PostgreSQL 会创建一个拥有所权限的特殊用户 postgres。要实际使用 PostgreSQL，你必须先登录该账户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su postgres</span><br></pre></td></tr></table></figure></p><p>你的提示符会更改为类似于以下的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres@ubuntu-VirtualBox:/home/ubuntu$</span><br></pre></td></tr></table></figure></p><p>现在，使用 psql 来启动 PostgreSQL Shell：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure></p><p>你应该会看到如下提示符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgress=#</span><br></pre></td></tr></table></figure></p><p>要查看现有的所有表，输入如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure></p><p>你可以输入 \q 以退出，输入 \? 获取帮助。其他更多命令参考：<a href="https://blog.csdn.net/ifucking/article/details/80005241" target="_blank" rel="noopener">PostgreSQL命令行常用命令psql</a></p><h4 id="3-修改postgres数据库用户的密码"><a href="#3-修改postgres数据库用户的密码" class="headerlink" title="3.修改postgres数据库用户的密码"></a>3.修改postgres数据库用户的密码</h4><p>  1) 打开客户端工具（psql）<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres psql  (或者分两步： sudo -u postgres -i; psql)</span><br></pre></td></tr></table></figure></p><p>其中，<code>sudo -u postgres</code>是使用postgres 用户登录的意思</p><p>PostgreSQL数据默认会创建一个postgres的数据库用户作为数据库的管理员，密码是随机的，创建用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=#</span><br></pre></td></tr></table></figure></p><p><code>postgres=#</code>为PostgreSQL下的命令提示符，–注意最后的分号；</p><p>   2) 退出PostgreSQL psql客户端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres=# \q</span><br></pre></td></tr></table></figure></p><ol start="4"><li>修改ubuntu操作系统的postgres用户的密码（密码要与数据库用户postgres的密码相同）</li></ol><ul><li><p>切换到root用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure></li><li><p>删除PostgreSQL用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd -d postgres</span><br></pre></td></tr></table></figure></li></ul><p>passwd -d 是清空指定用户密码的意思</p><ul><li>设置PostgreSQL系统用户的密码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u postgres passwd</span><br></pre></td></tr></table></figure></li></ul><p>按照提示，输入两次新密码</p><p>输入新的 UNIX 密码</p><p>重新输入新的 UNIX 密码</p><p>passwd：已成功更新密码</p><ol start="5"><li>修改PostgresSQL数据库配置实现远程访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/postgresql/9.5/main/postgresql.conf</span><br></pre></td></tr></table></figure></li></ol><p>监听任何地址访问，修改连接权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#listen_addresses = &apos;localhost&apos; 改为 listen_addresses = &apos;*&apos; (uncomment it)</span><br></pre></td></tr></table></figure></p><p>启用密码验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#password_encryption = on 改为 password_encryption = on (uncomment it)</span><br><span class="line">vi /etc/postgresql/9.6/main/pg_hba.conf</span><br></pre></td></tr></table></figure></p><p> 在文档末尾加上以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host all all 0.0.0.0 0.0.0.0 md5</span><br></pre></td></tr></table></figure></p><p>创建用户、数据库，授权<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">postgres=# CREATE USER training WITH CREATEROLE PASSWORD &apos;training_plat&apos;;</span><br><span class="line">postgres=# CREATE DATABASE traindb OWNER lizy;</span><br><span class="line">postgres=# GRANT ALL PRIVILEGES ON DATABASE traindb to lizy;</span><br></pre></td></tr></table></figure></p><p>postgresql的教程，目前刚上手，推荐：</p><h2 id="postgrest服务"><a href="#postgrest服务" class="headerlink" title="postgrest服务"></a>postgrest服务</h2><p>使用源码下载安装的方式</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># download from https://github.com/PostgREST/postgrest/releases/latest</span><br><span class="line"># 下载后进行解压</span><br><span class="line">curl https://github.com/PostgREST/postgrest/releases/download/v7.0.1/postgrest-v7.0.1-linux-x64-static.tar.xz</span><br><span class="line">tar xfJ postgrest-v7.0.1-linux-x64-static.tar.xz</span><br></pre></td></tr></table></figure><p>解压文件只有一个名为<code>postgrest</code>的可执行脚本。</p><h4 id="2-运行postgrest服务"><a href="#2-运行postgrest服务" class="headerlink" title="2.运行postgrest服务"></a>2.运行postgrest服务</h4><p>运行postgrest是需要指定一个conf文件，文件名可以随意，比如<code>tutorial.conf</code>,内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db-uri = &quot;postgres://training:training_plat@localhost:5432/traindb&quot;</span><br><span class="line">db-schema = &quot;testapp_db, basic_auth,global_info&quot;</span><br><span class="line">db-anon-role = &quot;training&quot;</span><br><span class="line">jwt-secret = &quot;MqQx7uwtxH3JjphNvRzgeQMkNjDt5JzfpqWwNHrQ13c=&quot;</span><br><span class="line">log_statement = &quot;all&quot;</span><br><span class="line">server-port = 3032</span><br></pre></td></tr></table></figure></p><p>如果不指定<code>server-port</code>,则默认的端口是3000。<br>有了配置文件后在解压后的目录执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./postgrest tutorial.conf</span><br></pre></td></tr></table></figure></p><p>推荐：总是在解压目录执行可执行脚本，写路径还是麻烦了些，可以将此脚本加入环境变量<code>/usr/local/bin</code>下，这样任意目录都可以执行该命令。</p><h2 id="一个简单用来启动postgrest的脚本"><a href="#一个简单用来启动postgrest的脚本" class="headerlink" title="一个简单用来启动postgrest的脚本"></a>一个简单用来启动postgrest的脚本</h2><p>作用：修改了数据库以后，需要重启postgrest服务，接口才能生效，在jenkins上可以执行脚本重启，脚本内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#获取第1个参数，conf文件，路径+文件名</span><br><span class="line">#获取第2个参数，postgrest服务的log目录</span><br><span class="line">config_file=$1</span><br><span class="line">log_dir=$2</span><br><span class="line"></span><br><span class="line">echo &quot;================== server restart start=======================&quot;</span><br><span class="line">pid=`ps -aux | grep $&#123;config_file&#125; | grep -v bash |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">if [ -n &quot;$&#123;pid&#125;&quot; ]</span><br><span class="line">then</span><br><span class="line">#!kill -9 强制终止</span><br><span class="line">   echo &quot;kill -9 的pid:&quot; $pid</span><br><span class="line">   kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">nohup postgrest $&#123;config_file&#125; &gt; $&#123;log_dir&#125;nohup.log 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">echo &quot;================== server restart end =======================&quot;</span><br></pre></td></tr></table></figure></p><p>顺便，推荐一款mac的数据库连接客户端<code>Dbeaver</code>尤其是看postgresql的表关联关系还是很不错的。<br><img src="https://upload-images.jianshu.io/upload_images/4109786-626ca2075400acf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ER图"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/tanql/p/10444512.html" target="_blank" rel="noopener">Install Postgresql on Ubuntu</a><br><a href="http://postgrest.org" target="_blank" rel="noopener">PostgREST官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在linux上搭建postgresql和postgrest服务&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/a71fa1207042&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://qdhaiqiang.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="postgrest" scheme="https://qdhaiqiang.github.io/tags/postgrest/"/>
    
      <category term="postgresql" scheme="https://qdhaiqiang.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>emacs的cider-debug-defun-point</title>
    <link href="https://qdhaiqiang.github.io/2020/06/08/emacs%E7%9A%84cider-debug-defun-point/"/>
    <id>https://qdhaiqiang.github.io/2020/06/08/emacs的cider-debug-defun-point/</id>
    <published>2020-06-08T15:03:45.000Z</published>
    <updated>2020-07-19T01:15:01.831Z</updated>
    
    <content type="html"><![CDATA[<p>用emacs工具debug后端的clj代码</p><p><a href="https://www.jianshu.com/p/36a065d7d46c" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>演示代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">;; 1. Call M-x cider-debug-init-connectiong(only needed once),</span><br><span class="line">;; 2. Call M-x cider-debug-defun-at-ponit with point inside this defn.</span><br><span class="line">;; 3. Run the function, and using key word</span><br><span class="line">;; 4. link:https://docs.cider.mx/cider/debugging/debugger.html</span><br><span class="line">(defn foo [n]</span><br><span class="line">  (map (partial * 2)</span><br><span class="line">       (filter even?</span><br><span class="line">               (range 0 n))))</span><br><span class="line"></span><br><span class="line">;; break out when reaching a condition</span><br><span class="line">(defn foo2 []</span><br><span class="line">  (dotimes [i 10]</span><br><span class="line">    #dbg ^&#123;:break/when (= i 7)&#125;</span><br><span class="line">    (prn i)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(defn eval-msg [&#123;:keys [inspect] :as msg&#125;]</span><br><span class="line">  (if inspect</span><br><span class="line">    #break (clojure.inspector/inspect msg)</span><br><span class="line">    msg))</span><br></pre></td></tr></table></figure></p><p>进入debug<br><code>M-x cider-debug-defun-at-point</code></p><p>常见的操作：</p><p>j   Inject a value into running code</p><p>e   <code>C-c M-:</code>  表达式求值</p><p>enlighten模式：查看最后一次表达式的值<br><code>M-x cider-enlighten-mode</code><br><code>C-M-x 或者 C-x C-e</code> 开始执行。 <code>C-c C-k</code>取消操作。<br><code>M-x cider-enlighten-mode</code>关闭enlighten模式<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> foo2 [x]</span><br><span class="line">  (<span class="name"><span class="builtin-name">let</span></span> [y (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> x)]</span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span> x y)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> bar [x]</span><br><span class="line">  (<span class="name"><span class="builtin-name">dotimes</span></span> [i x]</span><br><span class="line">    (<span class="name">foo2</span> i)))</span><br><span class="line"></span><br><span class="line">(<span class="name">bar</span> <span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.cider.mx/cider/debugging/debugger.html" target="_blank" rel="noopener">debugger</a><br><a href="https://docs.cider.mx/cider/debugging/enlighten.html" target="_blank" rel="noopener">Enlighten</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用emacs工具debug后端的clj代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/36a065d7d46c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="https://qdhaiqiang.github.io/categories/emacs/"/>
    
    
      <category term="emacs" scheme="https://qdhaiqiang.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>emacs里的小游戏</title>
    <link href="https://qdhaiqiang.github.io/2020/04/24/emacs%E9%87%8C%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>https://qdhaiqiang.github.io/2020/04/24/emacs里的小游戏/</id>
    <published>2020-04-24T14:55:45.000Z</published>
    <updated>2020-07-19T01:15:01.831Z</updated>
    
    <content type="html"><![CDATA[<p>物料的时候玩玩emacs里的小游戏放松放松</p><p><a href="https://www.jianshu.com/p/1cf86d794219" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>引用：<a href="https://linux.cn/article-11949-1-rel.html" target="_blank" rel="noopener">https://linux.cn/article-11949-1-rel.html</a></p><h2 id="1-消消乐"><a href="#1-消消乐" class="headerlink" title="1. 消消乐"></a>1. 消消乐</h2><p><code>M-x bubble</code> 游戏相当简单：你必须用尽可能少移动清除尽可能多的“泡泡”。当你移除气泡时，其他气泡会掉落并粘在一起。这是一款有趣的游戏，此外如果你使用 Emacs 的图形用户界面，它还支持图像显示。而且它还支持鼠标。</p><p>你可以通过调用 <code>M-x bubbles-set-game-&lt;difficulty&gt;</code>来设置难度，其中<code>&lt;difficulty&gt;</code>可以是这些之一：easy、medium、difficult、hard 或 userdefined。此外，你可以使用：<code>M-x custom-group bubbles</code>来更改图形、网格大小和颜色。</p><p>由于它即简单又有趣，这是 Emacs 中我最喜欢的游戏之一。</p><h2 id="2-五子棋"><a href="#2-五子棋" class="headerlink" title="2. 五子棋"></a>2. 五子棋</h2><p>你必须将 5 个方块连成一条线，井字棋风格。你可以运行 <code>M-x gomoku</code>来与 Emacs 对抗。游戏还支持鼠标，非常方便。你也可以自定义 gomoku 组来调整网格的大小。</p><h2 id="3-乒乓、贪食蛇、俄罗斯方块"><a href="#3-乒乓、贪食蛇、俄罗斯方块" class="headerlink" title="3. 乒乓、贪食蛇、俄罗斯方块"></a>3. 乒乓、贪食蛇、俄罗斯方块</h2><p>这些经典游戏都是使用 Emacs 包 gamegrid 实现的，这是一个用于构建网格游戏（如俄罗斯方块和贪吃蛇）的通用框架。gamegrid 包的伟大之处在于它同时兼容图形化和终端 Emacs：如果你在 GUI 中运行 Emacs，你会得到精美的图形；如果你没有，你看到简单的 ASCII 艺术。</p><p>你可以通过输入 M-x pong、M-x snake、M-x tetris 来运行这些游戏。</p><h2 id="4-Zone"><a href="#4-Zone" class="headerlink" title="4. Zone"></a>4. Zone</h2><p>我的另一个最爱。这是一个屏幕保护程序——或者更确切地说，是一系列的屏幕保护程序。</p><p>输入 <code>M-x zone</code>，然后看看屏幕上发生了什么！</p><p>你可以通过运行 <code>M-x zone-when-idle</code>（或从 elisp 调用它）来配置屏幕保护程序的空闲时间，时间以秒为单位。你也可以通过 <code>M-x zone-leave-me-alone</code>来关闭它。</p><p>如果在你的同事看着的时候启动它，你的同事肯定会抓狂的。go</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;物料的时候玩玩emacs里的小游戏放松放松&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/1cf86d794219&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="emacs" scheme="https://qdhaiqiang.github.io/categories/emacs/"/>
    
    
      <category term="emacs" scheme="https://qdhaiqiang.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>Linux shell 监控应用存活并发邮件通知</title>
    <link href="https://qdhaiqiang.github.io/2020/04/18/Linux%20shell%20%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8%E5%AD%98%E6%B4%BB%E5%B9%B6%E5%8F%91%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/"/>
    <id>https://qdhaiqiang.github.io/2020/04/18/Linux shell 监控应用存活并发邮件通知/</id>
    <published>2020-04-18T14:41:04.000Z</published>
    <updated>2020-07-19T01:15:01.823Z</updated>
    
    <content type="html"><![CDATA[<p>curl需要监控的接口，将结果发送邮件通知，也可以判断REST接口的返回数据内容。<br><a href="https://www.jianshu.com/p/4b025d8dc12a" target="_blank" rel="noopener">简书地址</a></p><a id="more"></a><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li><p>每天执行三次，分别为：7:10，12:10，16:10</p></li><li><p>7:10执行日期参数为T-1，12:10,16:10执行日期参数为T(T是指当天)</p></li><li><p>每次执行判断一下接口返回的数据量，以邮件形式发送给相关人员</p></li></ol><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var1=$1</span><br><span class="line">webUrls=(</span><br><span class="line">&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_for_leader&amp;params=period_date::$&#123;var1&#125;&quot;</span><br><span class="line">&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_m_wl_gongm_result_info_view&amp;params=period_date::$&#123;var1&#125;&quot;</span><br><span class="line">&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_m_wl_lianq_result_info_view&amp;params=period_date::$&#123;var1&#125;&quot;</span><br><span class="line">&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_for_soldier_mall_score&amp;params=period_date::$&#123;var1&#125;&quot;</span><br><span class="line">)</span><br><span class="line">declare -a name</span><br><span class="line"></span><br><span class="line">#使用curl命令检查http服务器的状态</span><br><span class="line">#-m设置curl不管访问成功或失败，最大消耗的时间为5秒，5秒连接服未响应则视为无法连接</span><br><span class="line">#-s设置静默连接，不显示连接时的连接速度、时间消耗等信息</span><br><span class="line">#-o将curl下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)</span><br><span class="line">#-w设置curl命令需要显示的内容%&#123;http_code&#125;，指定curl返回服务器的状态码</span><br><span class="line"># 如果不是看结果，是看http状态的话使用如下函数</span><br><span class="line">check_http()&#123;</span><br><span class="line">    status_code=$(curl -m 5 -s-o /dev/null -w %&#123;http_code&#125; https://www.baidu.com)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function httpRequest()</span><br><span class="line">&#123;</span><br><span class="line">    echo  &quot;日期参数：$&#123;var1&#125;&quot;</span><br><span class="line">    for ((i=0; i&lt;$&#123;#webUrls[@]&#125;; i++))</span><br><span class="line">    do</span><br><span class="line">        echo &quot;顺序：$&#123;i&#125;，请求：$&#123;webUrls[i]&#125;&quot;</span><br><span class="line">        res=$(curl -m 5 -s $&#123;webUrls[i]&#125; | jq &apos;.data&apos; | jq &apos;length&apos;)</span><br><span class="line">        name[$i]=$res</span><br><span class="line">        echo $&#123;name[$i]&#125; #为方便检查，加了打印</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">httpRequest &quot;$@&quot;</span><br><span class="line"></span><br><span class="line">emailContent=&quot;链接数据接口：$&#123;name[0]&#125;      中心数据接口：$&#123;name[1]&#125;      链群数据接口：$&#123;name[2]&#125;     评分数据接口：$&#123;name[3]&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;$&#123;emailContent&#125;&quot; | mail -s &apos;4个指标接口当前的数据通知&apos; marvin.ma@redcreation.net,zhangsan@163.com</span><br></pre></td></tr></table></figure><h2 id="收到的邮件："><a href="#收到的邮件：" class="headerlink" title="收到的邮件："></a>收到的邮件：</h2><p><img src="https://upload-images.jianshu.io/upload_images/4109786-dcac1c6ef2dffc2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="email"></p><h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><h4 id="获取当前时间："><a href="#获取当前时间：" class="headerlink" title="获取当前时间："></a>获取当前时间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">time=$(date &quot;+%Y%m%d-%H%M%S&quot;)</span><br><span class="line">time2=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">echo &quot;$&#123;time&#125;&quot;</span><br></pre></td></tr></table></figure><p>昨天:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $(date +&quot;%Y-%m-%d&quot; -d &quot;-1day&quot;)</span><br></pre></td></tr></table></figure></p><p>其他参考：<a href="https://blog.csdn.net/liu0808/article/details/79899139" target="_blank" rel="noopener">shell date 获取昨天日期</a></p><h4 id="curl-到json内容"><a href="#curl-到json内容" class="headerlink" title="curl 到json内容:"></a>curl 到json内容:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#使用curl命令检查http服务器的状态</span><br><span class="line">#-m设置curl不管访问成功或失败，最大消耗的时间为5秒，5秒连接服未响应则视为无法连接</span><br><span class="line">#-s设置静默连接，不显示连接时的连接速度、时间消耗等信息</span><br><span class="line">#-o将curl下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)</span><br><span class="line">#-w设置curl命令需要显示的内容%&#123;http_code&#125;，指定curl返回服务器的状态码</span><br><span class="line">res=$(curl  -s &quot;https://www.baidu.com&quot;)</span><br><span class="line">echo  $res</span><br></pre></td></tr></table></figure><h4 id="接收参数："><a href="#接收参数：" class="headerlink" title="接收参数："></a>接收参数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 必须写绝对路径，不然crontab不执行，因为找不到路径</span><br><span class="line">log=/opt/jc/task.log</span><br><span class="line">var1=$1</span><br><span class="line">test()</span><br><span class="line">&#123;</span><br><span class="line">    time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">    echo &quot;$&#123;time&#125; do something, set var1 = $&#123;var1&#125;&quot; &gt;&gt; $log</span><br><span class="line">&#125;</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>测试定时任务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/crontab</span><br></pre></td></tr></table></figure></p><p>添加一行，每2分钟执行一次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/2 * * * * root /opt/jc/curl.sh hahaha</span><br></pre></td></tr></table></figure></p><p>为了完成这个需求，我的crontab的内容如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10 7 * * * root /opt/jc/curl.sh $(date +&quot;%Y%m%d&quot; -d &quot;-1day&quot;)</span><br><span class="line">10 12,16 * * * root /opt/jc/curl.sh $(date &quot;+%Y%m%d&quot;)</span><br></pre></td></tr></table></figure></p><h4 id="shell处理json数据工具—–jq"><a href="#shell处理json数据工具—–jq" class="headerlink" title="shell处理json数据工具—–jq"></a>shell处理json数据工具—–jq</h4><p>获取接口返回的数据中<code>data</code>的值数组大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res=$(curl -m 5 -s $&#123;webUrls[i]&#125;  |  jq &apos;.data&apos;  |  jq &apos;length&apos;)</span><br></pre></td></tr></table></figure></p><p>其他jq的用法参考：<a href="https://www.cnblogs.com/lurenjiashuo/p/bash-json-jq.html" target="_blank" rel="noopener">shell脚本处理JSON数据工具jq</a></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>脚本不执行不知道为啥<br>方案：先用如下命令看看crontab服务是否正常，不正常的进行安装。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure></li></ol><p>没有安装的话先安装。</p><ol start="2"><li><p>定时任务出错<br>出错的情况会有邮件通知，位置在<code>/var/mail/root</code>中，可以查看脚本执行失败的原因</p></li><li><p>Shell 脚本时显示declare not found的问题<br>ubuntu系统将默认的bash换成了dash，需要手动替换下，参考下面的参考链接<a href="http://blog.sina.com.cn/s/blog_7cb1c50e0100rapz.html" target="_blank" rel="noopener">Shell 脚本时显示declare not found的问题</a>配置。</p></li></ol><h4 id="shell里发送邮件"><a href="#shell里发送邮件" class="headerlink" title="shell里发送邮件"></a>shell里发送邮件</h4><p>使用<a href="https://www.cnblogs.com/kerrycode/p/6432579.html" target="_blank" rel="noopener">sendmail</a>工具发送邮件。<br><a href="http://blog.sina.com.cn/s/blog_7cb1c50e0100rapz.html" target="_blank" rel="noopener">Shell 脚本时显示declare not found的问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;curl需要监控的接口，将结果发送邮件通知，也可以判断REST接口的返回数据内容。&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/4b025d8dc12a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://qdhaiqiang.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="https://qdhaiqiang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 配置sendmail发送邮件</title>
    <link href="https://qdhaiqiang.github.io/2020/04/18/Linux%20%E9%85%8D%E7%BD%AEsendmail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <id>https://qdhaiqiang.github.io/2020/04/18/Linux 配置sendmail发送邮件/</id>
    <published>2020-04-18T13:41:04.000Z</published>
    <updated>2020-07-19T01:15:01.824Z</updated>
    
    <content type="html"><![CDATA[<p>linux服务器配置sendmail在命令行里方便发送邮件<br><a href="https://www.jianshu.com/p/e663f29f0eca" target="_blank" rel="noopener">简书地址</a></p><a id="more"></a><h2 id="Ubuntu-安装工具"><a href="#Ubuntu-安装工具" class="headerlink" title="Ubuntu 安装工具"></a>Ubuntu 安装工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install heirloom-mailx</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p><code>vim /etc/s-nail.rc</code>在文件最后加入如下配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from=&quot;mailtest@3vyd.com&quot;</span><br><span class="line">set smtp=&quot;smtp.exmail.qq.com&quot;</span><br><span class="line">set smtp-auth-user=&quot;mailtest@3vyd.com&quot;</span><br><span class="line">set smtp-auth-password=&quot;xxxx&quot;</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure></p><h2 id="测试邮件"><a href="#测试邮件" class="headerlink" title="测试邮件"></a>测试邮件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;测试的邮件内容&quot; | s-nail  -s &quot;测试的邮件主题&quot; marvin.ma@redcreation.net</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4109786-015b0f1f48e87cc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mail"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>root@hk-server:~# Could not connect: Operation now in progress<br>“/root/dead.letter” 8/209<br>… message not sent</p><p>这里注意！因为是阿里云服务器，可能是25端口被封，得改用465端口，所以配置内容那里要注意将smtp配置加上端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set smtp=smtp.exmail.qq.com:465</span><br></pre></td></tr></table></figure></p><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><ol><li><p>install Mailx </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y mailx</span><br></pre></td></tr></table></figure></li><li><p>Config SMTP Params</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/mail.rc</span><br><span class="line"></span><br><span class="line"># Add Gmail SMTP</span><br><span class="line">set from=yiilib.com_t@gmail.com  #send from mail address</span><br><span class="line">set smtp=smtp.gmail.com    #SMTP server domain</span><br><span class="line">set smtp-auth-user=yiilib.com_t  #send account</span><br><span class="line">set smtp-auth-password=mailBoxPassword  #account password</span><br><span class="line">set smtp-auth=login     #auth way</span><br></pre></td></tr></table></figure><ol start="3"><li>send test <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;mail body&quot; |　mail marvin.ma@redcreation.net -s &quot;test mail subject&quot; -a /root/backup/yiilib.com_tmp.sql</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="两种常用配置"><a href="#两种常用配置" class="headerlink" title="两种常用配置"></a>两种常用配置</h2><ul><li><p>腾讯企业邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from=&quot;mailtest@3vyd.com&quot;</span><br><span class="line">set smtp=&quot;smtp.exmail.qq.com&quot;</span><br><span class="line">set smtp-auth-user=&quot;mailtest@3vyd.com&quot;</span><br><span class="line">set smtp-auth-password=&quot;xxxx&quot;</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure></li><li><p>163网易邮箱(密码是指客户端授权密码)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set from=&quot;chuangkehui@163.com&quot;</span><br><span class="line">set smtp=&quot;smtp.163.com&quot;</span><br><span class="line">set smtp-auth-user=&quot;chuangkehui@163.com&quot;</span><br><span class="line">set smtp-auth-password=&quot;xxxx&quot;</span><br><span class="line">set smtp-auth=login</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/MissEel/article/details/79588808" target="_blank" rel="noopener">Linux发邮件-ubuntu和centos</a><br><a href="http://yiilib.com/en/topic/731/Centos+use+Mailx+send+SMTP+Mail" target="_blank" rel="noopener">http://yiilib.com/en/topic/731/Centos+use+Mailx+send+SMTP+Mail</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;linux服务器配置sendmail在命令行里方便发送邮件&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/e663f29f0eca&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://qdhaiqiang.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="https://qdhaiqiang.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>clojureScript页面国际化(i18n多语言)实现</title>
    <link href="https://qdhaiqiang.github.io/2020/04/04/clojurescript-i18n/"/>
    <id>https://qdhaiqiang.github.io/2020/04/04/clojurescript-i18n/</id>
    <published>2020-04-04T14:04:45.000Z</published>
    <updated>2020-07-19T01:15:01.827Z</updated>
    
    <content type="html"><![CDATA[<p>clojurescript 国际化核心代码</p><p><a href="https://www.jianshu.com/p/97867dd37db5" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h2 id="先看下效果（证明是实践过的）"><a href="#先看下效果（证明是实践过的）" class="headerlink" title="先看下效果（证明是实践过的）"></a>先看下效果（证明是实践过的）</h2><p><img src="https://upload-images.jianshu.io/upload_images/4109786-42a6328eeea9558b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="中文"><br><img src="https://upload-images.jianshu.io/upload_images/4109786-976728fceac93658.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="英文"></p><p>国际化方案比较多，页面上的国际化一般比较简单，麻烦的还是数据库的数据的国际化。<br>本地cljs里的国际化采用前端db的atom控制当前语言，所有可见的翻译分为页面部分和数据库部分，最后在通过接口拿到数据库的翻译后跟页面的进行merge。</p><h2 id="方案原理"><a href="#方案原理" class="headerlink" title="方案原理"></a>方案原理</h2><ol><li>将当前用户设定的语言保存在本地localstorage，并且保存在页面db中。</li><li>切换语言时，每个需要国际化的文案前增加<code>i18n-str</code>函数调用，实时获取目标文案对应的i18n文案。</li><li>浏览器被刷新时从localstorage中回复已经选择的语音类型。</li><li>可视的多语言文案，分为页面部分数数据库部分，在前端进行merge处理，保存成一个。</li></ol><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前端使用re-frame、kee-frame、shadow-cljs、antd框架</p><h2 id="当前方案核心代码"><a href="#当前方案核心代码" class="headerlink" title="当前方案核心代码"></a>当前方案核心代码</h2><p>分页页面部分，切换语言部分（保存db，保存localstorage，防止手动刷新页面时数据还原）。</p><h4 id="1-页面切换代码"><a href="#1-页面切换代码" class="headerlink" title="1. 页面切换代码"></a>1. 页面切换代码</h4><p>继续使用antd组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(def lang (rf/subscribe [:i18n/lang]))</span><br><span class="line"></span><br><span class="line">;; 语言</span><br><span class="line">(def ^:private language</span><br><span class="line">  &#123;:zh-cn &quot;中文&quot;</span><br><span class="line">   :en-us &quot;English&quot;</span><br><span class="line">   :ja-jp &quot;日本語&quot;&#125;)</span><br><span class="line"></span><br><span class="line">;; 语言菜单</span><br><span class="line">(defn- dropdown-menu []</span><br><span class="line">  [:&gt; ant/Menu</span><br><span class="line">   &#123;:className &quot;menu&quot;</span><br><span class="line">    :onClick   (fn [menu]</span><br><span class="line">                 (let [value (js-&gt;clj menu :keywordize-keys true)]</span><br><span class="line">                   (rf/dispatch [:i18n/change-lang (keyword (:key value))])))&#125;</span><br><span class="line">   [:&gt; MenuItem &#123;:key &quot;zh-cn&quot; :title &quot;中文&quot;&#125;</span><br><span class="line">    [:span (i18n-str &quot;中文&quot;)]]</span><br><span class="line">   [:&gt; MenuItem &#123;:key &quot;en-us&quot; :title &quot;英文&quot;&#125;</span><br><span class="line">    [:span (i18n-str &quot;英文&quot;)]]</span><br><span class="line">   [:&gt; MenuItem &#123;:key &quot;ja-jp&quot; :title &quot;日文&quot;&#125;</span><br><span class="line">    [:span (i18n-str &quot;日文&quot;)]]])</span><br><span class="line"></span><br><span class="line">[:div &#123;:style &#123;:margin-left 20</span><br><span class="line">                         :font-size   &quot;14px&quot;</span><br><span class="line">                         :font-family &quot;PingFangSC-Medium,PingFang SC&quot;</span><br><span class="line">                         :font-weight 500</span><br><span class="line">                         :color       &quot;rgba(0,0,0,1)&quot;&#125;&#125;</span><br><span class="line">           [:&gt; ant/Dropdown &#123;:overlay (reagent.core/as-element [dropdown-menu])&#125;</span><br><span class="line">            [:span (i18n-str (or (get language @lang) &quot;中文&quot;))]]]</span><br></pre></td></tr></table></figure></p><h4 id="2-切换和保存当前语言"><a href="#2-切换和保存当前语言" class="headerlink" title="2. 切换和保存当前语言"></a>2. 切换和保存当前语言</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">;;通过key设置和获取localstorage里的数据</span><br><span class="line">(defn set-local-storage [key value]</span><br><span class="line">  (.setItem js/localStorage key value))</span><br><span class="line"></span><br><span class="line">(defn get-local-storage [key]</span><br><span class="line">  (.getItem js/localStorage key))</span><br><span class="line"></span><br><span class="line">;;只要路由变化，就要触发获取当前语言的逻辑</span><br><span class="line">(kf/reg-controller</span><br><span class="line"> :lang-controller</span><br><span class="line"> &#123;:params (constantly true)</span><br><span class="line">  :start  [::set-lang-by-local]&#125;)</span><br><span class="line"></span><br><span class="line">;;如果页面刷新的话从localstorage里获取</span><br><span class="line">(kf/reg-event-fx</span><br><span class="line"> ::set-lang-by-local</span><br><span class="line"> (fn [_ [_ _]]</span><br><span class="line">   (when-not @(rf/subscribe [:i18n/lang])</span><br><span class="line">     (if (get-current-lang)</span><br><span class="line">       (rf/dispatch [:i18n/change-lang (get-current-lang)])</span><br><span class="line">       (rf/dispatch [:i18n/change-lang :zh-cn])))</span><br><span class="line">   &#123;:dispatch [:request/get &#123;:url (:get-lang-map mutil-lang)</span><br><span class="line">                             :params &#123;:hostname (.. js/window -location -hostname)&#125;   ;;此处根据当前域名获取该域名的对应租户的多语言文案</span><br><span class="line">                             :callback-event ::save-db-lang&#125;]&#125;))</span><br><span class="line"></span><br><span class="line">(kf/reg-event-fx</span><br><span class="line"> ::save-db-lang</span><br><span class="line"> (fn [&#123;:keys [db]&#125; [db-lang-map]]</span><br><span class="line">   &#123;:db (-&gt; db</span><br><span class="line">            (assoc-in [:db-lang-map] db-lang-map))&#125;))</span><br><span class="line"></span><br><span class="line">(rf/reg-event-fx</span><br><span class="line"> :i18n/change-lang</span><br><span class="line"> (fn [&#123;:keys [db]&#125; [_ data]]</span><br><span class="line">   (js/console.log &quot;切换语言到：&quot; data)</span><br><span class="line">   (set-current-lang data)</span><br><span class="line">   &#123;:db (assoc-in db [:global :lang] data)&#125;))</span><br><span class="line"></span><br><span class="line">(rf/reg-sub</span><br><span class="line"> :i18n/lang</span><br><span class="line"> (fn [data]</span><br><span class="line">   (get-in data [:global :lang])))</span><br><span class="line"></span><br><span class="line">(rf/reg-sub</span><br><span class="line"> :i18n/db-lang-map</span><br><span class="line"> (fn [db]</span><br><span class="line">   (get-in db [:db-lang-map])))</span><br><span class="line"></span><br><span class="line">(defn- merge-lang-map</span><br><span class="line">  &quot;对页面上的文案和db里的文案进行一次merge&quot;</span><br><span class="line">  [page-lang-map db-lang-map]</span><br><span class="line">  (if db-lang-map</span><br><span class="line">    (merge page-lang-map</span><br><span class="line">           (#(zipmap (map :key %) (map :value %))</span><br><span class="line">            db-lang-map))</span><br><span class="line">    page-lang-map))</span><br><span class="line"></span><br><span class="line">;;返回当前语言的关键字</span><br><span class="line">(defn i18n-str [s]</span><br><span class="line">  (let [lang (rf/subscribe [:i18n/lang])</span><br><span class="line">        db-lang-map (rf/subscribe [:i18n/db-lang-map])]</span><br><span class="line">    (get-in (merge-lang-map language-map @db-lang-map)</span><br><span class="line">            [s @lang] s)))</span><br></pre></td></tr></table></figure><h4 id="3-页面文案翻译"><a href="#3-页面文案翻译" class="headerlink" title="3. 页面文案翻译"></a>3. 页面文案翻译</h4><p>上面代码里用到的<code>language-map</code>类似如下结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(def language-map</span><br><span class="line">  &#123; &quot;切换语言&quot;                      &#123;:en-us &quot;Switch language&quot;  :ja-jp &quot;言語を切り替え&quot;&#125;</span><br><span class="line">     &quot;中文&quot;                        &#123;:en-us &quot;Chinese&quot;           :ja-jp &quot;中国語&quot;&#125;</span><br><span class="line">     &quot;英文&quot;                        &#123;:en-us &quot;English&quot;           :ja-jp &quot;英語&quot;&#125;</span><br><span class="line">     &quot;日文&quot;                        &#123;:en-us &quot;Japanese&quot;          :ja-jp &quot;日本語&quot;&#125;</span><br><span class="line">     &quot;体验门店&quot;                     &#123;:en-us &quot;Experience Store&quot;  :ja-jp &quot;店を体験する&quot;&#125;</span><br><span class="line">     &quot;返回首页&quot;                     &#123;:en-us &quot;Back to Home&quot;      :ja-jp &quot;ホームを戻す&quot;&#125;&#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></p><h4 id="4-数据库返回的文案"><a href="#4-数据库返回的文案" class="headerlink" title="4. 数据库返回的文案"></a>4. 数据库返回的文案</h4><p>即上文中<code>:i18n/db-lang-map</code>这个event从db中获取的对象，从接口获取的存在前端db中数据结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;双排六粒&quot;,</span><br><span class="line">            &quot;value&quot;: &#123;</span><br><span class="line">                &quot;en-us&quot;: &quot;Double six buttons&quot;,</span><br><span class="line">                &quot;ja-jp&quot;: &quot;w6*3&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;下摆(成衣)&quot;,</span><br><span class="line">            &quot;value&quot;: &#123;</span><br><span class="line">                &quot;en-us&quot;: &quot;Bottom(garment)&quot;,</span><br><span class="line">                &quot;ja-jp&quot;: &quot;蹴廻し（上がり寸法）&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;key&quot;: &quot;平钉纽扣&quot;,</span><br><span class="line">            &quot;value&quot;: &#123;</span><br><span class="line">                &quot;en-us&quot;: &quot;Level buttons&quot;,</span><br><span class="line">                &quot;ja-jp&quot;: &quot;平钉钮釦&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>这样将数据库中的和页面上的进行merge后使用。<br>当然，我们产品是因为对多个租户，各租户的翻译不同，所以页面上没有往DB里重复保存，采用merge两端的形式。简单的可以只在数据库维护。</p><h2 id="改进点"><a href="#改进点" class="headerlink" title="改进点"></a>改进点</h2><ul><li>页面文案便于扩展新语言<br>当前三个语言，在数据库采用一行保存一个形式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+----------------+--------------+------+-----+-------------------+-------+</span><br><span class="line">| Field          | Type         | Null | Key | Default           | Extra |</span><br><span class="line">+----------------+--------------+------+-----+-------------------+-------+</span><br><span class="line">| id             | varchar(40)  | NO   | PRI | NULL              |       |</span><br><span class="line">| company_id     | varchar(40)  | NO   |     | NULL              |       |</span><br><span class="line">| lang_key       | varchar(255) | NO   |     | NULL              |       |</span><br><span class="line">| lang_value     | varchar(255) | NO   |     | NULL              |       |</span><br><span class="line">| lang           | varchar(40)  | NO   |     | NULL              |       |</span><br><span class="line">| delete_flag    | varchar(4)   | YES  |     | 0                 |       |</span><br><span class="line">| create_time    | timestamp    | NO   |     | CURRENT_TIMESTAMP |       |</span><br><span class="line">| create_user_id | varchar(40)  | YES  |     | NULL              |       |</span><br><span class="line">| update_time    | timestamp    | NO   |     | CURRENT_TIMESTAMP |       |</span><br><span class="line">| update_user_id | varchar(40)  | YES  |     | NULL              |       |</span><br><span class="line">+----------------+--------------+------+-----+-------------------+-------+</span><br></pre></td></tr></table></figure></li></ul><p>一个文案的翻译数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO  `t_store_language`(`id`, `company_id`, `lang_key`, `lang_value`, `lang`, `delete_flag`, `create_time`, `create_user_id`, `update_time`, `update_user_id`) VALUES (&apos;611348&apos;, &apos;61&apos;, &apos;常规(9个工作日)&apos;, &apos;Regular (9 working days)&apos;, &apos;en-us&apos;, &apos;0&apos;, &apos;2020-04-01 00:00:00&apos;, NULL, &apos;2020-04-01 00:00:00&apos;, NULL);</span><br><span class="line">INSERT INTO  `t_store_language`(`id`, `company_id`, `lang_key`, `lang_value`, `lang`, `delete_flag`, `create_time`, `create_user_id`, `update_time`, `update_user_id`) VALUES (&apos;611359&apos;, &apos;61&apos;, &apos;常规(9个工作日)&apos;, &apos;普通（９稼動日）&apos;, &apos;ja-jp&apos;, &apos;0&apos;, &apos;2020-04-01 00:00:00&apos;, NULL, &apos;2020-04-01 00:00:00&apos;, NULL);</span><br></pre></td></tr></table></figure></p><p>这个是便于扩展的，而页面上就不是那样的，如同上面的<code>language-map</code>，如果再增加一门比如韩语的话，需要逐项在原来的数据上修改，不利于扩展。</p><blockquote><p>改进方向：<br>一个语音一个map，最后将多个语言的文案进行合并</p></blockquote><p>仓促下没有考虑太多，如有更好的方案，欢迎交流。QQ：389709260</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;clojurescript 国际化核心代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/97867dd37db5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="clojurescript" scheme="https://qdhaiqiang.github.io/categories/clojurescript/"/>
    
    
      <category term="clojurescript" scheme="https://qdhaiqiang.github.io/tags/clojurescript/"/>
    
  </entry>
  
  <entry>
    <title>shadow-cljs编译的clojurescript-antd项目使用less实现运行时主题切换</title>
    <link href="https://qdhaiqiang.github.io/2020/03/21/clojurescript-antd%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8less%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2/"/>
    <id>https://qdhaiqiang.github.io/2020/03/21/clojurescript-antd项目使用less实现运行时主题切换/</id>
    <published>2020-03-20T16:51:27.000Z</published>
    <updated>2020-07-19T01:15:01.826Z</updated>
    
    <content type="html"><![CDATA[<p>项目页面上动态切换主题</p><p><a href="https://www.jianshu.com/p/4db2e4214ed8" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>最近公司的电商定制平台的项目继上了国际化，又要搞多主题了，又让我练了一把手。</p><p>实现了，也就那么回事，但是动手之前的犹豫和无思路也着实让我慌了一逼。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>看了antd官网上<a href="https://ant.design/docs/react/customize-theme-cn" target="_blank" rel="noopener">定制主题</a>上的主题介绍，也看了其他博主的一些手段，比较多的还是打包时将某些主题色打包到代码里，运行起来就是这个主题色。</p><p>一来这个方式是静态的，通过打包之前去设置一些config，不是最终想要的，二来里面的介绍要么就是借助webpack，要么就是用Umi。巧的是我们项目用clojurescript开发，只用了antd的component，并没有用到<a href="https://pro.ant.design/docs/getting-started-cn/" target="_blank" rel="noopener">Antd Pro后台</a>的所有功能，所以官网的介绍对我来说就是个大大的“0️⃣”</p><p>运行时切换主题，显然只在编译时打包less是不够的的，必须是走在浏览器端动态修改less的方案。</p><p>有了目的就好办了，对于我一个前端菜鸡来说，分析到这一步已经涨知识了。</p><p>下面进入解决方案正题。</p><h2 id="美丽的插件"><a href="#美丽的插件" class="headerlink" title="美丽的插件"></a>美丽的插件</h2><p>首先迎面走来的，昂首挺胸的美女就是<a href="https://www.npmjs.com/package/antd-theme-generator" target="_blank" rel="noopener">antd-theme-generator</a>，非常感谢，帮大忙了。</p><p>核心代码就补贴了，作者太懒，不论是<a href="https://github.com/mzohaibqc/antd-theme-generator#readme" target="_blank" rel="noopener">github</a>还是npm库里，这个插件的<code>README.md</code>文件写的有点马虎。</p><p>参考了简书上<a href="https://www.jianshu.com/p/b635211658c8" target="_blank" rel="noopener">antd在线换肤定制功能</a>这位仁兄的介绍，我的代码做了如下改动</p><h4 id="1-增加依赖"><a href="#1-增加依赖" class="headerlink" title="1. 增加依赖"></a>1. 增加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i antd-theme-generator --save</span><br></pre></td></tr></table></figure><h4 id="2-引入文件，根据我的项目修改文件内容"><a href="#2-引入文件，根据我的项目修改文件内容" class="headerlink" title="2. 引入文件，根据我的项目修改文件内容"></a>2. 引入文件，根据我的项目修改文件内容</h4><p>在<code>resources/public</code>下新建less目录，创建2个文件</p><ul><li><p>main.less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//内容为空就行，防止生成color.less报错</span><br></pre></td></tr></table></figure></li><li><p>vars.less</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;~antd/lib/style/themes/default.less&quot;; //引入antd的变量文件，实现变量的覆盖</span><br><span class="line">@primary-color: #800019;</span><br><span class="line">@link-color: #800019;</span><br><span class="line">@btn-primary-bg:#800019;</span><br><span class="line"></span><br><span class="line">//color.less中加入css原生变量：--PC</span><br><span class="line">:root &#123; </span><br><span class="line">    --PC: @primary-color;   </span><br><span class="line">    --BPB: @btn-primary-bg;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>项目<strong>根目录</strong>新建<code>color.js</code>文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const &#123; generateTheme, getLessVars &#125; = require(&apos;antd-theme-generator&apos;);</span><br><span class="line"></span><br><span class="line">const options = &#123;</span><br><span class="line">  stylesDir: path.join(__dirname, &apos;./resources/public/less&apos;),    //对应具体位置</span><br><span class="line">  antDir: path.join(__dirname, &apos;./node_modules/antd&apos;), //对应具体位置</span><br><span class="line">  varFile: path.join(__dirname, &apos;./resources/public/less/vars.less&apos;), //对应具体位置</span><br><span class="line">  mainLessFile: path.join(__dirname, &apos;./resources/public/less/main.less&apos;), //对应具体位置</span><br><span class="line">  themeVariables: [</span><br><span class="line">    &apos;@primary-color&apos;,</span><br><span class="line">    &apos;@secondary-color&apos;,</span><br><span class="line">    &apos;@text-color&apos;,</span><br><span class="line">    &apos;@text-color-secondary&apos;,</span><br><span class="line">    &apos;@heading-color&apos;,</span><br><span class="line">    &apos;@layout-body-background&apos;,</span><br><span class="line">    &apos;@btn-primary-bg&apos;,</span><br><span class="line">    &apos;@layout-header-background&apos;</span><br><span class="line">  ],</span><br><span class="line">  indexFileName: &apos;index.html&apos;,</span><br><span class="line">  outputFilePath: path.join(__dirname, &apos;./resources/public/css/color.less&apos;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">generateTheme(options).then(less =&gt; &#123;</span><br><span class="line">  console.log(&apos;Theme generated successfully&apos;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(error =&gt; &#123;</span><br><span class="line">    console.log(&apos;Error&apos;, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>修改index.html文件，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;cn&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;门店定制系统&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">    &lt;meta content=&quot;width=device-width, initial-scale=1.0&quot; name=&quot;viewport&quot; /&gt;</span><br><span class="line">    &lt;link href=&quot;/css/antd.min.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;/css/redantd.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;/css/color.less&quot; type=&quot;text/css&quot;  rel=&quot;stylesheet/less&quot;/&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--这个代码不能放在最后--&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.less = &#123;</span><br><span class="line">    async: false,</span><br><span class="line">    env: &apos;production&apos;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Our JavaScript will modify the DOM inside this element --&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;!-- All our ClojureScript gets compiled into this file --&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  document.write(&quot;&lt;script type=&apos;text/javascript&apos; src=&apos;/js/app.js?v=&quot;+Math.random()+&quot;&apos; type=&apos;text/javascript&apos;&gt;&lt;\/script&gt;&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>package.json</code>，命令前面增加<code>node color</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;node color &amp;&amp; shadow-cljs server&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;node color &amp;&amp; shadow-cljs release app&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-切换测试"><a href="#3-切换测试" class="headerlink" title="3. 切换测试"></a>3. 切换测试</h4><p>项目运行后页面比如页面有个Button的type=”primary”那它默认是红色的。</p><p>在浏览器的控制台执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">window.less.modifyVars(</span><br><span class="line">    &#123;</span><br><span class="line">        &apos;@primary-color&apos;: &apos;#722ed1&apos;,</span><br><span class="line">        &apos;@link-color&apos;: &apos;#722ed1&apos;,</span><br><span class="line">        &apos;@btn-primary-bg&apos;: &apos;#722ed1&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>会发现颜色变成了酱紫色。</p><p>到此，实现逻辑修改完。</p><h2 id="在clojurescript中实现动态切换"><a href="#在clojurescript中实现动态切换" class="headerlink" title="在clojurescript中实现动态切换"></a>在clojurescript中实现动态切换</h2><h4 id="页面view部分"><a href="#页面view部分" class="headerlink" title="页面view部分"></a>页面view部分</h4><p>在页面布局文件的右上角加了个切换下拉按钮。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(def ^:private theme-map</span><br><span class="line">  &#123;:#800019 &quot;喜庆红&quot;</span><br><span class="line">   :#4880FF &quot;拂晓蓝&quot;&#125;)</span><br><span class="line"></span><br><span class="line">;; 主题菜单</span><br><span class="line">(defn dropdown-theme []</span><br><span class="line">  [:&gt; ant/Menu</span><br><span class="line">   &#123;:className &quot;menu&quot;</span><br><span class="line">    :onClick   (fn [menu]</span><br><span class="line">                 (let [value (js-&gt;clj menu :keywordize-keys true)]</span><br><span class="line">                   (rf/dispatch [:theme/generate-theme (:key value)])))&#125;</span><br><span class="line">   [:&gt; MenuItem &#123;:key &quot;#800019&quot; :title (:#800019 theme-map)</span><br><span class="line">                 :style &#123;:background &quot;#800019&quot;</span><br><span class="line">                         :color &quot;white&quot;</span><br><span class="line">                         :border-radius &quot;5px&quot;&#125;&#125;</span><br><span class="line">    [:span (i18n-str (:#800019 theme-map))]]</span><br><span class="line">   [:&gt; MenuItem &#123;:key &quot;#4880FF&quot; :title (:#4880FF theme-map)</span><br><span class="line">                 :style &#123;:background &quot;#4880FF&quot;</span><br><span class="line">                         :color &quot;white&quot;</span><br><span class="line">                         :border-radius &quot;5px&quot;&#125;&#125;</span><br><span class="line">    [:span (i18n-str (:#4880FF theme-map))]]])</span><br><span class="line"></span><br><span class="line">;;在某个view组件里写入内容</span><br><span class="line">[:div &#123;:style &#123;:margin-left 20</span><br><span class="line">                         :font-size   &quot;14px&quot;</span><br><span class="line">                         :font-family &quot;PingFangSC-Medium,PingFang SC&quot;</span><br><span class="line">                         :font-weight 500</span><br><span class="line">                         :color       &quot;rgba(0,0,0,1)&quot;&#125;&#125;</span><br><span class="line">           [:&gt; ant/Dropdown &#123;:overlay (reagent.core/as-element [dropdown-theme])&#125;</span><br><span class="line">            [:div &#123;:className &quot;theme-setting&quot;&#125;</span><br><span class="line">             [:span (i18n-str &quot;颜色&quot;)]]]]</span><br></pre></td></tr></table></figure></p><h4 id="切换事件"><a href="#切换事件" class="headerlink" title="切换事件"></a>切换事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(ns store-pc.common.theme</span><br><span class="line">  (:require</span><br><span class="line">   [re-frame.core :as rf]</span><br><span class="line">   [kee-frame.core :as kf]</span><br><span class="line">   [store-pc.common.storage :as storage]))</span><br><span class="line"></span><br><span class="line">(defn- gen-theme [color]</span><br><span class="line">  #js&#123;</span><br><span class="line">      &quot;@primary-color&quot;   color</span><br><span class="line">      &quot;@link-color&quot;      color</span><br><span class="line">      &quot;@btn-primary-bg&quot;  color</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">(kf/reg-controller</span><br><span class="line"> :theme-controller</span><br><span class="line"> &#123;:params (constantly true)</span><br><span class="line">  :start  [::set-theme-by-local]&#125;)</span><br><span class="line"></span><br><span class="line">;;如果页面刷新的话从localstorage里获取</span><br><span class="line">(kf/reg-event-fx</span><br><span class="line"> ::set-theme-by-local</span><br><span class="line"> (fn [_ [_ _]]</span><br><span class="line">   (when-not @(rf/subscribe [:theme/now-theme])</span><br><span class="line">     (rf/dispatch [:theme/generate-theme (storage/get-current-theme)])</span><br><span class="line">     )))</span><br><span class="line"></span><br><span class="line">(rf/reg-event-fx</span><br><span class="line"> :theme/generate-theme</span><br><span class="line"> (fn [&#123;:keys [db]&#125; [_ color]]</span><br><span class="line">   (js/console.log &quot;设置主题为:&quot; (gen-theme color))</span><br><span class="line">   (.modifyVars (.-less js/window ) (gen-theme color))</span><br><span class="line">   (storage/set-current-theme color)</span><br><span class="line">   &#123;:db (assoc-in db [:global :theme] color)&#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(rf/reg-sub</span><br><span class="line"> :theme/now-theme</span><br><span class="line"> (fn [db]</span><br><span class="line">   (get-in db [:global :theme])))</span><br></pre></td></tr></table></figure><p>里面唯一用到的框架外的就是存储localstore和从localstore里拿值，核心代码就两个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(defn get-local-storage [key]</span><br><span class="line">  (.getItem js/localStorage key))</span><br><span class="line"></span><br><span class="line">(defn set-local-storage [key value]</span><br><span class="line">  (.setItem js/localStorage key value))</span><br></pre></td></tr></table></figure></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><blockquote><ol><li><code>index.html</code>里一开始引入的less.min.js版本太高，得降成2.7.2才不会报错，否则modifyVars有错误提示</li><li>js里的window.less.modifyVars(obj)这句调用在cljs里不会写</li><li>上面一条解决了，但是modifyVars的参数不会传，后来查到原来是用 <code>#js</code>定义的就是原始js的意思。</li></ol></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/b635211658c8" target="_blank" rel="noopener">antd在线换肤定制功能</a><br><a href="https://github.com/bestRenekton/demos/tree/master/themeChanger" target="_blank" rel="noopener">themeChanger demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目页面上动态切换主题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/4db2e4214ed8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/categories/cljs/"/>
    
    
      <category term="antd" scheme="https://qdhaiqiang.github.io/tags/antd/"/>
    
      <category term="cljs" scheme="https://qdhaiqiang.github.io/tags/cljs/"/>
    
  </entry>
  
  <entry>
    <title>海尔创客汇笔记----安卓上adb的使用笔记</title>
    <link href="https://qdhaiqiang.github.io/2020/03/01/%E6%B5%B7%E5%B0%94%E5%88%9B%E5%AE%A2%E6%B1%87%E7%AC%94%E8%AE%B0----%E5%AE%89%E5%8D%93%E4%B8%8Aadb%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://qdhaiqiang.github.io/2020/03/01/海尔创客汇笔记----安卓上adb的使用笔记/</id>
    <published>2020-02-29T16:16:43.000Z</published>
    <updated>2020-07-19T01:15:01.867Z</updated>
    
    <content type="html"><![CDATA[<p>使用adb命令抓包等<br><a href="https://www.jianshu.com/p/6151dca25217" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v time tag 1&gt;F:\log.txt</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/4109786-f179ebadb5281f78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-370102821030f1e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-830c203315238b98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片3.png"></p><blockquote><p>adb logcat -b main -v time&gt;app.log  打印应用程序的log<br>adb logcat -b radio -v time&gt; radio.log 打印射频相关的log，SIM STK也会在里面，modem相关的ATcommand等，当然跟QXDM差的很远了。<br>adb logcat -b events -v time  打印系统事件的日志，比如触屏事件。。。<br>//android log的抓取<br>adb logcat<br>//kernel log的抓取<br>adb shell cat /proc/kmsg<br>//log 信息的保存<br>mkdir  /data/anr<br>logcat *：V &gt; /data/anr/android<br>demsg &gt;/data/anr/kernel<br>//按ctrl+c结束log输出<br>adb pull /data/anr ./log/</p></blockquote><h3 id="手动彻底卸载app"><a href="#手动彻底卸载app" class="headerlink" title="手动彻底卸载app"></a>手动彻底卸载app</h3><p>D:\Git\pingtai\Portal&gt;adb uninstall com.haierchuangkeapp<br>Failure [DELETE_FAILED_INTERNAL_ERROR]<br>在本地用管理员身份运行cmd命令行工具，使用adb shell进入手机应用命令行，<br>根据提示 ：<br>D:\Git\pingtai\Portal&gt;adb shell<br>M1E:/ $ cd /data/local/tmp/<br>M1E:/data/local/tmp $ ll<br>/system/bin/sh: ll: not found<br>127|M1E:/data/local/tmp $ ls<br>com.haierchuangkeapp com.haierchuangkeapp-build-id.txt<br>M1E:/data/local/tmp $ rm -rf co<br>com.haierchuangkeapp                    com.haierchuangkeapp-build-id.txt<br>M1E:/data/local/tmp $ rm -rf com.haierchuangkeapp*<br>M1E:/data/local/tmp $</p><p>然后手动推送安装包，然后安装：<br>D:\Git\pingtai\Portal\android&gt;adb push D:\Git\pingtai\Portal\android\app\build\outputs\apk\debug\app-debug.apk /data/local/tmp/com.haierchuangkeapp<br>D:\Git\pingtai\Portal\android\app\build\outputs\apk\debug\app-debug.apk: 1 file pushed. 13.0 MB/s (64737700 bytes in 4.756s)</p><p>D:\Git\pingtai\Portal\android&gt;<br>D:\Git\pingtai\Portal\android&gt;<br>D:\Git\pingtai\Portal\android&gt;adb shell pm install -t -r “/data/local/tmp/com.haierchuangkeapp”<br>Success</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用adb命令抓包等&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/6151dca25217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="大前端" scheme="https://qdhaiqiang.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react-native" scheme="https://qdhaiqiang.github.io/tags/react-native/"/>
    
      <category term="android" scheme="https://qdhaiqiang.github.io/tags/android/"/>
    
      <category term="package" scheme="https://qdhaiqiang.github.io/tags/package/"/>
    
  </entry>
  
  <entry>
    <title>excel操作备忘</title>
    <link href="https://qdhaiqiang.github.io/2020/02/29/excel%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98/"/>
    <id>https://qdhaiqiang.github.io/2020/02/29/excel操作备忘/</id>
    <published>2020-02-29T15:40:30.000Z</published>
    <updated>2020-10-04T13:40:40.361Z</updated>
    
    <content type="html"><![CDATA[<p>把excel里的数据进行某些处理，记录一下，以后好复制粘贴</p><p><a href="https://www.jianshu.com/p/f6005d906ce5" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><h2 id="1-excel数字按长度补0，并转换成文本"><a href="#1-excel数字按长度补0，并转换成文本" class="headerlink" title="1. excel数字按长度补0，并转换成文本"></a>1. excel数字按长度补0，并转换成文本</h2><p>在海尔这段时间从数据库里导出来的员工工号8位数，因为有些0开头的，导出到excel里后前面的0就没有了。<br>可以新建一列，然后以导出的那列为基础数据用公式处理成想要的，补齐8位，前面补0。公式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=REPT(0,8-LEN(A2))&amp;A2</span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/4109786-197172968d66e595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="补齐8位，前面补0"></p><h2 id="2-excel里将数据拼接成语句"><a href="#2-excel里将数据拼接成语句" class="headerlink" title="2. excel里将数据拼接成语句"></a>2. excel里将数据拼接成语句</h2><p>有时候需要将excel里的数据，拼接成想要的json或者sql。</p><ul><li>拼接成json或者map<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=CONCATENATE(&quot;&quot;&quot;&quot;,B2,&quot;&quot;&quot;&quot;,&quot;    &#123;:en-us &quot;&quot;&quot;,C2,&quot;&quot;&quot;  :ja-jp &quot;&quot;&quot;,D2,&quot;&quot;&quot;&#125;&quot;)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4109786-50e2d8fa74ff2115.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拼接成json"><br>目标内容比如：<code>&quot;优裁精选&quot;    {:en-us &quot;Retail&quot;  :ja-jp &quot;優れた裁断&quot;}</code></p><ul><li>根据表头，拼接成sql的insert语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=CONCATENATE(&quot;INSERT INTO t_sys_user (`&quot;&amp;A$1&amp;&quot;`, `&quot;&amp;B$1&amp;&quot;`, `&quot;&amp;C$1&amp;&quot;`, `&quot;&amp;D$1&amp;&quot;`, `&quot;&amp;E$1&amp;&quot;`, `&quot;&amp;F$1&amp;&quot;`) VALUES (&apos;&quot;&amp;A3&amp;&quot;&apos;,&quot;&amp;&quot; &apos;&quot;&amp;B3&amp;&quot;&apos;,&apos;&quot;&amp;C3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;D3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;E3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;F3&amp;&quot;&apos;);&quot;)</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/4109786-2f3ea5a88e2c05f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="拼接成sql"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把excel里的数据进行某些处理，记录一下，以后好复制粘贴&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/f6005d906ce5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具使用" scheme="https://qdhaiqiang.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="excel" scheme="https://qdhaiqiang.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>leiningen clojure web项目使用本地jar包</title>
    <link href="https://qdhaiqiang.github.io/2020/02/06/clojure%20lein%20use%20local%20jar/"/>
    <id>https://qdhaiqiang.github.io/2020/02/06/clojure lein use local jar/</id>
    <published>2020-02-06T04:41:14.000Z</published>
    <updated>2020-07-19T01:15:01.825Z</updated>
    
    <content type="html"><![CDATA[<p>leiningen clojure web项目使用本地jar简易方式</p><p><a href="https://www.jianshu.com/p/6642d446f087" target="_blank" rel="noopener">简书地址</a><br><a id="more"></a></p><p>用<a href="https://luminusweb.com/" target="_blank" rel="noopener">luminusweb</a>模板创建的clojure web服务端项目如何使用本地的jar。</p><h3 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h3><p>将jar放在项目里的某个目录下，推荐resources下，然后在<code>project.clj</code>里加入引用即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:resource-paths [&quot;resources/jars/sheet-clone-0.1.jar&quot;]</span><br></pre></td></tr></table></figure></p><p>使用的时候像跟调用其他第三方的java sdk一样使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(:import (com.alibaba.excel EasyExcel #_ExcelWriter)</span><br><span class="line">           [com.hczt.sheetclone.utils CloneExcelByPoi]</span><br><span class="line">           [org.apache.poi.xssf.usermodel XSSFWorkbook])</span><br></pre></td></tr></table></figure></p><h3 id="其他方案："><a href="#其他方案：" class="headerlink" title="其他方案："></a>其他方案：</h3><p>参考Paul大神的文章<a href="https://www.pgrs.net/2011/10/30/using-local-jars-with-leiningen/" target="_blank" rel="noopener">using-local-jars-with-leiningen</a><br>贴一下主要内容。<br>Create a directory in the project.<br>mkdir maven_repository.<br>Add local jars to this repository.<br>For example, this command adds the jaad-0.8.3.jar file to the maven repository.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=jaad-0.8.3.jar -DartifactId=jaad -Dversion=0.8.3 -DgroupId=jaad -Dpackaging=jar -DlocalRepositoryPath=maven_repository</span><br></pre></td></tr></table></figure></p><p>Add the following to project.clj<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:repositories &#123;&quot;local&quot; ~(str (.toURI (java.io.File. &quot;maven_repository&quot;)))&#125;</span><br></pre></td></tr></table></figure></p><p>Now a regular lein deps should work<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lein deps</span><br><span class="line">Downloading: jaad/jaad/0.8.3/jaad-0.8.3.pom from local</span><br><span class="line">Transferring 0K from local</span><br><span class="line">[WARNING] *** CHECKSUM FAILED - Error retrieving checksum file for jaad/jaad/0.8.3/jaad-0.8.3.pom - IGNORING</span><br></pre></td></tr></table></figure></p><p>The warning can be ignored, since the jar will be checked into the project and not downloaded from the internet.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;leiningen clojure web项目使用本地jar简易方式&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/6642d446f087&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书地址&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="clojure" scheme="https://qdhaiqiang.github.io/categories/clojure/"/>
    
    
      <category term="clojure" scheme="https://qdhaiqiang.github.io/tags/clojure/"/>
    
      <category term="leiningen" scheme="https://qdhaiqiang.github.io/tags/leiningen/"/>
    
  </entry>
  
</feed>
