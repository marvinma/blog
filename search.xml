<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[程序猿的MacOS环境(二)]]></title>
    <url>%2F2020%2F10%2F01%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84MacOS%E7%8E%AF%E5%A2%83(%E4%BA%8C)%2F</url>
    <content type="text"><![CDATA[上一篇的补充简书地址 推荐：https://www.jianshu.com/p/2f8b0f0aca93本篇：比较好用的几款日常软件推荐来源：10个macOS免费小工具，能帮你省下一大笔钱 1. iShot截图软件,本人一直用的是非专业版的Xnip，日常截图也基本够用，也能滚屏截图，但是没有延时截图的功能，主要是不是免费的。 替代品iShot我反而觉得更胜一筹。 还支持录屏，重点是录屏还可以直接转成gif，方便至极。 2. 翻译工具Bob除了能选中文字，粘贴文字进行翻译，还可以截图翻译，通过 OCR 识别文字，Bob 可以直接截图翻译，这样突破了文字限制，可以直接翻译图片或者视频中某个画面内容，即便你不需要翻译的时候，也可以将其作为一个 OCR 识别工具使用，直接复制识别后的内容，实测识别准确率很可观。 3. NTFS 读写工具：Paragon NTFS / Tuxera NTFS（100+元）—— NTFS Tool（免费）我想很多刚刚接触 macOS 都会遇到这个麻烦——NTFS 格式硬盘无法读取，此前通过搜索引擎了解到用户量比较大的是 Paragon NTFS 和 Tuxera NTFS 这两款工具，由于代理方不一样，售价也不统一，但也基本都在 100 元以上，出于软件包大小以及 UI 风格，我最终购买了 Paragon NTFS，使用到现在倒也没遇到什么不如意。 在准备这篇文章，又重新了解了一下，新出现了不少价格更低甚至免费的 NTFS 读写工具，其它付费的我就不说了，NTFS Tool 这款免费开源的工具倒是值得推荐。安装完成后，直接在 Finder 中对硬盘中文件进行读写操作。不过 NTFS Tool 对于系统盘的识别上似乎有些不一样，使用上倒也没什么问题。 基本 macOS 上所有的 NTFS 读写工具只是能让系统正常读写 NTFS 格式硬盘，其它所有的文件操作还是在 Finder 中完成，不过这类工具倒是也可以作为外接硬盘的管理作用。 无论是用的哪一款工具，只要能够实现想要的目的，那就够了，NTFS Tool 可能不是最好用的，但作为免费开源工具，这样却也是足够了。 4. ffmpeg视频格式转换、视频转 gif、视频压缩等视频操作的命令行工具。基本现在播放器的软件都使用了该仓库的代码。我平常主要用它压缩视频，例如介绍 utools 章节的视频，原视频 23M，然后通过它压缩 8M，方便快捷。缺点是命令行复杂，需要好好调教，我本人用的较少。 主页地址：github.com/FFmpeg/FFmp… 下载： brew install ffmpeg]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序猿的MacOS环境(一)]]></title>
    <url>%2F2020%2F09%2F29%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84MacOS%E7%8E%AF%E5%A2%83(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[简书地址 每个江湖上的高手都有自己趁手的兵器，你也应该有你自己的那把小李飞刀。小李飞刀这个兵器还真不是突然想到的。 要是问我什么不是方天画戟、青龙偃月刀、丈八蛇矛云云，或者为啥不是独孤求败的利剑、紫薇软剑、玄铁重剑之类的。我就呵呵了，你见过哪个道法高深的神仙，随身手里扛着这么大的兵器，关二哥拉屎时应该不会扛着青龙偃月刀吧。 小李飞刀则不然，随身携带，杀伤力不弱于其他，最重要的其实是小李飞刀是在浪子李寻欢手里，李寻欢此人是一个倾倒天下多情红颜的潇洒浪子，一个重情重义的悲情英雄，一生都被身心的痛苦折磨，却又不轻易显示喜怒哀乐，复杂的内心情感全靠眼神表现。所以计算式小李飞刀只是在百晓生兵器谱上排第三，我还是更喜欢，也许我是不喜欢天机老人的懦弱，和上官金虹的恶霸行为。 有人说，自古没有最厉害的兵器，只有最厉害的人。也是，孤独前辈的第四把剑就是木剑，“四十岁后，草木竹石均可为剑”，何其雄壮，人家有傲视群雄的本事的啊，这境界太高了，没几个能达到的。 我不反对上面的观点，但是顺手的兵器总也是能为平庸的人增添战斗力，要不然那么多人去抢倚天剑、屠龙刀。 废话太多了哈。。。😁 作为一坨程序猿，我想表达的意思是打造自己最趁手，最适合自己工作的工具—-要不换个标题：MacOS系统上常用的软件和插件。 关键词：程序猿、MacOS 所以我要说微信，QQ之类的估计您的揍我了。 先推荐两个资源下载地址： xclient.info爱情守望者 必备应用： git客户端：gitKarken，sourceTree 接口测试工具：postman 笔记工具：为知笔记，印象笔记 IDE：Intellij Idea，VS code，Emcas markdown写作工具：Typora 翻墙客户端：Shadowsocks 手机投屏软件：Vysor，有谷歌浏览器插件 硬盘U盘读写软件：Tuxera Disk Manager ####一些在线工具和网址: 发起在线问卷调查：https://www.wenjuan.com/在线定时任务执行写法工具：http://cron.qqe2.com/国际推荐使用：https://cdnjs.com/下载系统及工具：http://msdn.itellyou.cn优雅高效的免费在线APP原型工具 http://www.xiaopiu.com/showdoc文档工具：https://www.showdoc.cc/web/#/各种java工具：http://www.hutool.cn/在线无损压缩图片：https://squoosh.app/生成短链接：http://www.surl.sinaapp.com/在线工具集合：http://oktools.net在线工具集合2 ：http://www.atoolbox.netmockjs: http://mockjs.com/lisp里json转edn/map：http://pschwarz.bicycle.io/json-to-edn/ 1. shell客户端iterm2截止目前最喜欢的shell客户端，没有之一，之所以加个截止目前，是因为今年用emcas，都说这里面的shell也很赞。 做后端开发，经常要快速进入某一台远端服务器，然后看个log，改个配置啥的，这时候iterm+sshpass就能让你事半功倍了。关于怎么配，此处不再细说。123456wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz tar xvzf sshpass-1.05.tar.gz cd sshpass-1.05./configure make make install [站外图片上传中…(image-aefec1-1572691340926)] 推荐两个网友的杰作，一个安装，一个使用。mac下使用sshpass实现ssh记住密码Mac下，使用sshpass让iTerm2支持ssh登录信息保存 安装sshpass有问题的用户，可以试试12345678910brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rbUpdating Homebrew...Warning: Calling Non-checksummed download of sshpass formula file from an arbitrary URL is deprecated! Use &apos;brew extract&apos; or &apos;brew create&apos; and &apos;brew tap-new&apos; to create a formula file in a tap on GitHub instead.######################################################################## 100.0%==&gt; Downloading http://sourceforge.net/projects/sshpass/files/sshpass/1.06/sshpass-1.06.tar.gz==&gt; Downloading from https://netcologne.dl.sourceforge.net/project/sshpass/sshpass/1.06/sshpass-1.06.tar.gz######################################################################## 100.0%==&gt; ./configure --prefix=/usr/local/Cellar/sshpass/1.06==&gt; make install🍺 /usr/local/Cellar/sshpass/1.06: 9 files, 45.8KB, built in 9 seconds 安装成功。 iterm里另一个不得不用的是Zsh和Oh My Zsh家庭套餐，点到为止，网上一搜一大把，选个自己喜欢的theme用就行了。 iterm2的profiles里执行一个登录的命令1/usr/local/bin/sshpass -f /Users/mahaiqiang/Documents/sshpass/&lt;file_name&gt; ssh -p&lt;port&gt; marvin@ip file_name 只存储这个ip对应的用户登录密码，而且文件没有后缀。 如果没有安装成功sshpass，也可以用iterm的命令行模式，执行一个shell脚本，脚本的内容可能荣幸123456789101112#!/usr/bin/expect -fset user &lt;user-name&gt;set host &lt;ip&gt;set password &lt;password&gt;set port &lt;port&gt;set timeout -1spawn ssh -p $port $user@$hostexpect "*assword:*"send "$password\r"interactexpect eof High起来吧 2020-10-04json_pp，json_pp 我主要是用来格式化 curl 命令行的结果，例如测试某个 restful 接口，返回的 json，在命令行就会自动给你格式化好输出，json_pp 安装：brew install jsonpp 2. Navicat PermiumNavicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、MongoDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、MongoDB Atlas、阿里云、腾讯云和华为云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。 数据库工具在Mac上我比较钟情这款，导入导出都很方便，其他不推荐。不要说不是免费版，我相信你一定有办法免费，而且你还能搞个汉化版。 在Windows我用的最多HeidiSQL，轻量级，非常稳定的数据库客户端。是可惜没有mac版。 3. transmit相同功能的我还用过的filezilla和WinScp，但是从体验和视觉上来说，我更喜欢transmit，简洁直观 4. tinyCal这个小日历可了不得，试图比mac自带的日历小，但是又比mac状态栏上那个还不如没有日历表好。截图如下： 还有农历，看着不错吧，在设置个开机自启，系统自带的可以关闭了。 5. Alfred这个是在去年在海尔一起工作的小唐同学那里看来的，直接抄一下原创：Alfred作为老牌效率神器，网上很多帖子都已经做过介绍，这里说一下Alfred的剪贴板。 [站外图片上传中…(image-2652a3-1572691340926)]Alfred的剪贴板可以保存最近几天位于系统剪贴板的所有内容。因此如果当键入命令时，突然想起来这个命令我昨天好像复制过，那就可以直接调出来，贴进命令行即可。 这款神器可是Best-App排行NO.1的，可见一斑。 使用教程：5分钟上手Mac效率神器Alfred以及Alfred常用操作 6. LICECap 捕捉屏幕生成GIF1brew cask install LICECap 相对应的截图软件推荐xnipapp一款免费的截图软件，还支持滚动截图，离线操作。 7. Recorder it屏幕录制软件，可以在xclient.info上下载到。 8. keycastr 显示快捷键在你想做一个教程时，不管是gif了，还是录屏了，你或许在冥思苦想到底怎么解释我在键盘上按了啥，这回不用解释了，你按了啥有软件帮你显示出来了，简单明了。 1brew cask install keycastr 配合上生成gif搞个小教程简直不要太爽。 9. ssh tunnel再复制小唐同学推荐的一个神器ssh tunnel。 场景：我们需要搭建开发环境，使得本地的web server/api server 能够访问位于云服务器上局域网环境中的数据库，例如百度云提供的数据库服务。这些数据库服务器可以在百度云的机器上直接访问，而不能在公网环境下通过公网ip访问。这个时候可以用百度云的普通server建一个tunnel，从而实现数据访问。在xshell中也有类似功能，中文翻译做：隧道。 界面展示： 如图便是建立了三个tunnel，分别连向了两个关系型数据库服务器和一个redis服务器。举例来说第一条隧道连接，使用时的访问方法，就是直接localhost:13306即可。当然，直接用ssh命令也可解决，但麻烦不是。程序员就应该能偷懒的时候尽可能偷懒，美其名曰：解放和发展生产力~命令行： 1ssh -CfNg -L 16306:postgresql94.rd*****lwr2zr.rds.bj.baidubce.com:3306 root@180.***.***.189 原作者：tangxqa 10. PicGo图床，上传图片后直接将复制复制到了粘贴板，非常方便，尤其要写markdown1brew cask install PicGo 如果常写markdown的话，绝对是个不错的选择，谁还每个github账号，合理使用资源就行了，图片拖进上传区，直接就能返回来个markdown的地址放到粘贴板里了。至于怎么利用github做图床自行google下。 11. Charles抓包工具Charles是一款抓包代理调试工具、类 Fiddler。ios系统手机上有一款抓包神器：stream安卓手机上一般用：Packet Capture，或者抓包精灵 12. 内网穿透工具这个东西不常用，但是如果不知道还有个这么个玩意儿那就有点low了。我用过serveo和ngrok，ngrok相对稳定，但是使用便捷性赶不上什么都不用serveo一句命令的快。我的两个总结：使用serveo一秒钟实现内网穿透使用ngrok一分钟实现内网穿透 13. 为知笔记|印象笔记有时候你会有两台电脑，或者需要用移动端看看曾经报错的一些有效资源，这时候如果没有个云笔记，有点说不过去了，而且这种笔记不管是保存自己的东西，还可以通过google浏览器插件快速收藏网页，将某一篇博客剪切成自己的东西笔记。 [站外图片上传中…(image-7835d8-1572691340926)] 14. Parallels虚拟机神器带你飞~ 15. LogTail 日志监控查看工具前面说到的iterm配合sshpass登录到服务器不是个啥问题了，但是最近用的不管是阿里云和百度云的ECS，在终端连接一会儿后就会自动断开，而且我也不知道咋搞，就算是tail 了，一会儿没有动就自己断开了，非常糟心。 今天终于找到了一款我众里寻他千百度的logtail，我简直爱死他了，查看云服务器日志居然还有这么个玩意儿，简直神器啊，来两张图看看： 有了它服务器上的日志就不需要搭建类似ELK或者EFK环境了。 16. mpv：一个高可配的程序猿专用视频播放器安装：1brew cask install mpv 这是一款一个跨平台、简洁、开源、免费、且性能和功能兼备万能视频播放器。MPV 是一个基于 MPlayer 和 mplayer2 的开源极简全能播放器。支持各种视频格式、音频解码、支持特效字幕（电影动漫的ass特效字幕都没啥问题），不仅支持本地播放，同样支持网络播放。重点是 MPV 具有多系统平台支持、命令行、自定义、GPU 解码、脚本支持等特点…… 看这篇介绍 17 Moom或许有许多人和小编一样，感觉Mac OS在使用时各种都很好用，但是就是对于窗口大小的调整需要用鼠标去拖动大小不满意。 那么有没有一种更为快速的方法，可以让你迅速的最大化、最小化各种窗口，甚至和WIN10系统一样做到左右对半分配两个窗口呢？当然有！只需要在你的Mac上安装Moom这一款小软件即可实现。 Moom是苹果os平台上优秀的窗口管理工具，可以快速修改当前窗口的大小并放置在指定位置，默认情况下拥有五种尺寸可选，单击选项即可更改窗口大小，如最大化，移动到左边、右边等操作，还可以自定义窗口，让用户可以更好的查看mac上的内容。 18. PopClip一款在 Mac 上人尽皆知的小工具，它简单高效，具有强大的拓展功能，PopClip 最基本的功能即用鼠标选中一段文字就可以做复制粘贴的动作，省去了我们平时 Command+C or V 的麻烦。 除此之外，再无拓展支持的情况下，根据鼠标选中的内容，PopClip 还自身支持链接的跳转打开、自带词典的翻译、邮件地址跳转、搜索引擎搜索、单词纠正等功能，但这个工具真正强大之处在于它的拓展功能的使用哦。 小插件 Bartender展开和收缩状态栏 外接2K显示器无法开启hign dpi时的处理 开启教程：https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=11669269&amp;page=1用到的三个软件： 设置完成之后，在外接显示器也可以看到hign dpi的选项： Go2Shell在访达里增加一个打开命令行的快捷入口，快速进入命令行 还可以设置在哪打开 FeHelper一款谷歌浏览器插件，主要是免费的工具集合。 Octotree这又是一款chrome插件，能将github项目在左侧边栏以目录树形结构展示。让你更直观地感受自己或别人的项目。感谢@朋友你的学生卡掉了 同学的推荐 WeChatPlugin macmac微信助手，mac微信助手，功能全新升级，有很多比如消息防撤回、远程控制(已支持语音)、微信多开、第二次登录免认证等等的功能。 推荐工欲善其事，必先利其器-程序员工具推荐正是有了这些神器，让我再也离不开Mac！]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓有线无线投屏神器---scrcpy]]></title>
    <url>%2F2020%2F09%2F28%2F%E5%AE%89%E5%8D%93%E6%9C%89%E7%BA%BF%E6%97%A0%E7%BA%BF%E6%8A%95%E5%B1%8F%E7%A5%9E%E5%99%A8---scrcpy%2F</url>
    <content type="text"><![CDATA[一款最简单，切PC上可以操作移动设备的安卓投屏软件，基于adb实现简书地址 用过sync，用过免费的软件幕享，最后发现哪一款也没有scrcpy好使。 需要两个命令行，adb和scrcpy 安装就不用描述了，能有把手机投到电脑上的想法的人应该都能安装上。 安装上以后就更了不得了1234567891011121314# mahaiqiang @ mahaiqiangs-MacBook-Pro in ~ [8:58:14]$ adb usb* daemon not running; starting now at tcp:5037* daemon started successfullyrestarting in USB mode# mahaiqiang @ mahaiqiangs-MacBook-Pro in ~ [8:59:10]$ scrcpy2020-09-28 08:59:14.880 scrcpy[1865:48805] INFO: scrcpy 1.14 &lt;https://github.com/Genymobile/scrcpy&gt;/usr/local/Cellar/scrcpy/1.14_1/share/scrcpy/scrcpy-server: 1 file pushed. 1.3 MB/s (33142 bytes in 0.025s)[server] INFO: Device: HUAWEI EVA-AL00 (Android 8.0.0)2020-09-28 08:59:16.304 scrcpy[1865:48805] INFO: Created renderer: metal2020-09-28 08:59:16.304 scrcpy[1865:48805] INFO: Renderer: metal2020-09-28 08:59:16.311 scrcpy[1865:48805] INFO: Initial texture: 1080x1920 如果电脑信任了手机,开了USB调试，这时候应该能从电脑上看到手机了，就是这么简单。 强烈推荐scrcpy——Android投屏神器(使用教程) 稍微给自己备份一下，万一以上博客哪天下架了。 使用scrcpy的要求 Android设备至少需要API 21（Android 5.0以上版本）; 确保在您的设备上启用了adb调试; 在某些设备上，您还需要启用其他选项以使用键盘和鼠标控制它。 使用电脑连接手机在Android手机中打开了USB调试后，我们即可在电脑中使用adb进行调试。 我使用的是Windows10系统，以下以Windows为例，MacOS或Linux请点击这里。 程序使用了Java语言，我们需要在电脑中搭建Java运行环境，参考：Windows10 配置 Java 开发环境 首先下载scrcpy，可去releases下载最新版本，目前最新版本为v1.10。 下载地址：https://github.com/Genymobile/scrcpy/releases 打开cmd定位到此目录（在地址栏中输入cmd回车），或者将该目录如D:\Github_Run\scrcpy-win64-v1.10加入到系统环境变量中，程序的使用都在cmd命令行中操作。 使用USB进行连接此方式推荐使用，相对更加流畅。 手机通过USB连接到PC上，首次连接会弹出是否信任该电脑，点击始终信任即可。 运行adb usb查看是否连接成功 12D:\Github_Run\scrcpy-win64-v1.10&gt;adb usbrestarting in USB mode 运行scrcpy即可。 使用无线连接可参考官方文档：Open Source Project - Scrcpy now works wirelessly 此连接方式更加方便快捷，若宽带速率高，使用效果更佳，使用方法也非常简单。 确保PC和手机在同一Wifi中 手机先通过USB与PC相连 在PC上运行 adb tcpip 服务端口，如端口为5555 12D:\Github_Run\scrcpy-win64-v1.10&gt;adb tcpip 5555restarting in TCP mode port: 5555 拔下你的设备，断开USB连接 在PC上运行 adb connect 手机IP:服务端口（手机IP可通过手机的状态信息查看，或者登录路由器查看，一般以192.168开头） 12D:\Github_Run\scrcpy-win64-v1.10&gt;adb connect 192.168.0.4:5555connected to 192.168.0.4:5555 运行scrcpy，在cmd中输入scrcpy.exe 参考：scrcpy——Android投屏神器(使用教程) 使用scrcpy控制你的手机]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx文件目录服务器]]></title>
    <url>%2F2020%2F09%2F22%2Fnginx%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[nginx搭建一个文件服务器简书地址 用nginx配置一个文件服务器，并解决中文乱码问题，配置文件1234567891011121314151617server &#123; listen 80; server_name downloadapp.3vyd.com; location / &#123; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos; always; add_header &apos;Access-Control-Allow-Credentials&apos; &apos;true&apos;; add_header &apos;Access-Control-Expose-Headers&apos; &apos;Content-Length,Content-Range&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;Range&apos;; root /var/packages; autoindex on; autoindex_localtime on; autoindex_exact_size off; charset utf-8; try_files $uri $uri/ /index.html; &#125;&#125; 如果，开放目录，当时不允许直接访问，只能访问指定路径下的html文件，nginx.conf的配置如下123456789101112131415161718192021222324252627282930313233343536373839404142pid /var/run/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Headers *; add_header Access-Control-Allow-Credentials true always; add_header Access-Control-Allow-Methods GET,POST,OPTIONS; add_header Access-Control-Max-Age 1728000 always; server &#123; listen 8088; server_name localhost; # location / &#123; # root /var/jenkins/report/admin/dist; # try_files $uri $uri/ /index.html; # index index.html; # &#125; location /report &#123; if ($request_method = &apos;OPTIONS&apos;) &#123; add_header &apos;Access-Control-Allow-Origin&apos; &apos;*&apos;; add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;; add_header &apos;Access-Control-Allow-Headers&apos; &apos;*&apos;; return 204; &#125; root /var/jenkins_home; try_files $uri $uri/ /index.html; index index.html; &#125; location ~* \.(eot|ttf|woff)$ &#123; add_header Access-Control-Allow-Origin *; &#125; &#125; 参考nginx开启目录浏览及解决中文文件名乱码问题]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[websocket本地调试html]]></title>
    <url>%2F2020%2F09%2F13%2Fwebsocket%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95html%2F</url>
    <content type="text"><![CDATA[新起websocket服务后本地如何调试呢？简书地址 先看看本地这个静态html在浏览器里看到的页面。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;title&gt;本地websocket测试&lt;/title&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;本地,websocket,测试工具&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;本地,websocket,测试工具&quot; /&gt; &lt;style&gt; .btn-group&#123; display: inline-block; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&apos;text&apos; value=&apos;ws://localhost:3000/api/ws&apos; class=&quot;form-control&quot; style=&apos;width:390px;display:inline&apos; id=&apos;wsaddr&apos; /&gt; &lt;div class=&quot;btn-group&quot; &gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;addsocket();&apos;&gt;连接&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;closesocket();&apos;&gt;断开&lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; onclick=&apos;$(&quot;#wsaddr&quot;).val(&quot;&quot;)&apos;&gt;清空&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div id=&quot;output&quot; style=&quot;border:1px solid #ccc;height:365px;overflow: auto;margin: 20px 0;&quot;&gt;&lt;/div&gt; &lt;input type=&quot;text&quot; id=&apos;message&apos; class=&quot;form-control&quot; style=&apos;width:810px&apos; placeholder=&quot;待发信息&quot; onkeydown=&quot;en(event);&quot;&gt; &lt;span class=&quot;input-group-btn&quot;&gt; &lt;button class=&quot;btn btn-default&quot; type=&quot;button&quot; onclick=&quot;doSend();&quot;&gt;发送&lt;/button&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script crossorigin=&quot;anonymous&quot; integrity=&quot;sha384-LVoNJ6yst/aLxKvxwp6s2GAabqPczfWh6xzm38S/YtjUyZ+3aTKOnD/OJVGYLZDl&quot; src=&quot;https://lib.baomitu.com/jquery/3.5.0/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt; function formatDate(now) &#123; var year = now.getFullYear(); var month = now.getMonth() + 1; var date = now.getDate(); var hour = now.getHours(); var minute = now.getMinutes(); var second = now.getSeconds(); return year + &quot;-&quot; + (month = month &lt; 10 ? (&quot;0&quot; + month) : month) + &quot;-&quot; + (date = date &lt; 10 ? (&quot;0&quot; + date) : date) + &quot; &quot; + (hour = hour &lt; 10 ? (&quot;0&quot; + hour) : hour) + &quot;:&quot; + (minute = minute &lt; 10 ? (&quot;0&quot; + minute) : minute) + &quot;:&quot; + ( second = second &lt; 10 ? (&quot;0&quot; + second) : second); &#125; var output; var websocket; function init() &#123; output = document.getElementById(&quot;output&quot;); testWebSocket(); &#125; function addsocket() &#123; var wsaddr = $(&quot;#wsaddr&quot;).val(); if (wsaddr == &apos;&apos;) &#123; alert(&quot;请填写websocket的地址&quot;); return false; &#125; StartWebSocket(wsaddr); &#125; function closesocket() &#123; websocket.close(); &#125; function StartWebSocket(wsUri) &#123; websocket = new WebSocket(wsUri); websocket.onopen = function(evt) &#123; onOpen(evt) &#125;; websocket.onclose = function(evt) &#123; onClose(evt) &#125;; websocket.onmessage = function(evt) &#123; onMessage(evt) &#125;; websocket.onerror = function(evt) &#123; onError(evt) &#125;; &#125; function onOpen(evt) &#123; writeToScreen(&quot;&lt;span style=&apos;color:red&apos;&gt;连接成功，现在你可以发送信息啦！！！&lt;/span&gt;&quot;); &#125; function onClose(evt) &#123; writeToScreen(&quot;&lt;span style=&apos;color:red&apos;&gt;websocket连接已断开!!!&lt;/span&gt;&quot;); websocket.close(); &#125; function onMessage(evt) &#123; writeToScreen(&apos;&lt;span style=&quot;color:blue&quot;&gt;服务端回应&amp;nbsp;&apos; + formatDate(new Date()) + &apos;&lt;/span&gt;&lt;br/&gt;&lt;span class=&quot;bubble&quot;&gt;&apos; + evt.data + &apos;&lt;/span&gt;&apos;); &#125; function onError(evt) &#123; writeToScreen(&apos;&lt;span style=&quot;color: red;&quot;&gt;发生错误:&lt;/span&gt; &apos; + evt.data); &#125; function doSend() &#123; var message = $(&quot;#message&quot;).val(); if (message == &apos;&apos;) &#123; alert(&quot;请先填写发送信息&quot;); $(&quot;#message&quot;).focus(); return false; &#125; if (typeof websocket === &quot;undefined&quot;) &#123; alert(&quot;websocket还没有连接，或者连接失败，请检测&quot;); return false; &#125; if (websocket.readyState == 3) &#123; alert(&quot;websocket已经关闭，请重新连接&quot;); return false; &#125; console.log(websocket); $(&quot;#message&quot;).val(&apos;&apos;); writeToScreen(&apos;&lt;span style=&quot;color:green&quot;&gt;你发送的信息&amp;nbsp;&apos; + formatDate(new Date()) + &apos;&lt;/span&gt;&lt;br/&gt;&apos; + message); websocket.send(message); &#125; function writeToScreen(message) &#123; var div = &quot;&lt;div class=&apos;newmessage&apos;&gt;&quot; + message + &quot;&lt;/div&gt;&quot;; var d = $(&quot;#output&quot;); var d = d[0]; var doScroll = d.scrollTop == d.scrollHeight - d.clientHeight; $(&quot;#output&quot;).append(div); if (doScroll) &#123; d.scrollTop = d.scrollHeight - d.clientHeight; &#125; &#125; function en(event) &#123; var evt = evt ? evt : (window.event ? window.event : null); if (evt.keyCode == 13) &#123; doSend() &#125; &#125; &lt;/script&gt; &lt;/html&gt;]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shadow-cljs hooks解决css延迟加载导致页面邹形问题]]></title>
    <url>%2F2020%2F08%2F29%2Fshadow-cljs%20hooks%E8%A7%A3%E5%86%B3css%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%E5%AF%BC%E8%87%B4%E9%A1%B5%E9%9D%A2%E9%82%B9%E5%BD%A2%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在shadow-cljs项目中在最后编译的时候将所有的css写入到同一个css文件，在index.html里引用一次简书地址 现状我司使用shadow-cljs编译clojure script代码，考虑到大家都编辑一个css文件的话，冲突比较严重，并且代码也没有模块化，所以每个模块有自己的样式文件，目前都是在自己业务模块或者component里引入自己的css文件，结构基本是这样的：1234(defn login-main [] [:div [:link &#123;:rel "stylesheet" :href "/css/login.css" &#125;] [:div "登录组件样式"]]) 分析好处： 代码模块化，业务组件与样式文件一一对应，便于开发团队维护代码。 不用在入口文件里引入一堆css文件，减少commit冲突。 减少资源浪费，只有页面加载处才加载css，系统不加载无用的资源文件。 痛点 一条足以致命，那就是产品体验不好，css加载延迟，几乎每个页面都出现如下一个瞬间。 是的，你看的没有错，浏览确实没有加载完，网络好的话这个页面瞬间就过了，但是万一碰上不好的，那就尴尬了，并且有时候还出现过最后样式就没有出来的情况。 思路不能让组件渲染时才去加载css，所以link这个方案pass掉。那么只能将css在index.html里引入，不管用不用得到，都先加载出来，让浏览器先缓存下来备用。 方案 代码层面，还是分模块，业务模块和css模块一一对应。 在系统运行时将所有自定义的css合并到一个样式文件，在index.html中引用。 其中第二点，在部署时可以使用脚本处理，但是在本地开发时就比较不便，不过好在shadow-cljs提供了build-hooks神器。加载配置中，让我们代码编译时做了这个合并css文件的工作。具体的配置是在根目录的shadow-cljs.edn中加入如下配置:12345&#123;... :builds &#123;:app &#123;:target ... :build-hooks [(utils.hooks/watch-resource)] ...&#125;&#125;&#125;&#125; 这个hooks的全部代码如下:123456789101112(ns utils.hooks (:require [clojure.java.shell :as shell]))(defn watch-resource &#123;:shadow.build/stage :flush&#125; [build-state &amp; args] (future (prn &quot;configure completed&quot;) (let [dir (System/getProperty &quot;user.dir&quot;)] (clojure.java.shell/with-sh-dir (str dir &quot;/src/cljs/utils&quot;) (clojure.java.shell/sh &quot;mergecss.sh&quot; (str dir &quot;/resources/public/css&quot;) (str dir &quot;/resources/public/css/style.css&quot;))))) build-state) 如果参考，shadow-cljs官方对build-hooks的说明，不难理解。解释两个东西 (System/getProperty &quot;user.dir&quot;)，这个是获取当前项目的工作目录，也就是项目跟目录，注意不是git根目录。有了这个，想获取什么目录或者文件，手到擒来。 hooks里还调用了一个脚本文件mergecss.sh,这个文件的作用是把开发团队自己写的所有css的内容copy到同一个style.css文件中去，第一个参数是要处理的目录(会向下遍历目录)，第二个参数是要写入的目标文件，附上脚本代码：1234567891011121314151617181920212223242526#!/bin/bash#获取第一个参数,目标目录srcpath=$1#第二个参数，输出文件target_file=$2#先删除原目标文件rm -rf $&#123;target_file&#125;;function writeByDir()&#123; for file in $1/* do if test -f $file; then #_echo $(basename $file) if [[ $(basename $file) = "antd.min.css" ]] || [[ $(basename $file) = "slick.min.css" ]] || [[ $(basename $file) = "slick-theme.min.css" ]]; then echo "uncopy css :"$(basename $file) else cat "$file" &gt;&gt; "$&#123;target_file&#125;" echo "" &gt;&gt; "$&#123;target_file&#125;" fi else writeByDir $file fi done&#125;writeByDir $&#123;srcpath&#125; 此处由衷感慨下，repl真好用，clojure.java.shell这个库的使用，及最后钩子内容好不好使全靠这个工具调试。否则的话，修改hooks就要频繁启动shadow-cljs项目，并且如果hooks函数有错误的没有任何报错信息，只是钩子函数不执行。 这样本地开发的css文件也能及时写入到style.css里，在index.html引用这个文件，妥了。1&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/style.css&quot; type=&quot;text/css&quot; &gt; 一顿操作猛如虎，定睛一看原地杵以上操作还是不够完美， 加上hook后，在本地修改自己的css后，钩子不执行，改的代码不会自己写入目标文件。方案一：在9630端口上手动触发compile，强制flush。方案二：开发过程中可以在cljs文件里link自己的样式文件，达到高效开发，link段落不用提交。 为了开发时不冲突，更新gitignore，生成的css不用commit到项目里，release环境在持续集成时执行该hook的操作，调用服务器的脚本文件。 样式文件没有hash，纯copy，只为解决css加载延迟导致的页面丑陋。 参考 https://blog.csdn.net/sirfenygu/article/details/47025083]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac上soundflower+OBS+微信公众号直播项目总结]]></title>
    <url>%2F2020%2F08%2F16%2Fmac%E4%B8%8Asoundflower%2BOBS%2B%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9B%B4%E6%92%AD%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[mac上使用腾讯会议+OBS客户端做直播简书地址 1. 本地微信公众号开发参考：微信配置本地公众号开发环境 2. runtime的addShutdownHook钩子不执行参考：Linux kill &amp; Java shutdownhook最后用的kill-15 pid停止进程，或许有更好的方式，比如System.exit(); 读文件好说，项目启动时编译就会读12(def file-url "/opt/xhlive-training/pkg/activity/db.edn")(def messages (atom (clojure.edn/read-string (slurp file-url)))) 增加hook12345678(defn -main [&amp; args] (start!) (.addShutdownHook (Runtime/getRuntime) (new Thread (fn[] (prn "I am going down....") (when (not (empty? @messages)) (spit file-url @messages))))) (println "启动ws....")) 3. 项目启动时读文件，项目结束时写文件类似在服务结束时增加一些销毁现场的能力。Java中使用shutdownHook的一些注意事项上博主的介绍相对来说能够帮助addShutdownHook的场景了。 本文介绍clojure版实践。 slurp 读函数读取一个文本文件的全部内容 clojure.core/slurp读取一个文件的全部内容，并以字符串形式返回1234(comment (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;) ;; =&gt; &quot;a txt file line1\na txt file line2\n这是中文字符&quot; ) spit 写函数clojure.core/spit [file-path content &amp; options]file-path：为文件路径；content：为要写入文件的内容，所有的内容都会被转为String类型写入。options：一些设置参数，常见的有： :append true/false；当为true是，内容会从文件后面写入，如果要换行写入，需要在内容后面加入\n换行符，当为false时，会擦掉文件原有的内容。:encoding “UTF-8”或”GBK”等。 默认是UTF-8.spit函数会先打开文件，再将内容写入，再关闭文件。spit都是以字符串形式写入。1234567891011121314151617181920(comment (spit &quot;files/file-test.txt&quot; &quot;新增文件内容\n&quot; :append false :encoding &quot;GBK&quot;) (slurp &quot;files/file-test.txt&quot; :encoding &quot;GBK&quot;) ;; =&gt; &quot;新增文件内容\n&quot; (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;) ;; =&gt; &quot;�����ļ�����\n&quot; (spit &quot;files/file-test.txt&quot; &quot;新增文件内容\n&quot; :append false) (slurp &quot;files/file-test.txt&quot; :encoding &quot;GBK&quot;) ;; =&gt; &quot;鏂板鏂囦欢鍐呭\n&quot; (slurp &quot;files/file-test.txt&quot; :encoding &quot;UTF-8&quot;) ;; =&gt; &quot;新增文件内容\n&quot; ;; 逐行写大量数据到文件时，用spit会降低效率，因为它每写一次都会执行打开、关闭文件。 ;; 此时可以用java.io.writer. (with-open [w (cio/writer &quot;files/file-test.txt&quot;)] (doseq [l [&quot;第一行&quot; &quot;第二行&quot; &quot;第三行&quot;]] (.write w l) ;; 新起一行 (.newLine w))) ) websocketclojure使用两个库，不附源码。https://github.com/ptaoussanis/sentehttps://github.com/ptaoussanis/timbre mac上使用OBS做直播我们的方案是把腾讯会议的会议内容做一定的背景、头像的裁剪处理后用OBS studio软件把流推出去，然后在客户端用m3u8的格式拉取播放。 为什么单独提一下这个，因为mac上能把麦克风的声音播出去，但是桌面的声音拨不出去。换句话说，你用网易云音乐，想只把这个软件的声音用OBS播出去，是不可以的，于是借助soundFlower这款软件可以实现，在腾讯会议上选择soundflower (64ch)这个通道。 OBS里设置也选择soundflower (64ch)可以只将腾讯会议的声音播出去。 然而，这样有产生个新问题，腾讯会议的声音都被OBS拨出去了，自己的电脑端却听不见了，于是参考在MacOS上利用OBS+Soundflower内录声音与直播这个教程配置了聚合输入和混合输出，相当于将一个声音进行了扩展，这样才妥当了。 参考clojure实战——IO（1）在MacOS上利用OBS+Soundflower内录声音与直播]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro V4安装"辛"路历程]]></title>
    <url>%2F2020%2F08%2F09%2FAnt%20Design%20Pro%20V4%E5%AE%89%E8%A3%85%22%E8%BE%9B%22%E8%B7%AF%E5%8E%86%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[新版本antd pro后台项目的demo搭建使用简书地址 以前安装ant design pro从github上clone下来，两句话就在浏览器看到登录页面了，现在这个东西越来越臃肿了，我就想要个页面，跑起来给客户看看样子，结果废了老劲了，也不知道都往里面搞了啥。 今天记录一下吧。参考官网教程.选择ant-design-pro,Pro V4，TypeScript，complete.12345678910111213141516$ npm create umi? Select the boilerplate type ant-design-pro? 🧙 Be the first to experience the new umi@3 ? Pro V4? 🤓 Which language do you want to use? TypeScript? 🚀 Do you need all the blocks or a simple scaffold? complete&gt; 🙈 complete mode can only use the version of antd@4Cloning into &apos;/Users/marvin/git/opensource/react/antd-pro&apos;...remote: Enumerating objects: 564, done.remote: Counting objects: 100% (564/564), done.remote: Compressing objects: 100% (481/481), done.remote: Total 564 (delta 89), reused 318 (delta 62), pack-reused 0Receiving objects: 100% (564/564), 461.41 KiB | 435.00 KiB/s, done.Resolving deltas: 100% (89/89), done.&gt; 🚚 clone success&gt; Clean up...✨ File Generate Done 项目创建成功后执行npm install,出个错12345678910111213141516171819202122&gt; node-pty@0.10.0-beta9 install /Users/marvin/git/opensource/react/antd-pro/node_modules/node-pty&gt; node scripts/install.jsgyp WARN install got an error, rolling back installgyp ERR! configure errorgyp ERR! stack ZlibError: zlib: unexpected end of filegyp ERR! stack at Unzip.write (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:147:22)gyp ERR! stack at Unzip.flush (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:98:10)gyp ERR! stack at Unzip.end (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/minizlib/index.js:104:10)gyp ERR! stack at Unpack.end (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/tar/lib/parse.js:421:21)gyp ERR! stack at IncomingMessage.onend (_stream_readable.js:679:10)gyp ERR! stack at Object.onceWrapper (events.js:420:28)gyp ERR! stack at IncomingMessage.emit (events.js:326:22)gyp ERR! stack at IncomingMessage.&lt;anonymous&gt; (/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/request/request.js:1000:23)gyp ERR! stack at IncomingMessage.emit (events.js:326:22)gyp ERR! stack at TLSSocket.socketCloseListener (_http_client.js:435:11)gyp ERR! System Darwin 19.6.0gyp ERR! command &quot;/Users/marvin/.nvm/versions/node/v14.5.0/bin/node&quot; &quot;/Users/marvin/.nvm/versions/node/v14.5.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;gyp ERR! cwd /Users/marvin/git/opensource/react/antd-pro/node_modules/node-ptygyp ERR! node -v v14.5.0gyp ERR! node-gyp -v v5.1.0gyp ERR! not ok 查了半天，按照https://www.jianshu.com/p/a2a2ddeb174c的思路，错误变成了下面这个1234567891011121314151617181920212223$ npm install&gt; fsevents@1.2.13 install /Users/marvin/git/opensource/react/antd-pro/node_modules/jest-environment-jsdom-fourteen/node_modules/fsevents&gt; node install.jsNo receipt for &apos;com.apple.pkg.CLTools_Executables&apos; found at &apos;/&apos;.No receipt for &apos;com.apple.pkg.DeveloperToolsCLILeo&apos; found at &apos;/&apos;.No receipt for &apos;com.apple.pkg.DeveloperToolsCLI&apos; found at &apos;/&apos;.gyp: No Xcode or CLT version detected!gyp ERR! configure errorgyp ERR! stack Error: `gyp` failed with exit code: 1gyp ERR! stack at ChildProcess.onCpExit (/Users/marvin/.nvm/versions/node/v12.8.0/lib/node_modules/npm/node_modules/node-gyp/lib/configure.js:344:16)gyp ERR! stack at ChildProcess.emit (events.js:203:13)gyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:272:12)gyp ERR! System Darwin 19.6.0gyp ERR! command &quot;/Users/marvin/.nvm/versions/node/v12.8.0/bin/node&quot; &quot;/Users/marvin/.nvm/versions/node/v12.8.0/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js&quot; &quot;rebuild&quot;gyp ERR! cwd /Users/marvin/git/opensource/react/antd-pro/node_modules/jest-environment-jsdom-fourteen/node_modules/fseventsgyp ERR! node -v v12.8.0gyp ERR! node-gyp -v v5.0.3gyp ERR! not ok 在查询错误，终于https://juejin.im/post/6844904058076020743上找到了解决方案。 解决方案 尝试用如下命令进行修复1$ xcode-select --install 复制代码系统提示如下信息：1xcode-select: error: command line tools are already installed, use &quot;Software Update&quot; to install updates 复制代码而事实上并没有所谓的”Software Update”可以更新 正确姿势一筹莫展之际，找到如下解决方案：12$ sudo rm -rf $(xcode-select -print-path)$ xcode-select --install 终于安装成功了。]]></content>
      <categories>
        <category>antd</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信配置本地公众号开发环境]]></title>
    <url>%2F2020%2F08%2F06%2F%E5%BE%AE%E4%BF%A1%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[配置微信公众号的本地开发环境简书地址 第一步：申请微信测试号https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index 第二步：在申请的测试号上配置回调域名等 第三步：核心在上面的| 网页帐号 | [网页授权获取用户基本信息]&quot;网页授权获取用户基本信息&quot;后点击【修改】,增加本地ip，注意 一定带着端口号 第四步：微信开发者工具访问地址redirect_uri要在这儿进行URL编码，然后用微信开发者工具打开1https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx6d8c0247f15f96df&amp;redirect_uri=http%3a%2f%2f192.168.0.110%3a8000%2fweixin-redirect&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect 常见错误 redirect_uri 参数错误 微信测试号上没有配置授权回调域名 配置的授权回调页面域名跟请求时带着的参数不一样 本地开发有端口，配置的回调域名没有带着端口]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【转】Clojure 引用java文件 lein javac 报ClassNotFoundException]]></title>
    <url>%2F2020%2F07%2F23%2F%E3%80%90%E8%BD%AC%E3%80%91Clojure%20%E5%BC%95%E7%94%A8java%E6%96%87%E4%BB%B6%20lein%20javac%20%E6%8A%A5ClassNotFoundException%2F</url>
    <content type="text"><![CDATA[在luminus web的clojure模板里直接使用java文件的正确姿势。简书地址 经过两次才彻底解决的一个问题，把同事总计的在自己的小本子上转存一下。猛戳此处)进入我司blog系统。 在Clojure中使用Luminus进行Web开发时，如果有自定义Java文件，在开发环境中编译（lein javac）时，会出现ClassNotFoundException错误。 产生原因：在开发环境下，env-&gt;dev-&gt;clj-&gt;user.clj文件会自动加载，并且是在Java文件编译前执行。user.clj文件会引用core下的start-app，core.clj文件又会引用handler，如果在handler的引用文件中引用了自定义Java类时，就会出现ClassNotFoundException错误。 解决方法一：修改user.clj文件名 1234567;; 1. 将 user.clj 文件名修改为 hctest.clj;; 2. 修改 hctest.clj 文件命名空间(ns hctest);; 3. 修改 project.clj 文件下的 :project/dev -&gt; :repl-options -&gt; :init-ns 值&#123;:project/dev &#123;:repl-options &#123;:init-ns hctest&#125;&#125;&#125; 解决方法二：移动user.clj文件 1234567891011;; 可选 --&gt; 1. 修改 project.clj 下的 :profiles -&gt; :uberjar -&gt; :prep-tasks，在开始添加 "javac"&#123;:profiles &#123;:uberjar &#123;:prep-tasks ["javac" "compile"]&#125;&#125;&#125;;; 2. 将 env-&gt;clj-&gt;user.clj 文件移到到指定文件夹下，比如 env-&gt;clj-&gt;empty-&gt; user.clj，并修改命名空间为 empty.user(ns empty.user);; 3. 修改 project.clj 下的 :project/dev -&gt; :repl-options -&gt; :init-ns 值&#123;:project/dev &#123;:repl-options &#123;:init-ns empty.user&#125;&#125;&#125; 参考：https://github.com/luminus-framework/luminus-template/issues/319]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[postgressql数据库+postgrest服务搭建]]></title>
    <url>%2F2020%2F06%2F21%2Fpostgressql%E6%95%B0%E6%8D%AE%E5%BA%93%2Bpostgrest%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[在linux上搭建postgresql和postgrest服务简书地址 环境：ubuntu 开篇postgresql是又一款开源的关系数据库，经常有人拿来跟mysql进行对比，比如PostgreSQL 与 MySQL 相比，优势何在？，上网搜了下，还真不少。本人了解太少，不做评论，老板要求用用咱就用，又可以学东西了（又有坑要踩了），学无止境…。 postgresSql1.安装服务12sudo apt updatesudo apt install postgresql postgresql-contrib 2.进入服务上一步安装完成后，执行如下命令启动服务：12service postgresql statusservice postgresql start 默认情况下，PostgreSQL 会创建一个拥有所权限的特殊用户 postgres。要实际使用 PostgreSQL，你必须先登录该账户：1sudo su postgres 你的提示符会更改为类似于以下的内容：1postgres@ubuntu-VirtualBox:/home/ubuntu$ 现在，使用 psql 来启动 PostgreSQL Shell：1psql 你应该会看到如下提示符：1postgress=# 要查看现有的所有表，输入如下命令：1\l 你可以输入 \q 以退出，输入 \? 获取帮助。其他更多命令参考：PostgreSQL命令行常用命令psql 3.修改postgres数据库用户的密码 1) 打开客户端工具（psql） 1sudo -u postgres psql (或者分两步： sudo -u postgres -i; psql) 其中，sudo -u postgres是使用postgres 用户登录的意思 PostgreSQL数据默认会创建一个postgres的数据库用户作为数据库的管理员，密码是随机的，创建用户：1postgres=# postgres=#为PostgreSQL下的命令提示符，–注意最后的分号； 2) 退出PostgreSQL psql客户端1postgres=# \q 修改ubuntu操作系统的postgres用户的密码（密码要与数据库用户postgres的密码相同） 切换到root用户 1su root 删除PostgreSQL用户密码 1sudo passwd -d postgres passwd -d 是清空指定用户密码的意思 设置PostgreSQL系统用户的密码1sudo -u postgres passwd 按照提示，输入两次新密码 输入新的 UNIX 密码 重新输入新的 UNIX 密码 passwd：已成功更新密码 修改PostgresSQL数据库配置实现远程访问1vi /etc/postgresql/9.5/main/postgresql.conf 监听任何地址访问，修改连接权限1#listen_addresses = &apos;localhost&apos; 改为 listen_addresses = &apos;*&apos; (uncomment it) 启用密码验证12#password_encryption = on 改为 password_encryption = on (uncomment it)vi /etc/postgresql/9.6/main/pg_hba.conf 在文档末尾加上以下内容1host all all 0.0.0.0 0.0.0.0 md5 创建用户、数据库，授权123postgres=# CREATE USER training WITH CREATEROLE PASSWORD &apos;training_plat&apos;;postgres=# CREATE DATABASE traindb OWNER lizy;postgres=# GRANT ALL PRIVILEGES ON DATABASE traindb to lizy; postgresql的教程，目前刚上手，推荐： postgrest服务使用源码下载安装的方式 1. 安装1234# download from https://github.com/PostgREST/postgrest/releases/latest# 下载后进行解压curl https://github.com/PostgREST/postgrest/releases/download/v7.0.1/postgrest-v7.0.1-linux-x64-static.tar.xztar xfJ postgrest-v7.0.1-linux-x64-static.tar.xz 解压文件只有一个名为postgrest的可执行脚本。 2.运行postgrest服务运行postgrest是需要指定一个conf文件，文件名可以随意，比如tutorial.conf,内容如下：123456db-uri = &quot;postgres://training:training_plat@localhost:5432/traindb&quot;db-schema = &quot;testapp_db, basic_auth,global_info&quot;db-anon-role = &quot;training&quot;jwt-secret = &quot;MqQx7uwtxH3JjphNvRzgeQMkNjDt5JzfpqWwNHrQ13c=&quot;log_statement = &quot;all&quot;server-port = 3032 如果不指定server-port,则默认的端口是3000。有了配置文件后在解压后的目录执行1./postgrest tutorial.conf 推荐：总是在解压目录执行可执行脚本，写路径还是麻烦了些，可以将此脚本加入环境变量/usr/local/bin下，这样任意目录都可以执行该命令。 一个简单用来启动postgrest的脚本作用：修改了数据库以后，需要重启postgrest服务，接口才能生效，在jenkins上可以执行脚本重启，脚本内容如下：123456789101112131415161718#!/bin/bash#获取第1个参数，conf文件，路径+文件名#获取第2个参数，postgrest服务的log目录config_file=$1log_dir=$2echo &quot;================== server restart start=======================&quot;pid=`ps -aux | grep $&#123;config_file&#125; | grep -v bash |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ -n &quot;$&#123;pid&#125;&quot; ]then#!kill -9 强制终止 echo &quot;kill -9 的pid:&quot; $pid kill -9 $pidfinohup postgrest $&#123;config_file&#125; &gt; $&#123;log_dir&#125;nohup.log 2&gt;&amp;1 &amp;echo &quot;================== server restart end =======================&quot; 顺便，推荐一款mac的数据库连接客户端Dbeaver尤其是看postgresql的表关联关系还是很不错的。 参考Install Postgresql on UbuntuPostgREST官网]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>postgrest</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emacs的cider-debug-defun-point]]></title>
    <url>%2F2020%2F06%2F08%2Femacs%E7%9A%84cider-debug-defun-point%2F</url>
    <content type="text"><![CDATA[用emacs工具debug后端的clj代码 简书地址 演示代码1234567891011121314151617181920;; 1. Call M-x cider-debug-init-connectiong(only needed once),;; 2. Call M-x cider-debug-defun-at-ponit with point inside this defn.;; 3. Run the function, and using key word;; 4. link:https://docs.cider.mx/cider/debugging/debugger.html(defn foo [n] (map (partial * 2) (filter even? (range 0 n))));; break out when reaching a condition(defn foo2 [] (dotimes [i 10] #dbg ^&#123;:break/when (= i 7)&#125; (prn i)))(defn eval-msg [&#123;:keys [inspect] :as msg&#125;] (if inspect #break (clojure.inspector/inspect msg) msg)) 进入debugM-x cider-debug-defun-at-point 常见的操作： j Inject a value into running code e C-c M-: 表达式求值 enlighten模式：查看最后一次表达式的值M-x cider-enlighten-modeC-M-x 或者 C-x C-e 开始执行。 C-c C-k取消操作。M-x cider-enlighten-mode关闭enlighten模式123456789(defn foo2 [x] (let [y (* 3 x)] (+ x y)))(defn bar [x] (dotimes [i x] (foo2 i)))(bar 5) 参考debuggerEnlighten]]></content>
      <categories>
        <category>emacs</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emacs里的小游戏]]></title>
    <url>%2F2020%2F04%2F24%2Femacs%E9%87%8C%E7%9A%84%E5%B0%8F%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[物料的时候玩玩emacs里的小游戏放松放松 简书地址 引用：https://linux.cn/article-11949-1-rel.html 1. 消消乐M-x bubble 游戏相当简单：你必须用尽可能少移动清除尽可能多的“泡泡”。当你移除气泡时，其他气泡会掉落并粘在一起。这是一款有趣的游戏，此外如果你使用 Emacs 的图形用户界面，它还支持图像显示。而且它还支持鼠标。 你可以通过调用 M-x bubbles-set-game-&lt;difficulty&gt;来设置难度，其中&lt;difficulty&gt;可以是这些之一：easy、medium、difficult、hard 或 userdefined。此外，你可以使用：M-x custom-group bubbles来更改图形、网格大小和颜色。 由于它即简单又有趣，这是 Emacs 中我最喜欢的游戏之一。 2. 五子棋你必须将 5 个方块连成一条线，井字棋风格。你可以运行 M-x gomoku来与 Emacs 对抗。游戏还支持鼠标，非常方便。你也可以自定义 gomoku 组来调整网格的大小。 3. 乒乓、贪食蛇、俄罗斯方块这些经典游戏都是使用 Emacs 包 gamegrid 实现的，这是一个用于构建网格游戏（如俄罗斯方块和贪吃蛇）的通用框架。gamegrid 包的伟大之处在于它同时兼容图形化和终端 Emacs：如果你在 GUI 中运行 Emacs，你会得到精美的图形；如果你没有，你看到简单的 ASCII 艺术。 你可以通过输入 M-x pong、M-x snake、M-x tetris 来运行这些游戏。 4. Zone我的另一个最爱。这是一个屏幕保护程序——或者更确切地说，是一系列的屏幕保护程序。 输入 M-x zone，然后看看屏幕上发生了什么！ 你可以通过运行 M-x zone-when-idle（或从 elisp 调用它）来配置屏幕保护程序的空闲时间，时间以秒为单位。你也可以通过 M-x zone-leave-me-alone来关闭它。 如果在你的同事看着的时候启动它，你的同事肯定会抓狂的。go]]></content>
      <categories>
        <category>emacs</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux shell 监控应用存活并发邮件通知]]></title>
    <url>%2F2020%2F04%2F18%2FLinux%20shell%20%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8%E5%AD%98%E6%B4%BB%E5%B9%B6%E5%8F%91%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5%2F</url>
    <content type="text"><![CDATA[curl需要监控的接口，将结果发送邮件通知，也可以判断REST接口的返回数据内容。简书地址 需求 每天执行三次，分别为：7:10，12:10，16:10 7:10执行日期参数为T-1，12:10,16:10执行日期参数为T(T是指当天) 每次执行判断一下接口返回的数据量，以邮件形式发送给相关人员 脚本12345678910111213141516171819202122232425262728293031323334353637383940#!/bin/bashvar1=$1webUrls=(&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_for_leader&amp;params=period_date::$&#123;var1&#125;&quot;&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_m_wl_gongm_result_info_view&amp;params=period_date::$&#123;var1&#125;&quot;&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_m_wl_lianq_result_info_view&amp;params=period_date::$&#123;var1&#125;&quot;&quot;http://sso1169sjdptest.haier.net/fx_app/common/inter?fresh=1&amp;dataType=rrs_fxapp_for_soldier_mall_score&amp;params=period_date::$&#123;var1&#125;&quot;)declare -a name#使用curl命令检查http服务器的状态#-m设置curl不管访问成功或失败，最大消耗的时间为5秒，5秒连接服未响应则视为无法连接#-s设置静默连接，不显示连接时的连接速度、时间消耗等信息#-o将curl下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)#-w设置curl命令需要显示的内容%&#123;http_code&#125;，指定curl返回服务器的状态码# 如果不是看结果，是看http状态的话使用如下函数check_http()&#123; status_code=$(curl -m 5 -s-o /dev/null -w %&#123;http_code&#125; https://www.baidu.com)&#125;function httpRequest()&#123; echo &quot;日期参数：$&#123;var1&#125;&quot; for ((i=0; i&lt;$&#123;#webUrls[@]&#125;; i++)) do echo &quot;顺序：$&#123;i&#125;，请求：$&#123;webUrls[i]&#125;&quot; res=$(curl -m 5 -s $&#123;webUrls[i]&#125; | jq &apos;.data&apos; | jq &apos;length&apos;) name[$i]=$res echo $&#123;name[$i]&#125; #为方便检查，加了打印 done&#125;httpRequest &quot;$@&quot;emailContent=&quot;链接数据接口：$&#123;name[0]&#125; 中心数据接口：$&#123;name[1]&#125; 链群数据接口：$&#123;name[2]&#125; 评分数据接口：$&#123;name[3]&#125;&quot;echo &quot;$&#123;emailContent&#125;&quot; | mail -s &apos;4个指标接口当前的数据通知&apos; marvin.ma@redcreation.net,zhangsan@163.com 收到的邮件： 知识储备获取当前时间：123time=$(date &quot;+%Y%m%d-%H%M%S&quot;)time2=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;)echo &quot;$&#123;time&#125;&quot; 昨天:1echo $(date +&quot;%Y-%m-%d&quot; -d &quot;-1day&quot;) 其他参考：shell date 获取昨天日期 curl 到json内容:1234567#使用curl命令检查http服务器的状态#-m设置curl不管访问成功或失败，最大消耗的时间为5秒，5秒连接服未响应则视为无法连接#-s设置静默连接，不显示连接时的连接速度、时间消耗等信息#-o将curl下载的页面内容导出到/dev/null(默认会在屏幕显示页面内容)#-w设置curl命令需要显示的内容%&#123;http_code&#125;，指定curl返回服务器的状态码res=$(curl -s &quot;https://www.baidu.com&quot;)echo $res 接收参数：12345678910#!/bin/bash# 必须写绝对路径，不然crontab不执行，因为找不到路径log=/opt/jc/task.logvar1=$1test()&#123; time=$(date &quot;+%Y-%m-%d %H:%M:%S&quot;) echo &quot;$&#123;time&#125; do something, set var1 = $&#123;var1&#125;&quot; &gt;&gt; $log&#125;test 测试定时任务1vi /etc/crontab 添加一行，每2分钟执行一次1*/2 * * * * root /opt/jc/curl.sh hahaha 为了完成这个需求，我的crontab的内容如下1210 7 * * * root /opt/jc/curl.sh $(date +&quot;%Y%m%d&quot; -d &quot;-1day&quot;)10 12,16 * * * root /opt/jc/curl.sh $(date &quot;+%Y%m%d&quot;) shell处理json数据工具—–jq获取接口返回的数据中data的值数组大小1res=$(curl -m 5 -s $&#123;webUrls[i]&#125; | jq &apos;.data&apos; | jq &apos;length&apos;) 其他jq的用法参考：shell脚本处理JSON数据工具jq 遇到的问题 脚本不执行不知道为啥方案：先用如下命令看看crontab服务是否正常，不正常的进行安装。1service crond status 没有安装的话先安装。 定时任务出错出错的情况会有邮件通知，位置在/var/mail/root中，可以查看脚本执行失败的原因 Shell 脚本时显示declare not found的问题ubuntu系统将默认的bash换成了dash，需要手动替换下，参考下面的参考链接Shell 脚本时显示declare not found的问题配置。 shell里发送邮件使用sendmail工具发送邮件。Shell 脚本时显示declare not found的问题]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 配置sendmail发送邮件]]></title>
    <url>%2F2020%2F04%2F18%2FLinux%20%E9%85%8D%E7%BD%AEsendmail%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[linux服务器配置sendmail在命令行里方便发送邮件简书地址 Ubuntu 安装工具1apt-get install heirloom-mailx 修改配置vim /etc/s-nail.rc在文件最后加入如下配置项：12345set from=&quot;mailtest@3vyd.com&quot;set smtp=&quot;smtp.exmail.qq.com&quot;set smtp-auth-user=&quot;mailtest@3vyd.com&quot;set smtp-auth-password=&quot;xxxx&quot;set smtp-auth=login 测试邮件1echo &quot;测试的邮件内容&quot; | s-nail -s &quot;测试的邮件主题&quot; marvin.ma@redcreation.net 注意root@hk-server:~# Could not connect: Operation now in progress“/root/dead.letter” 8/209… message not sent 这里注意！因为是阿里云服务器，可能是25端口被封，得改用465端口，所以配置内容那里要注意将smtp配置加上端口：1set smtp=smtp.exmail.qq.com:465 centos install Mailx 1yum install -y mailx Config SMTP Params 12345678vi /etc/mail.rc# Add Gmail SMTPset from=yiilib.com_t@gmail.com #send from mail addressset smtp=smtp.gmail.com #SMTP server domainset smtp-auth-user=yiilib.com_t #send accountset smtp-auth-password=mailBoxPassword #account passwordset smtp-auth=login #auth way send test 1echo &quot;mail body&quot; | mail marvin.ma@redcreation.net -s &quot;test mail subject&quot; -a /root/backup/yiilib.com_tmp.sql 两种常用配置 腾讯企业邮箱 12345set from=&quot;mailtest@3vyd.com&quot;set smtp=&quot;smtp.exmail.qq.com&quot;set smtp-auth-user=&quot;mailtest@3vyd.com&quot;set smtp-auth-password=&quot;xxxx&quot;set smtp-auth=login 163网易邮箱(密码是指客户端授权密码) 12345set from=&quot;chuangkehui@163.com&quot;set smtp=&quot;smtp.163.com&quot;set smtp-auth-user=&quot;chuangkehui@163.com&quot;set smtp-auth-password=&quot;xxxx&quot;set smtp-auth=login 参考Linux发邮件-ubuntu和centoshttp://yiilib.com/en/topic/731/Centos+use+Mailx+send+SMTP+Mail]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojureScript页面国际化(i18n多语言)实现]]></title>
    <url>%2F2020%2F04%2F04%2Fclojurescript-i18n%2F</url>
    <content type="text"><![CDATA[clojurescript 国际化核心代码 简书地址 先看下效果（证明是实践过的） 国际化方案比较多，页面上的国际化一般比较简单，麻烦的还是数据库的数据的国际化。本地cljs里的国际化采用前端db的atom控制当前语言，所有可见的翻译分为页面部分和数据库部分，最后在通过接口拿到数据库的翻译后跟页面的进行merge。 方案原理 将当前用户设定的语言保存在本地localstorage，并且保存在页面db中。 切换语言时，每个需要国际化的文案前增加i18n-str函数调用，实时获取目标文案对应的i18n文案。 浏览器被刷新时从localstorage中回复已经选择的语音类型。 可视的多语言文案，分为页面部分数数据库部分，在前端进行merge处理，保存成一个。 前提前端使用re-frame、kee-frame、shadow-cljs、antd框架 当前方案核心代码分页页面部分，切换语言部分（保存db，保存localstorage，防止手动刷新页面时数据还原）。 1. 页面切换代码继续使用antd组件1234567891011121314151617181920212223242526272829(def lang (rf/subscribe [:i18n/lang]));; 语言(def ^:private language &#123;:zh-cn &quot;中文&quot; :en-us &quot;English&quot; :ja-jp &quot;日本語&quot;&#125;);; 语言菜单(defn- dropdown-menu [] [:&gt; ant/Menu &#123;:className &quot;menu&quot; :onClick (fn [menu] (let [value (js-&gt;clj menu :keywordize-keys true)] (rf/dispatch [:i18n/change-lang (keyword (:key value))])))&#125; [:&gt; MenuItem &#123;:key &quot;zh-cn&quot; :title &quot;中文&quot;&#125; [:span (i18n-str &quot;中文&quot;)]] [:&gt; MenuItem &#123;:key &quot;en-us&quot; :title &quot;英文&quot;&#125; [:span (i18n-str &quot;英文&quot;)]] [:&gt; MenuItem &#123;:key &quot;ja-jp&quot; :title &quot;日文&quot;&#125; [:span (i18n-str &quot;日文&quot;)]]])[:div &#123;:style &#123;:margin-left 20 :font-size &quot;14px&quot; :font-family &quot;PingFangSC-Medium,PingFang SC&quot; :font-weight 500 :color &quot;rgba(0,0,0,1)&quot;&#125;&#125; [:&gt; ant/Dropdown &#123;:overlay (reagent.core/as-element [dropdown-menu])&#125; [:span (i18n-str (or (get language @lang) &quot;中文&quot;))]]] 2. 切换和保存当前语言123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263;;通过key设置和获取localstorage里的数据(defn set-local-storage [key value] (.setItem js/localStorage key value))(defn get-local-storage [key] (.getItem js/localStorage key));;只要路由变化，就要触发获取当前语言的逻辑(kf/reg-controller :lang-controller &#123;:params (constantly true) :start [::set-lang-by-local]&#125;);;如果页面刷新的话从localstorage里获取(kf/reg-event-fx ::set-lang-by-local (fn [_ [_ _]] (when-not @(rf/subscribe [:i18n/lang]) (if (get-current-lang) (rf/dispatch [:i18n/change-lang (get-current-lang)]) (rf/dispatch [:i18n/change-lang :zh-cn]))) &#123;:dispatch [:request/get &#123;:url (:get-lang-map mutil-lang) :params &#123;:hostname (.. js/window -location -hostname)&#125; ;;此处根据当前域名获取该域名的对应租户的多语言文案 :callback-event ::save-db-lang&#125;]&#125;))(kf/reg-event-fx ::save-db-lang (fn [&#123;:keys [db]&#125; [db-lang-map]] &#123;:db (-&gt; db (assoc-in [:db-lang-map] db-lang-map))&#125;))(rf/reg-event-fx :i18n/change-lang (fn [&#123;:keys [db]&#125; [_ data]] (js/console.log &quot;切换语言到：&quot; data) (set-current-lang data) &#123;:db (assoc-in db [:global :lang] data)&#125;))(rf/reg-sub :i18n/lang (fn [data] (get-in data [:global :lang])))(rf/reg-sub :i18n/db-lang-map (fn [db] (get-in db [:db-lang-map])))(defn- merge-lang-map &quot;对页面上的文案和db里的文案进行一次merge&quot; [page-lang-map db-lang-map] (if db-lang-map (merge page-lang-map (#(zipmap (map :key %) (map :value %)) db-lang-map)) page-lang-map));;返回当前语言的关键字(defn i18n-str [s] (let [lang (rf/subscribe [:i18n/lang]) db-lang-map (rf/subscribe [:i18n/db-lang-map])] (get-in (merge-lang-map language-map @db-lang-map) [s @lang] s))) 3. 页面文案翻译上面代码里用到的language-map类似如下结构:12345678(def language-map &#123; &quot;切换语言&quot; &#123;:en-us &quot;Switch language&quot; :ja-jp &quot;言語を切り替え&quot;&#125; &quot;中文&quot; &#123;:en-us &quot;Chinese&quot; :ja-jp &quot;中国語&quot;&#125; &quot;英文&quot; &#123;:en-us &quot;English&quot; :ja-jp &quot;英語&quot;&#125; &quot;日文&quot; &#123;:en-us &quot;Japanese&quot; :ja-jp &quot;日本語&quot;&#125; &quot;体验门店&quot; &#123;:en-us &quot;Experience Store&quot; :ja-jp &quot;店を体験する&quot;&#125; &quot;返回首页&quot; &#123;:en-us &quot;Back to Home&quot; :ja-jp &quot;ホームを戻す&quot;&#125;&#125; ) 4. 数据库返回的文案即上文中:i18n/db-lang-map这个event从db中获取的对象，从接口获取的存在前端db中数据结构如下：1234567891011121314151617181920212223 [ &#123; &quot;key&quot;: &quot;双排六粒&quot;, &quot;value&quot;: &#123; &quot;en-us&quot;: &quot;Double six buttons&quot;, &quot;ja-jp&quot;: &quot;w6*3&quot; &#125; &#125;, &#123; &quot;key&quot;: &quot;下摆(成衣)&quot;, &quot;value&quot;: &#123; &quot;en-us&quot;: &quot;Bottom(garment)&quot;, &quot;ja-jp&quot;: &quot;蹴廻し（上がり寸法）&quot; &#125; &#125;, &#123; &quot;key&quot;: &quot;平钉纽扣&quot;, &quot;value&quot;: &#123; &quot;en-us&quot;: &quot;Level buttons&quot;, &quot;ja-jp&quot;: &quot;平钉钮釦&quot; &#125; &#125;] 这样将数据库中的和页面上的进行merge后使用。当然，我们产品是因为对多个租户，各租户的翻译不同，所以页面上没有往DB里重复保存，采用merge两端的形式。简单的可以只在数据库维护。 改进点 页面文案便于扩展新语言当前三个语言，在数据库采用一行保存一个形式1234567891011121314+----------------+--------------+------+-----+-------------------+-------+| Field | Type | Null | Key | Default | Extra |+----------------+--------------+------+-----+-------------------+-------+| id | varchar(40) | NO | PRI | NULL | || company_id | varchar(40) | NO | | NULL | || lang_key | varchar(255) | NO | | NULL | || lang_value | varchar(255) | NO | | NULL | || lang | varchar(40) | NO | | NULL | || delete_flag | varchar(4) | YES | | 0 | || create_time | timestamp | NO | | CURRENT_TIMESTAMP | || create_user_id | varchar(40) | YES | | NULL | || update_time | timestamp | NO | | CURRENT_TIMESTAMP | || update_user_id | varchar(40) | YES | | NULL | |+----------------+--------------+------+-----+-------------------+-------+ 一个文案的翻译数据如下：12INSERT INTO `t_store_language`(`id`, `company_id`, `lang_key`, `lang_value`, `lang`, `delete_flag`, `create_time`, `create_user_id`, `update_time`, `update_user_id`) VALUES (&apos;611348&apos;, &apos;61&apos;, &apos;常规(9个工作日)&apos;, &apos;Regular (9 working days)&apos;, &apos;en-us&apos;, &apos;0&apos;, &apos;2020-04-01 00:00:00&apos;, NULL, &apos;2020-04-01 00:00:00&apos;, NULL);INSERT INTO `t_store_language`(`id`, `company_id`, `lang_key`, `lang_value`, `lang`, `delete_flag`, `create_time`, `create_user_id`, `update_time`, `update_user_id`) VALUES (&apos;611359&apos;, &apos;61&apos;, &apos;常规(9个工作日)&apos;, &apos;普通（９稼動日）&apos;, &apos;ja-jp&apos;, &apos;0&apos;, &apos;2020-04-01 00:00:00&apos;, NULL, &apos;2020-04-01 00:00:00&apos;, NULL); 这个是便于扩展的，而页面上就不是那样的，如同上面的language-map，如果再增加一门比如韩语的话，需要逐项在原来的数据上修改，不利于扩展。 改进方向：一个语音一个map，最后将多个语言的文案进行合并 仓促下没有考虑太多，如有更好的方案，欢迎交流。QQ：389709260]]></content>
      <categories>
        <category>clojurescript</category>
      </categories>
      <tags>
        <tag>clojurescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shadow-cljs编译的clojurescript-antd项目使用less实现运行时主题切换]]></title>
    <url>%2F2020%2F03%2F21%2Fclojurescript-antd%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8less%E5%AE%9E%E7%8E%B0%E8%BF%90%E8%A1%8C%E6%97%B6%E4%B8%BB%E9%A2%98%E5%88%87%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[项目页面上动态切换主题 简书地址 最近公司的电商定制平台的项目继上了国际化，又要搞多主题了，又让我练了一把手。 实现了，也就那么回事，但是动手之前的犹豫和无思路也着实让我慌了一逼。 需求分析看了antd官网上定制主题上的主题介绍，也看了其他博主的一些手段，比较多的还是打包时将某些主题色打包到代码里，运行起来就是这个主题色。 一来这个方式是静态的，通过打包之前去设置一些config，不是最终想要的，二来里面的介绍要么就是借助webpack，要么就是用Umi。巧的是我们项目用clojurescript开发，只用了antd的component，并没有用到Antd Pro后台的所有功能，所以官网的介绍对我来说就是个大大的“0️⃣” 运行时切换主题，显然只在编译时打包less是不够的的，必须是走在浏览器端动态修改less的方案。 有了目的就好办了，对于我一个前端菜鸡来说，分析到这一步已经涨知识了。 下面进入解决方案正题。 美丽的插件首先迎面走来的，昂首挺胸的美女就是antd-theme-generator，非常感谢，帮大忙了。 核心代码就补贴了，作者太懒，不论是github还是npm库里，这个插件的README.md文件写的有点马虎。 参考了简书上antd在线换肤定制功能这位仁兄的介绍，我的代码做了如下改动 1. 增加依赖1npm i antd-theme-generator --save 2. 引入文件，根据我的项目修改文件内容在resources/public下新建less目录，创建2个文件 main.less 1//内容为空就行，防止生成color.less报错 vars.less 12345678910@import &quot;~antd/lib/style/themes/default.less&quot;; //引入antd的变量文件，实现变量的覆盖@primary-color: #800019;@link-color: #800019;@btn-primary-bg:#800019;//color.less中加入css原生变量：--PC:root &#123; --PC: @primary-color; --BPB: @btn-primary-bg; &#125; 项目根目录新建color.js文件，内容如下： 12345678910111213141516171819202122232425262728const path = require(&apos;path&apos;);const &#123; generateTheme, getLessVars &#125; = require(&apos;antd-theme-generator&apos;);const options = &#123; stylesDir: path.join(__dirname, &apos;./resources/public/less&apos;), //对应具体位置 antDir: path.join(__dirname, &apos;./node_modules/antd&apos;), //对应具体位置 varFile: path.join(__dirname, &apos;./resources/public/less/vars.less&apos;), //对应具体位置 mainLessFile: path.join(__dirname, &apos;./resources/public/less/main.less&apos;), //对应具体位置 themeVariables: [ &apos;@primary-color&apos;, &apos;@secondary-color&apos;, &apos;@text-color&apos;, &apos;@text-color-secondary&apos;, &apos;@heading-color&apos;, &apos;@layout-body-background&apos;, &apos;@btn-primary-bg&apos;, &apos;@layout-header-background&apos; ], indexFileName: &apos;index.html&apos;, outputFilePath: path.join(__dirname, &apos;./resources/public/css/color.less&apos;),&#125;generateTheme(options).then(less =&gt; &#123; console.log(&apos;Theme generated successfully&apos;); &#125;) .catch(error =&gt; &#123; console.log(&apos;Error&apos;, error); &#125;); 修改index.html文件，如下 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;cn&quot;&gt;&lt;head&gt; &lt;title&gt;门店定制系统&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;meta content=&quot;width=device-width, initial-scale=1.0&quot; name=&quot;viewport&quot; /&gt; &lt;link href=&quot;/css/antd.min.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt; &lt;link href=&quot;/css/redantd.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt; &lt;link href=&quot;/css/color.less&quot; type=&quot;text/css&quot; rel=&quot;stylesheet/less&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;!--这个代码不能放在最后--&gt;&lt;script&gt; window.less = &#123; async: false, env: &apos;production&apos; &#125;;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/less.js/2.7.2/less.min.js&quot;&gt;&lt;/script&gt;&lt;!-- Our JavaScript will modify the DOM inside this element --&gt;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;!-- All our ClojureScript gets compiled into this file --&gt;&lt;script&gt; document.write(&quot;&lt;script type=&apos;text/javascript&apos; src=&apos;/js/app.js?v=&quot;+Math.random()+&quot;&apos; type=&apos;text/javascript&apos;&gt;&lt;\/script&gt;&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 修改package.json，命令前面增加node color 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node color &amp;&amp; shadow-cljs server&quot;, &quot;build&quot;: &quot;node color &amp;&amp; shadow-cljs release app&quot;&#125; 3. 切换测试项目运行后页面比如页面有个Button的type=”primary”那它默认是红色的。 在浏览器的控制台执行如下命令1234567window.less.modifyVars( &#123; &apos;@primary-color&apos;: &apos;#722ed1&apos;, &apos;@link-color&apos;: &apos;#722ed1&apos;, &apos;@btn-primary-bg&apos;: &apos;#722ed1&apos;, &#125;) 会发现颜色变成了酱紫色。 到此，实现逻辑修改完。 在clojurescript中实现动态切换页面view部分在页面布局文件的右上角加了个切换下拉按钮。12345678910111213141516171819202122232425262728293031(def ^:private theme-map &#123;:#800019 &quot;喜庆红&quot; :#4880FF &quot;拂晓蓝&quot;&#125;);; 主题菜单(defn dropdown-theme [] [:&gt; ant/Menu &#123;:className &quot;menu&quot; :onClick (fn [menu] (let [value (js-&gt;clj menu :keywordize-keys true)] (rf/dispatch [:theme/generate-theme (:key value)])))&#125; [:&gt; MenuItem &#123;:key &quot;#800019&quot; :title (:#800019 theme-map) :style &#123;:background &quot;#800019&quot; :color &quot;white&quot; :border-radius &quot;5px&quot;&#125;&#125; [:span (i18n-str (:#800019 theme-map))]] [:&gt; MenuItem &#123;:key &quot;#4880FF&quot; :title (:#4880FF theme-map) :style &#123;:background &quot;#4880FF&quot; :color &quot;white&quot; :border-radius &quot;5px&quot;&#125;&#125; [:span (i18n-str (:#4880FF theme-map))]]]);;在某个view组件里写入内容[:div &#123;:style &#123;:margin-left 20 :font-size &quot;14px&quot; :font-family &quot;PingFangSC-Medium,PingFang SC&quot; :font-weight 500 :color &quot;rgba(0,0,0,1)&quot;&#125;&#125; [:&gt; ant/Dropdown &#123;:overlay (reagent.core/as-element [dropdown-theme])&#125; [:div &#123;:className &quot;theme-setting&quot;&#125; [:span (i18n-str &quot;颜色&quot;)]]]] 切换事件123456789101112131415161718192021222324252627282930313233343536373839(ns store-pc.common.theme (:require [re-frame.core :as rf] [kee-frame.core :as kf] [store-pc.common.storage :as storage]))(defn- gen-theme [color] #js&#123; &quot;@primary-color&quot; color &quot;@link-color&quot; color &quot;@btn-primary-bg&quot; color &#125;)(kf/reg-controller :theme-controller &#123;:params (constantly true) :start [::set-theme-by-local]&#125;);;如果页面刷新的话从localstorage里获取(kf/reg-event-fx ::set-theme-by-local (fn [_ [_ _]] (when-not @(rf/subscribe [:theme/now-theme]) (rf/dispatch [:theme/generate-theme (storage/get-current-theme)]) )))(rf/reg-event-fx :theme/generate-theme (fn [&#123;:keys [db]&#125; [_ color]] (js/console.log &quot;设置主题为:&quot; (gen-theme color)) (.modifyVars (.-less js/window ) (gen-theme color)) (storage/set-current-theme color) &#123;:db (assoc-in db [:global :theme] color)&#125;))(rf/reg-sub :theme/now-theme (fn [db] (get-in db [:global :theme]))) 里面唯一用到的框架外的就是存储localstore和从localstore里拿值，核心代码就两个：12345(defn get-local-storage [key] (.getItem js/localStorage key))(defn set-local-storage [key value] (.setItem js/localStorage key value)) 遇到的问题 index.html里一开始引入的less.min.js版本太高，得降成2.7.2才不会报错，否则modifyVars有错误提示 js里的window.less.modifyVars(obj)这句调用在cljs里不会写 上面一条解决了，但是modifyVars的参数不会传，后来查到原来是用 #js定义的就是原始js的意思。 参考antd在线换肤定制功能themeChanger demo]]></content>
      <categories>
        <category>cljs</category>
      </categories>
      <tags>
        <tag>antd</tag>
        <tag>cljs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海尔创客汇笔记----安卓上adb的使用笔记]]></title>
    <url>%2F2020%2F03%2F01%2F%E6%B5%B7%E5%B0%94%E5%88%9B%E5%AE%A2%E6%B1%87%E7%AC%94%E8%AE%B0----%E5%AE%89%E5%8D%93%E4%B8%8Aadb%E7%9A%84%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[使用adb命令抓包等简书地址 抓包1adb logcat -v time tag 1&gt;F:\log.txt adb logcat -b main -v time&gt;app.log 打印应用程序的logadb logcat -b radio -v time&gt; radio.log 打印射频相关的log，SIM STK也会在里面，modem相关的ATcommand等，当然跟QXDM差的很远了。adb logcat -b events -v time 打印系统事件的日志，比如触屏事件。。。//android log的抓取adb logcat//kernel log的抓取adb shell cat /proc/kmsg//log 信息的保存mkdir /data/anrlogcat *：V &gt; /data/anr/androiddemsg &gt;/data/anr/kernel//按ctrl+c结束log输出adb pull /data/anr ./log/ 手动彻底卸载appD:\Git\pingtai\Portal&gt;adb uninstall com.haierchuangkeappFailure [DELETE_FAILED_INTERNAL_ERROR]在本地用管理员身份运行cmd命令行工具，使用adb shell进入手机应用命令行，根据提示 ：D:\Git\pingtai\Portal&gt;adb shellM1E:/ $ cd /data/local/tmp/M1E:/data/local/tmp $ ll/system/bin/sh: ll: not found127|M1E:/data/local/tmp $ lscom.haierchuangkeapp com.haierchuangkeapp-build-id.txtM1E:/data/local/tmp $ rm -rf cocom.haierchuangkeapp com.haierchuangkeapp-build-id.txtM1E:/data/local/tmp $ rm -rf com.haierchuangkeapp*M1E:/data/local/tmp $ 然后手动推送安装包，然后安装：D:\Git\pingtai\Portal\android&gt;adb push D:\Git\pingtai\Portal\android\app\build\outputs\apk\debug\app-debug.apk /data/local/tmp/com.haierchuangkeappD:\Git\pingtai\Portal\android\app\build\outputs\apk\debug\app-debug.apk: 1 file pushed. 13.0 MB/s (64737700 bytes in 4.756s) D:\Git\pingtai\Portal\android&gt;D:\Git\pingtai\Portal\android&gt;D:\Git\pingtai\Portal\android&gt;adb shell pm install -t -r “/data/local/tmp/com.haierchuangkeapp”Success]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[excel操作备忘]]></title>
    <url>%2F2020%2F02%2F29%2Fexcel%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98%2F</url>
    <content type="text"><![CDATA[把excel里的数据进行某些处理，记录一下，以后好复制粘贴 简书地址 1. excel数字按长度补0，并转换成文本在海尔这段时间从数据库里导出来的员工工号8位数，因为有些0开头的，导出到excel里后前面的0就没有了。可以新建一列，然后以导出的那列为基础数据用公式处理成想要的，补齐8位，前面补0。公式如下：1=REPT(0,8-LEN(A2))&amp;A2 2. excel里将数据拼接成语句有时候需要将excel里的数据，拼接成想要的json或者sql。 拼接成json或者map1=CONCATENATE(&quot;&quot;&quot;&quot;,B2,&quot;&quot;&quot;&quot;,&quot; &#123;:en-us &quot;&quot;&quot;,C2,&quot;&quot;&quot; :ja-jp &quot;&quot;&quot;,D2,&quot;&quot;&quot;&#125;&quot;) 目标内容比如：&quot;优裁精选&quot; {:en-us &quot;Retail&quot; :ja-jp &quot;優れた裁断&quot;} 根据表头，拼接成sql的insert语句1=CONCATENATE(&quot;INSERT INTO t_sys_user (`&quot;&amp;A$1&amp;&quot;`, `&quot;&amp;B$1&amp;&quot;`, `&quot;&amp;C$1&amp;&quot;`, `&quot;&amp;D$1&amp;&quot;`, `&quot;&amp;E$1&amp;&quot;`, `&quot;&amp;F$1&amp;&quot;`) VALUES (&apos;&quot;&amp;A3&amp;&quot;&apos;,&quot;&amp;&quot; &apos;&quot;&amp;B3&amp;&quot;&apos;,&apos;&quot;&amp;C3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;D3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;E3&amp;&quot;&apos;,&quot;&amp;&quot;&apos;&quot;&amp;F3&amp;&quot;&apos;);&quot;)]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>excel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leiningen clojure web项目使用本地jar包]]></title>
    <url>%2F2020%2F02%2F06%2Fclojure%20lein%20use%20local%20jar%2F</url>
    <content type="text"><![CDATA[leiningen clojure web项目使用本地jar简易方式 简书地址 用luminusweb模板创建的clojure web服务端项目如何使用本地的jar。 我的方案将jar放在项目里的某个目录下，推荐resources下，然后在project.clj里加入引用即可。1:resource-paths [&quot;resources/jars/sheet-clone-0.1.jar&quot;] 使用的时候像跟调用其他第三方的java sdk一样使用123(:import (com.alibaba.excel EasyExcel #_ExcelWriter) [com.hczt.sheetclone.utils CloneExcelByPoi] [org.apache.poi.xssf.usermodel XSSFWorkbook]) 其他方案：参考Paul大神的文章using-local-jars-with-leiningen贴一下主要内容。Create a directory in the project.mkdir maven_repository.Add local jars to this repository.For example, this command adds the jaad-0.8.3.jar file to the maven repository.1mvn install:install-file -Dfile=jaad-0.8.3.jar -DartifactId=jaad -Dversion=0.8.3 -DgroupId=jaad -Dpackaging=jar -DlocalRepositoryPath=maven_repository Add the following to project.clj1:repositories &#123;&quot;local&quot; ~(str (.toURI (java.io.File. &quot;maven_repository&quot;)))&#125; Now a regular lein deps should work1234lein depsDownloading: jaad/jaad/0.8.3/jaad-0.8.3.pom from localTransferring 0K from local[WARNING] *** CHECKSUM FAILED - Error retrieving checksum file for jaad/jaad/0.8.3/jaad-0.8.3.pom - IGNORING The warning can be ignored, since the jar will be checked into the project and not downloaded from the internet.]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>leiningen</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot项目提示 No converter found for return value of type:class java.util.LinkedHashMap,@RequestBody无效]]></title>
    <url>%2F2020%2F02%2F03%2Fspringboot-requestbody%E6%B3%A8%E8%A7%A3%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%2F</url>
    <content type="text"><![CDATA[springboot项目提示Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type ‘application/json;charset=UTF-8’ not supported]Resolved [org.springframework.http.converter.HttpMessageNotWritableException: No converter found for return value of type: class java.util.LinkedHashMap]@RequestBody注解直接无效简书地址 先说解决方案，在pom中加入如下依赖，解决。12345678910111213141516&lt;!--json--&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.9.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;2.9.9&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.9&lt;/version&gt;&lt;/dependency&gt; 说起来，这可真真是一个坑爹的问题，困扰了一天，烦了一天，我真以为我大半年没碰java，连新建个sprintboot的rest接口用完美的intellij idea这么高大上的工具都创建不出来了呢。 接口看看错误吧.两个连入门都算不上的接口123456789101112131415161718192021222324252627282930313233343536package com.marvin.demo.controller;import com.marvin.demo.vo.DemoEntity;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RestController;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * * @Author mahaiqiang * @Create 2020/2/1 11:06 下午 * @Description TODO **/@Slf4j@RestControllerpublic class DemoController &#123; @GetMapping(&quot;/demo1&quot;) public DemoEntity demo1() &#123; log.info(&quot;第一个get接口&quot;); DemoEntity de = new DemoEntity(); de.setName(&quot;李四&quot;); return de; &#125; @PostMapping(&quot;/demo2&quot;) public DemoEntity demo2(@RequestBody DemoEntity entity) &#123; log.info(&quot;第一个post接口, 参数:&#123;&#125;&quot;, entity); entity.setName(&quot;Hello, &quot; + entity.getName()); return entity; &#125;&#125; 错误GET是正常的，但是POST的这个接口，因为用了@RequestBody注解，要转换json，所以就死活不行。错误是这样的：122020-02-03 22:55:34.382 WARN 40841 --- [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content type &apos;application/json;charset=UTF-8&apos; not supported]2020-02-03 22:55:34.405 WARN 40841 --- [nio-8080-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotWritableException: No converter found for return value of type: class java.util.LinkedHashMap] 出这个错我先上网查，有个推荐找不到了说引入jackson看日志我引入的是2.9.6不知道是不是还少引用了啥，反正没成。 让别的同事试了下，人家说啥也不用干，导入进去就能运行，日了狗了，咋回事，肯定就是环境问题了呗。 于是就jdk、maven、intellij idea，重新配置，甚至重装，都搞一遍也没办法了。 第二天继续按照错误提示找，找到个原来就翻出来过的链接，加了依赖后莫名其妙好了，而且删除了依赖立马就能复现问题了。 正常预期是这样的12345678910111213141516171819202122232425com.marvin.demo.DemoApplication . ____ _ __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v2.2.4.RELEASE)2020-02-03 22:51:16.565 INFO 40753 --- [ main] com.marvin.demo.DemoApplication : Starting DemoApplication on 192.168.0.105 with PID 40753 (/Users/mahaiqiang/git/mygitrepo/secret-demo/target/classes started by mahaiqiang in /Users/mahaiqiang/git/mygitrepo/secret-demo)2020-02-03 22:51:16.571 INFO 40753 --- [ main] com.marvin.demo.DemoApplication : No active profile set, falling back to default profiles: default2020-02-03 22:51:17.751 INFO 40753 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)2020-02-03 22:51:17.763 INFO 40753 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]2020-02-03 22:51:17.764 INFO 40753 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.30]2020-02-03 22:51:17.838 INFO 40753 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext2020-02-03 22:51:17.838 INFO 40753 --- [ main] o.s.web.context.ContextLoader : Root WebApplicationContext: initialization completed in 1205 ms2020-02-03 22:51:18.043 INFO 40753 --- [ main] o.s.s.concurrent.ThreadPoolTaskExecutor : Initializing ExecutorService &apos;applicationTaskExecutor&apos;2020-02-03 22:51:18.230 INFO 40753 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &apos;&apos;2020-02-03 22:51:18.234 INFO 40753 --- [ main] com.marvin.demo.DemoApplication : Started DemoApplication in 2.039 seconds (JVM running for 2.681)2020-02-03 22:51:29.934 INFO 40753 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet &apos;dispatcherServlet&apos;2020-02-03 22:51:29.934 INFO 40753 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet &apos;dispatcherServlet&apos;2020-02-03 22:51:29.942 INFO 40753 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Completed initialization in 8 ms2020-02-03 22:51:30.045 INFO 40753 --- [nio-8080-exec-1] c.marvin.demo.controller.DemoController : 第一个post接口, 参数:DemoEntity(name=a)2020-02-03 22:51:50.866 INFO 40753 --- [nio-8080-exec-3] c.marvin.demo.controller.DemoController : 第一个post接口, 参数:DemoEntity(name=marvin) 这次是百度救了我，我一般用的必应搜索引擎，没想到按照第二个错误百度出来的第一条直接就是解决方案。 但是按照方案说第一条，我的pom文件里已经有spring-boot-starter-web，1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt; 但是还是逼着我加了jackson才好使了。先记录一笔，再慢慢想原因吧，希望日后不会再碰到这么恶心的问题。 感谢SpringBoot2.X 遭遇 No converter found for return value of type: class java.util.LinkedHashMap]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java-jar jar包带环境变量(参数)启动]]></title>
    <url>%2F2020%2F01%2F20%2Fjava-jar%20jar%E5%8C%85%E5%B8%A6%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F(%E5%8F%82%E6%95%B0)%E5%90%AF%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[java -jar启动时加载环境变量 简书地址 需求java工程我们可以编译成jar也可以翻译成war，一般地，war包我会丢到tomcat容器里，启动tomcat来访问服务，端口、SSL证书、日志等等，都托给tomcat。 如果打的是jar包，我通常会用nohup启动，比如生产环境的一些db、redis、第三方secret等不会配置到项目里，今天要记录的便是用nohup java -jar 启动jar包时如何加载环境变量配置的问题。 java语言开发的jar包启动时可以按照如下方式加启动参数。 方式一：-DpropName=propValue这种方式应该很快都能找到1-DpropName=propValue 比如：1java -jar -DdatabaseUrl=&quot;mysql://localhost:3306/pdb?user=root&amp;password=root&quot; -Dapp.key=&quot;123&quot; -Dapp.secret=&quot;xxx&quot; demo.jar 多个参数也可以。 方式二：参数直接跟在命令后面，多个参数之间用空格隔开1java -jar demo.jar JOURNAL_TREENODE_DATA-20190404174502.txt processType=1 这种方式参数就是jar包里主启动类中main方法的args参数，按顺序来 方式三：使用springboot的方式，–propName=propValue方式1java -jar demo.jar --spring.profiles.active=dev --server.port=8181 注意：运行jar包时指定端口：java -jar xxx.jar –server.port=8088若命令行传入的server.port没有作用，服务仍然使用8081端口启动，原因是spring-cloud-config会覆盖命令行传入的参数，这是有意为之， 办法是在web-prod.yml中做点小改动，让“配置”变得“可配置”：加一对花括符1server.port=&#123;port:8081&#125; 用clojure编写的jar里有惊喜在clojure上面的配置就变得诡异了，猜猜下面的配置能不能生效呢？1java -jar -Ddatabase-url=&quot;mysql://localhost:3306/pdb?user=root&amp;password=root&quot; -Dapp.key=&quot;123&quot; -Dapp.secret=&quot;xxx&quot; demo.jar 如果你用cider-conect通过nrepl的端口连接上你的服务，你会发现，这个配置导致database-url的值确实已经改了，但是后面两个没有。 究其原因，我们java从classpath里获取参数使用的是properties形式的，也就是json的格式。这不难理解，spring有它的办法，clojure当然也有自己的方式。 1234&quot;app&quot;: &#123; &quot;key&quot;: &quot;123&quot;, &quot;secret&quot;:&quot;xxx&quot;&#125; 虽然json和我们的edn里map是很像的，但是毕竟是不同，于是要分析下现在的edn里的配置信息他是怎么读取的呢？ 代码里的env在config这个namespace里找到了env1234567(defstate env :start (load-config :merge [(args) (source/from-system-props) (source/from-env)])) cprop加载配置cprop.source这个文件就是用来加载edn文件的1234567891011(defn- env-&gt;path [k] (k-&gt;path k &quot;_&quot; #&quot;__&quot;))(defn read-system-env ([] (read-system-env &#123;&#125;)) ([opts] (-&gt;&gt; (System/getenv) (map (fn [[k v]] [(env-&gt;path k) (str-&gt;value v opts)])) (into &#123;&#125;)))) 从获取的过程看，应该是会把_做为单元节点断开，因此需要改成这样1java -jar -Ddatabase-url=&quot;mysql://localhost:3306/pdb?user=root&amp;password=root&quot; -Dapp_key=&quot;123&quot; -Dapp_secret=&quot;xxx&quot; demo.jar 对应到edn里应该是123&#123;:app &#123;:key &quot;123&quot; :secret &quot;xxx&quot;&#125;&#125; 如果仔细看看cprop这个库就不难理解了。cprop加载配置文件的顺序是 : By default cprop will merge all configurations it can find in the following order:classpath resource configfile on a file system (pointed by a conf system property or by (load-config :file ))custom configurations, maps from various sources, etc.System propertiesENV variables 对于ENV的加载也有明确说明 ENV variables lack structure. The only way to mimic the structure is via use of an underscore character. The _ is converted to - by cprop, so instead, to identify nesting, two underscores can be used. 了解更多详情，请阅读cprop介绍 我的期望像上面的命令如果有20个参数需要在启东时指定，估计看那个命令就疯了，那能不能在启东时指定一个配置文件，比如prod-config.edn之类的呢？我没有找到，如果有就更方便了。 参考cprop]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shadow-cljs多环境多base domin配置(closure-defines篇)]]></title>
    <url>%2F2020%2F01%2F03%2Fshadow-cljs%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%A4%9Abase%20domin%E9%85%8D%E7%BD%AE(closure-defines%E7%AF%87)%2F</url>
    <content type="text"><![CDATA[用shadow-cljs编译代码时使用环境变量实现多编译环境 简书地址 原方案前端有个config.cljs文件，定义了一个domain的函数，指定api接口的base-url，本地开发、测试、生产分别修改成不同地址。类似这样吧：12345678910(ns &lt;&lt;project-ns&gt;&gt;.config);; 测试环境#_(def domain &quot;https://test.url.com&quot;);; 生产环境#_(def domain &quot;https://prod.url.com&quot;);;开发环境(def domain &quot;http://localhost:3000&quot;) 很显然，这个不是长久之计，又不智能，部署时还要修改地址，容易忘记，并且还有时会把修改提交上去。尤其是没有持续集成工具帮助做部署工作的时候。~ 当前方案shadow-cljs用户指南我没有通读，但是从目录看也有环境变量章节看，也有方案。 采用closure-defines的方案，指定多个build id,在不同的build中传入环境变量。1234(ns &lt;&lt;project-ns&gt;&gt;.config);;此处的变量需要修改的请在项目跟目录的shadow-cljs.edn中修改(goog-define domain &quot;http://localhost:3000&quot;) shadow-cljs.edn配置大概这样1234567891011121314151617181920212223242526:builds&#123;:app &#123;:target :browser :output-dir &quot;target/cljsbuild/public/dev/js&quot; :asset-path &quot;/js&quot; :modules &#123;:app &#123;:entries [YOUR-APP.app]&#125;&#125; :devtools &#123;:watch-dir &quot;resources/public&quot; :ignore-warnings true :preloads [re-frisk.preload]&#125; :closure-defines &#123;&quot;re_frame.trace.trace_enabled_QMARK_&quot; true&#125; :dev &#123;:closure-defines &#123;&lt;&lt;project-ns&gt;&gt;.config/domain &quot;http://localhost:3000&quot;&#125;&#125;&#125; :test-app &#123;:target :browser :output-dir &quot;target/cljsbuild/public/test/js&quot; :asset-path &quot;/js&quot; :modules &#123;:app &#123;:entries [YOUR-APP.app]&#125;&#125; :release &#123;:closure-defines &#123;&lt;&lt;project-ns&gt;&gt;.config/domain &quot;https://test.url.com&quot;&#125;&#125;&#125; :prod-app &#123;:target :browser :output-dir &quot;target/cljsbuild/public/prod/js&quot; :asset-path &quot;/js&quot; :modules &#123;:app &#123;:entries [YOUR-APP.app]&#125;&#125; :release &#123;:closure-defines &#123;&lt;&lt;project-ns&gt;&gt;.config/domain &quot;https://prod.url.com&quot;&#125;&#125;&#125;&#125; 好处 可以定义多个变量，比如从多个api地址 可以配置无限多个 不好处 如果有新增地址，需要修改多个builds的配置 地址明文可见，想做部署层的保密的话，不可以。 其他方案还是在这篇文章里，后面提到了别的方案。当前来说上面的不利之处还不是个问题，用到时再调整其他方案。 Conditional Reading overriding-from-the-cli using-environment-variables]]></content>
      <categories>
        <category>shadow-cljs</category>
      </categories>
      <tags>
        <tag>clojurescript</tag>
        <tag>shadow-cljs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojurescript编译后合并css文件解决缓存问题]]></title>
    <url>%2F2020%2F01%2F02%2Fclojurescript%E7%BC%96%E8%AF%91%E5%90%8E%E5%90%88%E5%B9%B6css%E6%96%87%E4%BB%B6%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[clojurescript项目用shadow-cljs编译后将所有css文件压缩成一个，并加版本号访问较少缓存。 简书地址 背景本篇跟electron安装包里封装浏览器直接访问URL配置有关。 我们目前的配置用shadow-cljs release app 打包好js文件后，需要将入口文件、图片、css、js一起copy到部署服务器。其中css是散碎的各个页面自行添加的样式文件。但是用electron直接访问URL以后，css总是被缓存下来，这样就导致了一个系统修改的样式后在应用里打开不生效的问题。 方案将在部署 时将众多css文件内容合并到一个css文件，然后在入口的index.html里引入这个被合并的css文件，同时加上版本号，禁止缓存。 实施 第一步，准备脚本因为使用jenkins发布，所以先搞一个合并文件的脚本(merge_css.sh)，等着在jenkins里远端执行一下。内容如下：12345678910111213141516171819202122232425#!/bin/bash#获取第一个参数,目标目录srcpath=$1#第二个参数，输出文件target_file=$2#先删除原目标文件rm -rf $&#123;target_file&#125;;function writeByDir()&#123; echo $1 for file in $1/* do if test -f $file then echo $file cat "$file" &gt;&gt; "$&#123;target_file&#125;" echo "" &gt;&gt; "$&#123;target_file&#125;" else writeByDir $file fi done&#125;writeByDir $&#123;srcpath&#125; 很简单，连参数合理性都没有校验，自己用自己知道就行。 第二步，远端执行在jenkins里，跟原来一样，将css、img、index.html、app.js核心文件rsync -rzve 到远端以后，再构建最后加一个合并的shell1ssh -p2020 root@*.*.*.* 'bash -s ' &lt; /opt/auto-deploy-scripts/merge_css.sh /opt/site/project/css /opt/site/project/css/main.css 在原来的css文件下，将生成一个main.css文件。 第三步，使用合并的css文件1234567891011121314151617181920212223&lt;html lang="cn"&gt;&lt;head&gt; &lt;title&gt;平台&lt;/title&gt; &lt;meta charset="utf-8"/&gt; &lt;meta content="width=device-width, initial-scale=1" name="viewport"/&gt; &lt;link href="https://cdn.bootcss.com/antd/3.18.0/antd.min.css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- Our JavaScript will modify the DOM inside this element --&gt;&lt;div id="app"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt; document.write("&lt;link rel='stylesheet' type='text/css' href='css/main.css?v="+new Date().getTime()+"'&gt;");&lt;/script&gt;&lt;script type="text/javascript"&gt; document.write("&lt;script type='text/javascript' src='doctorjs/app.js?v="+new Date().getTime()+"' type='text/javascript'&gt;&lt;\/script&gt;");&lt;/script&gt;&lt;/Body&gt;&lt;/html&gt; 经检查，已生效。完！！！ 遗留问题 本地开发因为没有压缩成一个css文件，所以可能会提示main.css下载404，可以创建个同名空文件 因为单个页面还是引用的自己的css文件，所以那些碎片css文件加载完成前页面元素还是聚集在view的左上角。加上合并的css，相当于双重样式。 还是把css都复制到了远端，做好了当然是编译时就编译成一个文件，并且去重，压缩等等，能集成webpack了再搞 参考Shell脚本合并文本文件]]></content>
      <categories>
        <category>clojurescript</category>
      </categories>
      <tags>
        <tag>clojurescript</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[electron安装包里封装浏览器直接访问URL配置]]></title>
    <url>%2F2019%2F12%2F31%2Felectron%E5%AE%89%E8%A3%85%E5%8C%85%E9%87%8C%E5%B0%81%E8%A3%85%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEURL%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在下载的electron里直接访问某个url地址 简书地址 也是因为clojurescript编译后用electron打包成桌面应用安装程序这篇没有解决问题，所以考虑直接用electron打个chrome浏览器进去，然后制定访问的网页，代替本地资源。 话说前一篇之所以没有成功，也不是完全解决不了，而是因为不想折腾了，解决的话思路应该有两条： figwheel不支持npm程序，换成shadow-cljs之类的编译器 增加electron依赖，在应用层触发更新检查 这篇说明一下直接运行URL的配置和注意事项。 1. 下载electron的压缩包https://electronjs.org/releases/stable 下载解压，内部目录大概如此 主要运行时文件就是resources/default_app.asar 2. 安装asar包解压缩命令1yum install -g asar 两个命令(asar –help)：12asar pack app default_app.asar asar extract|e &lt;archive&gt; &lt;dest&gt; 其他命令自行百度。 3.核心文件核心文件就是打包成resources/default_app.asar所需要的文件。在electron的项目目录下，创建一个文件夹app ，里面新建两个文件。 3.1 main.js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051// app 模块是为了控制整个应用的生命周期设计的。// BrowserWindow 类让你有创建一个浏览器窗口的权力。const &#123;app, BrowserWindow, Menu, ipcMain&#125; = require(&apos;electron&apos;);const nativeImage = require(&apos;electron&apos;).nativeImage;var overlay = nativeImage.createFromPath(&apos;icon.png&apos;);const mainWindowURL = &apos;https://www.baidu.com&apos;;let mainWindow;//api:https://wizardforcel.gitbooks.io/electron-doc/content/api/browser-window.htmlfunction createWindow () &#123; console.log(&quot;createWindow......&quot;); mainWindow = new BrowserWindow(&#123; // fullscreen: true, maximizable: true, //支持最大化 show: false, //为了让初始化窗口显示无闪烁，先关闭显示，等待加载完成后再显示。 // icon: &quot;https://medical.3vyd.com/alk/prod/pc/icon/icon.ico&quot; &#125;) // Emitted when the window is closed. mainWindow.on(&apos;closed&apos;, function () &#123; console.log(&quot;closed......&quot;); mainWindow = null; &#125;) // mainWindow.once(&apos;ready-to-show&apos;, () =&gt; &#123; //开启这个以后点击了图片虽然没有白屏，但是会感觉不到点了没点 mainWindow.maximize(); //打开时最大化打开，不是全屏，保留状态栏 // &#125;) // mainWindow.setOverlayIcon(overlay, &quot;医敏&quot;) mainWindow.setTitle(&quot;过敏性疾病高端用户平台&quot;); mainWindow.setAutoHideMenuBar(true);//自动隐藏菜单 mainWindow.loadURL(mainWindowURL); // app.commandLine.appendSwitch(&quot;--disable-http-cache&quot;) 禁用缓存 // mainWindow.webContents.openDevTools(&#123;mode:&apos;bottom&apos;&#125;); mainWindow.show();&#125;app.on(&apos;ready&apos;, function() &#123; console.log(&quot;ready......&quot;); createWindow();&#125;);// Quit when all windows are closed.app.on(&apos;window-all-closed&apos;, function () &#123; // On OS X it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q if (process.platform !== &apos;darwin&apos;) &#123; app.quit(); &#125;&#125;) 3.2 package.json12345&#123; &quot;name&quot;: &quot;electron&quot;, &quot;productName&quot;: &quot;Electron&quot;, &quot;main&quot;: &quot;main.js&quot;&#125; 注意：productName的值千万不需要改。 4. 打包在electron/resources目录下执行：12rm -rf default_app.asarasar pack app default_app.asar 也就是用自己心大的asar文件替换原来旧的。 5. 测试在windows上访问该exe应用，一般应该没有问题打开百度的。 问题： electron缓存问题浏览器访问的资源都会被缓存，几种方式避免缓存。 在css或者js等资源后面加版本号 打包时禁用缓存，参考：electron 如何禁用本地缓存？强制刷新缓存方案 清除本地cache windows上位置：The Electron stores it’s cache in these folders:Windows:C:\Users\\AppData\Roaming\\CacheLinux:/home//.config//CacheOS X:/Users//Library/Application Support//Cache 升级问题因为直接访问url，所以不存在上一篇说的版本更新问题。]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>clojurescript</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojurescript编译后用electron打包成桌面应用安装程序]]></title>
    <url>%2F2019%2F12%2F22%2Fclojurescript%E7%BC%96%E8%AF%91%E5%90%8E%E7%94%A8electron%E6%89%93%E5%8C%85%E6%88%90%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[用electron把clojurescript编译后的静态资源文件打包成windows安装程序 简书地址 clojurescript最终还是编译成javascript在浏览器执行，本文描述的是在项目本身在C/S环境上运行没有问题的情况下，怎么将这些资源文件用electron打包成windows或者mac的B/S应用。 技术语言和工具： clojurescript electronjs electron-builder 第一步：打包cljs成可通过浏览器浏览的网络资源我这个项目是用figwheel编译的，打包命令如下:1lein cljsbuild once min-doctor 如果是用shadow-cljs编译项目的话，命令应该是这样的：1shadow-cljs release app 重点来了：这些编译文件只是将cljs打包成app.js文件，目录一般在target目录的某个问题，这两种方式都是这样的。但是众所周知，运行一个网页只要一个js肯定是不行的，在用luminus创建出来的模板里，css和image文件都在resource/public目录下，包括入口的index.html文件。 用nginx等部署时需要将这些文件也一并copy到nginx服务器上，这一步就不说了。 第二步：将这些网络资源打包成electron安装程序有了上面的入口文件，css和image，以及唯一的一个js文件，我们只需要将这些文件和electron的配置文件放在一起便可以了进行下一步了。 1. 构建electron的打包目录我在项目根目录创建了个electron文件夹，会将资源文件copy到这个位置下。所以整个项目结构大概如下：1234567891011121314151617181920├── project │ ├── resource │ │ └──public │ │ └── img │ │ ├── logo.png │ │ ├── user-header.png │ │ └── css │ │ └── js │ │ └── index.html │ ├── src │ ├── electron │ │ └──public │ │ └── img │ │ ├── logo.png │ │ ├── user-header.png │ │ └── css │ │ └── js │ │ └── index.html │ │ └──package.json │ │ └──main.js 其中electron下的public文件夹内容结构就跟往nginx部署时是一样的，main.js和package.json是为electron手动加入的。main.js是win的默认行为的指定文件，内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// Modules to control application life and create native browser windowconst &#123;app, BrowserWindow&#125; = require(&apos;electron&apos;)// Keep a global reference of the window object, if you don&apos;t, the window will// be closed automatically when the JavaScript object is garbage collected.let mainWindowconst mainWindowURL = &apos;http://localhost:10386/doc.html&apos;;function createWindow () &#123; // Create the browser window. mainWindow = new BrowserWindow(&#123; //fullscreen: true, webPreferences: &#123; &#125;, &#125;) // and load the index.html of the app.// mainWindow.loadFile(&apos;index.html&apos;) mainWindow.loadURL(mainWindowURL) // Emitted when the window is closed. mainWindow.on(&apos;closed&apos;, function () &#123; // Dereference the window object, usually you would store windows // in an array if your app supports multi windows, this is the time // when you should delete the corresponding element. mainWindow = null &#125;)&#125;function bootstrapServer() &#123; const handler = require(&apos;serve-handler&apos;); const http = require(&apos;http&apos;); const server = http.createServer((request, response) =&gt; &#123; // You pass two more arguments for config and middleware // More details here: https://github.com/zeit/serve-handler#options return handler(request, response, &#123; public: &apos;resources/app.asar/public&apos;, &#125;); &#125;) server.listen(10386, () =&gt; &#123; createWindow() &#125;);&#125;app.on(&apos;ready&apos;, bootstrapServer)// Quit when all windows are closed.app.on(&apos;window-all-closed&apos;, function () &#123; // On OS X it is common for applications and their menu bar // to stay active until the user quits explicitly with Cmd + Q if (process.platform !== &apos;darwin&apos;) &#123; app.quit() &#125;&#125;)app.on(&apos;activate&apos;, function () &#123; // On OS X it&apos;s common to re-create a window in the app when the // dock icon is clicked and there are no other windows open. if (mainWindow === null) &#123; createWindow() &#125;&#125;)// In this file you can include the rest of your app&apos;s specific main process// code. You can also put them in separate files and require them here. package.json的内容如下：12345678910111213141516171819202122232425262728293031323334&#123; &quot;name&quot;: &quot;eallergy&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;license&quot;: &quot;&quot;, &quot;main&quot;: &quot;main.js&quot;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;electron .&quot;, &quot;dist&quot;: &quot;electron-builder -c.extraMetadata.main=main.js&quot;, &quot;dist-32&quot;: &quot;electron-builder -c.extraMetadata.main=main.js --ia32&quot; &#125;, &quot;build&quot;: &#123; &quot;productName&quot;: &quot;eallergy&quot;, &quot;appId&quot;: &quot;alk.doctor&quot;, &quot;copyright&quot;:&quot;红创科技&quot;, &quot;directories&quot;: &#123; &quot;buildResources&quot;: &quot;public&quot; &#125;, &quot;files&quot;: [ &quot;main.js&quot;, &quot;public/**/*&quot;, &quot;node_modules/**/*&quot; ], &quot;mac&quot;: &#123; &quot;category&quot;: &quot;your.app.category.type&quot; &#125; &#125;, &quot;devDependencies&quot;: &#123; &quot;electron&quot;: &quot;^5.0.7&quot;, &quot;electron-builder&quot;: &quot;^21.0.15&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;serve-handler&quot;: &quot;^6.1.0&quot; &#125;&#125; 将资源文件copy到electron/public/位置后执行yarn和yarn dist命令（执行出错的请看下面的解决方案）。 2. 打包执行打包之前还有点环境准备工作 安装node安装yarn安装electron安装electron-builder 然后可以在electron目录下载执行打包操作1234567891011121314151617181920212223242526# yarnyarn install v1.21.1warning package.json: License should be a valid SPDX license expressionwarning eallergy@1.0.0: License should be a valid SPDX license expression[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...Done in 13.47s.$$$$ yarn distyarn run v1.21.1warning package.json: License should be a valid SPDX license expression$ electron-builder -c.extraMetadata.main=main.js • electron-builder version=21.0.15 os=10.0.18363 • loaded configuration file=package.json ("build" field) • description is missed in the package.json appPackageFile=Z:\git\redcreation\alk-wxapi\alk-web\electron\package.json • author is missed in the package.json appPackageFile=Z:\git\redcreation\alk-wxapi\alk-web\electron\package.json • packaging platform=win32 arch=x64 electron=5.0.7 appOutDir=dist\win-unpacked • default Electron icon is used reason=application icon is not set • building target=nsis file=dist\eallergy Setup 1.0.0.exe archs=x64 oneClick=true perMachine=false • building block map blockMapFile=dist\eallergy Setup 1.0.0.exe.blockmapDone in 45.81s.$ 3. 打包文件 electron和electron-builder相关文件安装失败解决方案错误版本不尽相同，但是大概如下吧12345678910111213141516171819202122232425262728293031323334353637$ yarn distyarn run v1.21.1warning package.json: License should be a valid SPDX license expression$ electron-builder -c.extraMetadata.main=main.js • electron-builder version=21.0.15 os=10.0.18363 • loaded configuration file=package.json ("build" field) • description is missed in the package.json appPackageFile=Z:\git\redcreation\alk-wxapi\alk-web\electron\package.json • author is missed in the package.json appPackageFile=Z:\git\redcreation\alk-wxapi\alk-web\electron\package.json • packaging platform=win32 arch=x64 electron=5.0.7 appOutDir=dist\win-unpacked • default Electron icon is used reason=application icon is not set • building target=nsis file=dist\eallergy Setup 1.0.0.exe archs=x64 oneClick=true perMachine=false • downloading url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.3.2/nsis-3.0.3.2.7z size=1.4 MB parts=1 • retrying attempt=1 • retrying attempt=2 • retrying attempt=3 ⨯ part download request failed with status code 403github.com/develar/app-builder/pkg/download.(*Part).doRequest /Volumes/data/Documents/app-builder/pkg/download/Part.go:126github.com/develar/app-builder/pkg/download.(*Part).download /Volumes/data/Documents/app-builder/pkg/download/Part.go:67github.com/develar/app-builder/pkg/download.(*Downloader).DownloadResolved.func1.1 /Volumes/data/Documents/app-builder/pkg/download/downloader.go:107github.com/develar/app-builder/pkg/util.MapAsyncConcurrency.func2 /Volumes/data/Documents/app-builder/pkg/util/async.go:68runtime.goexit /usr/local/Cellar/go/1.12.7/libexec/src/runtime/asm_amd64.s:1337 ⨯ Z:\git\redcreation\alk-wxapi\alk-web\electron\node_modules\app-builder-lib\node_modules\app-builder-bin\win\x64\app-builder.exe exited with code ERR_ELECTRON_BUILDER_CANNOT_EXECUTE stackTrace= Error: Z:\git\redcreation\alk-wxapi\alk-web\electron\node_modules\app-builder-lib\node_modules\app-builder-bin\win\x64\app-builder.exe exited with code ERR_ELECTRON_BUILDER_CANNOT_EXECUTEat ChildProcess.childProcess.once.code (Z:\git\redcreation\alk-wxapi\alk-web\electron\node_modules\app-builder-lib\node_modules\builder-util\src\util.ts:239:14) at Object.onceWrapper (events.js:273:13) at ChildProcess.emit (events.js:182:13) at maybeClose (internal/child_process.js:962:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:251:5) From previous event: at processImmediate (timers.js:632:19) From previous event: at NsisTarget.buildInstaller (Z:\git\redcreation\alk-wxapi\alk-web\electron\node_modules\app-builder-lib\src\targets\nsis\NsisTarget.ts:202:29) 安装electron依赖时被墙基本上躲不过去的，运气不好的时候就是一定躲不过去，这时候有三种方案 设置electron的镜像为淘宝镜像,然后继续执行（推荐此方案） 1234567set ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/set SELENIUM_CDNURL=http://npm.taobao.org/mirrorss/seleniumset CHROMEDRIVER_CDNURL=https://npm.taobao.org/mirrors/chromedriverset SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ 使用迅雷或者浏览器手动下载download失败的文件下载完后拖到C:\Users\mahaiqiang\AppData\Local\electron-builder\Cache\这个目录，解压好，重新dist，会优先使用缓存中的文件。注意版本一致。扔上去可能是这样： 在出错的命令上手动指定镜像执行类似下面的命令，在真正的命令前加参数 1ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/ yarn install 推荐方案一。 第三步：配置更新—-这一步没有成功就换方案了，不值得看123456789101112131415$ npm install electron-updater --savenpm WARN rm not removing /Users/mahaiqiang/git/redcreation/alk-wxapi/alk-web/electron/node_modules/.bin/semver as it wasn&apos;t installed by /Users/mahaiqiang/git/redcreation/alk-wxapi/alk-web/electron/node_modules/semver&gt; ejs@2.7.4 postinstall /Users/mahaiqiang/git/redcreation/alk-wxapi/alk-web/electron/node_modules/ejs&gt; node ./postinstall.jsThank you for installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)npm notice created a lockfile as package-lock.json. You should commit this file.npm WARN eallergy@1.0.0 No repository field.npm WARN eallergy@1.0.0 No license field.+ electron-updater@4.2.0added 20 packages from 19 contributors, removed 10 packages, updated 289 packages and audited 909 packages in 304.234sfound 0 vulnerabilities 为了配合打包 package.json 需要给 build 新增配置项：123456789&quot;build&quot;: &#123; &quot;publish&quot;: [ &#123; &quot;provider&quot;: &quot;generic&quot;, &quot;url&quot;: &quot;http://127.0.0.1:5500/&quot; #这里是我本地开的服务器的地址 &#125; ], ...&#125; 参考文档： electron入门心得使用 electron-builder 与 electron-packager 的 JSAPI 构建 electron 桌面应用安装程序]]></content>
      <categories>
        <category>electron</category>
      </categories>
      <tags>
        <tag>clojurescript</tag>
        <tag>electron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emacs里用ag全局检索是排除某些目录]]></title>
    <url>%2F2019%2F12%2F22%2Femacs%E9%87%8C%E7%94%A8ag%E5%85%A8%E5%B1%80%E6%A3%80%E7%B4%A2%E6%98%AF%E6%8E%92%E9%99%A4%E6%9F%90%E4%BA%9B%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[项目根目录创建.projectile文件，维护ag搜索要排除的目录，如同.gitignore一样。 简书地址 如果不做下面的配置，在emacs里执行全局搜索时会搜索所有目录，比如node_mudules，target等目录。 因为我们是shadow-cljs和lein功能，是从luminus哭创建的，所以有这个问题 需要在项目根目录下创建个文件.projectile , 内容如下：1234-/log-/tmp-/node_modules-/target% 写法与.gitignore如出一辙。 这样配置后，再使用ag搜索，便不会再去这些目录下搜索。]]></content>
      <categories>
        <category>emacs</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo之高级美化篇]]></title>
    <url>%2F2019%2F11%2F15%2Fhexo%E4%B9%8B%E9%AB%98%E7%BA%A7%E7%BE%8E%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[增加一些其他功能 简书地址 参考原文地址：hexo建站记 主动推送到百度参考Hexo插件之百度主动提交链接安装hexo-baidu-url-submit插件：1npm install hexo-baidu-url-submit --save 该插件在github上：hexo-baidu-url-submit 在根目录的配置文件中增加baidu_url_submit字段，更改deploy字段123456789101112131415baidu_url_submit: count: 1000 ## 提交最新的一个链接 host: alili.tech ## 在百度站长平台中注册的域名 token: xxxxx ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 xz_appid: &apos;xxxxxx&apos; ## 你的熊掌号 appid xz_token: &apos;xxxxxx&apos; ## 你的熊掌号 token xz_count: 10 ## 从所有的提交的数据当中选取最新的10条,该数量跟你的熊掌号而定deploy:- type: git repo: https://github.com/dfface/dfface.github.io.git branch: master- type: baidu_url_submitter # 百度- type: baidu_xz_url_submitter # 百度熊掌号 熊掌号的id和token，请看图： 然后在主题中开启:12# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: true 自动换背景参考：injects首先写入：source/_data/auto-bg.styl: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// 背景更换设置，原来：background:url(https://source.unsplash.com/random/1600x900);body &#123; background:url(&quot;https://img.xjh.me/random_img.php?type=bg&amp;ctype=nature&amp;return=302&quot;); background-repeat: no-repeat; -webkit-background-size:100%; background-size:cover; -webkit-background-size: cover !important; -moz-background-size: cover !important; -o-background-size: cover; background-attachment:fixed, scroll; padding-top: 0px;&#125;.main-inner &#123; margin-top: 2rem; padding: 2rem; background: #fff; opacity: 0.7; min-height: 500px; transition: opacity 1s;&#125;header,footer &#123; opacity: 0.7; transition: opacity 1s;&#125;.main-inner:hover &#123; opacity:1.0;&#125;header:hover &#123; opacity:1.0;&#125;footer:hover &#123; opacity:1.0;&#125;body &#123; -moz-user-select:none; /* Firefox私有属性 */ -webkit-user-select:none; /* WebKit内核私有属性 */ -ms-user-select:none; /* IE私有属性(IE10及以后) */ -khtml-user-select:none; /* KHTML内核私有属性 */ -o-user-select:none; /* Opera私有属性 */ user-select:none; /* CSS3属性 */&#125; 然后在_config.yml中注释：1234567891011custom_file_path: #head: source/_data/head.swig #header: source/_data/header.swig #sidebar: source/_data/sidebar.swig #postMeta: source/_data/post-meta.swig #postBodyEnd: source/_data/post-body-end.swig #footer: source/_data/footer.swig #bodyEnd: source/_data/body-end.swig #variable: source/_data/variables.styl #mixin: source/_data/mixins.styl style: source/_data/auto-bg.styl]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转--Gource:让git开出花来]]></title>
    <url>%2F2019%2F11%2F13%2FGource%2F</url>
    <content type="text"><![CDATA[gource 是一个开源项目, 处理各种代码管理工具(git,svn,hg,bzr,cvs2cl)的历史, 用动画展示代码结构和作者的状态。 简书地址 gource介绍git的历史是一部电影, gource的能让它活起来, ffmpege可以把这段视频保存下来。 gource 是一个开源项目, 处理各种代码管理工具(git,svn,hg,bzr,cvs2cl)的历史, 用动画展示代码结构和作者的状态。 下面这段gif展示了过敏平台项目开始的时候从4月25到4月30之间Marvin同学忙碌于代码库各处的情形。中间的那个小红人是Marvin😂 很帅吧！ gource --title &quot;ALK-project&quot; --date-format &quot;%y-%m-%d:%R&quot; alk-wxapi 安装好工具以后，你可以执行下面这个命令来看到一样的结果。 gource使用123456789# 安装gourcebrew install gource# 安装ffmpegbrew install ffmpeg# 执行gource project.git# 生成mp4电影gource --title "ALK project" --date-format "%D" -1280x720 alk-wxapi -o - | ffmpeg -y -r 60 -f image2pipe -vcodec ppm -i - -vcodec libx264 -preset ultrafast -pix_fmt yuv420p -crf 1 -threads 0 -bf 0 gource.mp4 自己试试吧。]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转--mac上shell终端编辑命令行快捷键]]></title>
    <url>%2F2019%2F11%2F11%2F%E8%BD%AC--%E4%BB%8EEclipse%E8%BD%AC%E7%A7%BB%E5%88%B0IntelliJ%20IDEA%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97%20copy%2F</url>
    <content type="text"><![CDATA[macOS 上shell终端编辑命令行快捷键 简书地址 mac shell终端编辑命令行快捷键——行首，行尾 Ctrl + d 删除一个字符，相当于通常的Delete键（命令行若无所有字符，则相当于exit；处理多行标准输入时也表示eof） Ctrl + h 退格删除一个字符，相当于通常的Backspace键 Ctrl + u 删除光标之前到行首的字符Ctrl + k 删除光标之前到行尾的字符 Ctrl + c 取消当前行输入的命令，相当于Ctrl + Break Ctrl + a 光标移动到行首（Ahead of line），相当于通常的Home键Ctrl + e 光标移动到行尾（End of line）Ctrl + f 光标向前(Forward)移动一个字符位置Ctrl + b 光标往回(Backward)移动一个字符位置 Ctrl + l 清屏，相当于执行clear命令Ctrl + p 调出命令历史中的前一条（Previous）命令，相当于通常的上箭头Ctrl + n 调出命令历史中的下一条（Next）命令，相当于通常的上箭头Ctrl + r 显示：号提示，根据用户输入查找相关历史命令（reverse-i-search）Ctrl + w 删除从光标位置前到当前所处单词（Word）的开头Ctrl + y 粘贴最后一次被删除的单词其他Command-Line技巧提示•输入命令open .可以用Finder打开当前的位置。 •在Terminal的偏好里面可以设定它的外观和风格。 •中止一个错误的或者发疯的命令，可以使用组合键control + C。 •你可以在执行前编辑命令，只需要使用箭头和键盘上的其他字母。 •没有输入任何命令时，你可以用▲和▼来浏览历史命令。同样可以编辑和再次执行。 •你也可以使用history命令查看历史记录。 Command + K 清屏 Command + T 新建标签 Command +W 关闭当前标签页 Command + S 保存终端输出 Command + D 垂直分隔当前标签页 Command + Shift + D 水平分隔当前标签页 Command + shift + {或} 向左/向右切换标签]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure&clojurescript前后端实现websocket协议通信]]></title>
    <url>%2F2019%2F11%2F03%2Fclojure%26clojurescript%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0websocket%E5%8D%8F%E8%AE%AE%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[后台的luminus模板的clojure项目和前端reagent clojurescript项目，各自搭建websocket通信 简书地址 服务端服务端配置websocket相对来说挺简单，因为我们项目当初new的时候没有加websocket，现在是参考luminusweb websocket往里增加关键代码 创建ws-route创建如下route，并跟普通http api route一样加入handler序列中。1234567891011121314(ns alk-wxapi.routes.websockets (:require [alk-wxapi.routes.service.ws-service :refer [ws-handler countdown]]))(defn websocket-routes [] ["/ws" &#123;:swagger &#123;:tags ["websocket"]&#125;&#125; ["" &#123;:get &#123;:summary "websocket 入口" :parameters &#123;&#125; :handler (fn [request] (ws-handler request))&#125;&#125;] ]) 创建ws-service即上面require的ws-service，内容如下：123456789101112131415161718192021222324252627282930313233343536(ns alk-wxapi.routes.service.ws-service (:require [clojure.tools.logging :as log] [immutant.web.async :as async] [immutant.web.sse :as sse]))(defonce channels (atom #&#123;&#125;))(defn broadcast-msg "广播消息" [data] (log/info "广播消息：" data) (doseq [channel @channels] (async/send! channel (str data))))(defn notify-clients! [channel data] (log/info (java.util.Date.) "收到客户端发送的message：" data) (async/send! channel (str &#123;:message data :type "reply"&#125;)))(defn connect! [channel] (log/info "channel open") (swap! channels conj channel))(defn disconnect! [channel &#123;:keys [code reason]&#125;] (log/info "close code:" code "reason:" reason) (swap! channels #(remove #&#123;channel&#125; %)))(def websocket-callbacks "WebSocket callback functions" &#123;:on-open connect! :on-close disconnect! :on-message notify-clients!&#125;)(defn ws-handler [request] (async/as-channel request websocket-callbacks)) 测试连接这样再次启动repl，在启动http 接口的同时就在同一端口启动了ws协议的websocket服务，可以用wscat命令行测试工具或者在在线测试工具进行连接测试。123$ wscat -c ws://localhost:3000/api/wsConnected (press CTRL+C to quit)&gt; 客户端在任意一个页面找个契机开始创建连接，参考multi-client-ws-immutant创建时指定消息处理回调函数。代码如下： 根目录或者任意目录创建ws连接工具类12345678910111213141516171819(defn- receive-transit-msg! [update-fn] (fn [msg] (js/clearTimeout clear-time) (update-fn (cljs.reader/read-string (.-data msg)))))(defn- send-transit-msg! [msg] (if @ws-chan (.send @ws-chan msg) (throw (js/Error. &quot;Websocket is not available!&quot;))))(defn make-websocket! [url receive-handler] (println &quot;attempting to connect websocket&quot;) (if-let [chan (js/WebSocket. url)] (do (set! (.-onmessage chan) (receive-transit-msg! receive-handler)) (reset! ws-chan chan) (println &quot;Websocket connection established with: &quot; url)) (throw (js/Error. &quot;Websocket connection failed!&quot;)))) 在某个页面触发websocket连接12345678(require ' [alk-doc.ws :as ws :refer [webSocketUrl click-one]])(defn handler-ws-msg “可以根据消息内容或者自定义的类型，进行相应的业务处理” [msg] (js/console.info "收到广播消息:" msg))(ws/make-websocket! webSocketUrl handler-ws-msg) 这样就建立了前后端ws通信。 生产环境上的特殊处理但是在生产环境(https+nginx)上要做点特殊处理，这里的处理，服务端和客户端都有。 生产环境多是https的，这就要求页面里面的websocket必须要是wss的，而不能是ws的 因此websocket的连接变成了wss://www.abc.com/api/ws/ 服务端nginx配置支持websocket 生产环境服务端的接口使用nginx做了反向代理，不出意外的话，上面的连接即使改成wss也连接不成功，需要nginx的配置如下：1234567891011121314151617http &#123; map $http_upgrade $connection_upgrade &#123; default upgrade; &apos;&apos; close; &#125; server &#123; ... location /chat/ &#123; proxy_pass http://backend; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; proxy_read_timeout 600s; &#125; &#125; 最重要的，客户端加入心跳检测，端口后自动重连 我们的程序是一个jar直接java启动的，这样在连接上后不会自己断开的，但是上面说了，生产环境使用nginx代理的，默认情况下，利用nginx代理websocket的时候，发现客户端和服务器握手成功后，如果在60s时间内没有数据交互，连接就会自动断开。因此上面配置了proxy_read_timeout 600s，也就是10分钟没有通信再断开。这个时间可以长，但我没试过是不是可以无限长。所以最好是在客户端加上心跳检测，断开后有能力自己重连，及时服务器不设置10分钟，60秒钟断开也可以自己重连。终极方案是心跳检测+延长read-timeout时间，客户端的代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566(require &apos;[reagent.core :as reagent :refer [atom]])(defonce ws-chan (atom nil))(def lockReconnect (atom false))(def clear-time (atom nil))(def click-one (atom true))(def webSocketUrl &quot;ws://182.61.51.177:3055/api/ws&quot;)(defn receive-transit-msg! [update-fn] (fn [msg] (js/clearTimeout clear-time) (update-fn (cljs.reader/read-string (.-data msg)))))(defn send-transit-msg! [msg] (if @ws-chan (.send @ws-chan msg) (throw (js/Error. &quot;Websocket is not available!&quot;))))(set! (.-onbeforeunload js/window) (fn [] (.close (js/WebSocket. webSocketUrl))))(defn initEventHandle [url chan receive-handler] (do (set! (.-onmessage chan) (receive-transit-msg! receive-handler)) (reset! ws-chan chan) (js/console.log &quot;Websocket connection established with: &quot; url) (set! (.-onopen chan) (fn [] (js/console.log &quot;连接成功&quot;) (js/clearTimeout clear-time))) (set! (.-onclose chan) (fn [] (js/console.log &quot;连接断开&gt;&gt;&gt;&quot;) (reset! lockReconnect true) (if (true? @lockReconnect) (do ;;没连接上会一直重连，设置延迟避免请求过多 (reset! clear-time (js/setTimeout (fn [] (initEventHandle webSocketUrl (js/WebSocket. url) receive-handler) (reset! lockReconnect false)) 2000)) (reset! lockReconnect false)) (do (js/clearTimeout clear-time))))) (set! (.-onerror chan) (fn [] (js/console.Error &quot;连接错误&quot;) (reset! lockReconnect true) (if (true? @lockReconnect) (do ;;没连接上会一直重连，设置延迟避免请求过多 (reset! clear-time (js/setTimeout (fn [] (initEventHandle webSocketUrl (js/WebSocket. url) receive-handler) (reset! lockReconnect false)) 2000)) (reset! lockReconnect false)) (do (js/clearTimeout clear-time)))))))(defn make-websocket! [url receive-handler] (js/console.log &quot;attempting to connect websocket&quot;) (if-let [chan (js/WebSocket. url)] (initEventHandle url chan receive-handler) (throw (js/Error. &quot;Websocket connection failed!&quot;)))) 参考官方demo的实现后，只是成功进行了连接，并不能保证真正的长连，因此上面代码里对当前channel的onclose和onerror事件的处理是我们前端的姑娘参考WebSocket加入心跳包防止自动断开连接js版本用cljs做的实现，给她点个赞👍。 到这里，clojure和clojurescript里搭建websocket通信就算是可用了。 client testing12345678910111213141516171819202122232425(require &apos;[reagent.core :as reagent :refer [atom]])(defonce messages (reagent/atom []))(defn message-list [] [:ul (for [[i message] (map-indexed vector @messages)] ^&#123;:key i&#125; [:li message])])(defn message-input [] (reagent/with-let [value (reagent/atom nil)] [:input &#123;:type :text :placeholder &quot;输入&amp;回车发送&quot; :value @value :on-change #(reset! value (-&gt; % .-target .-value)) :on-key-down #(when (= (.-keyCode %) 13) (send-transit-msg! &#123;:message @value&#125;) (reset! value nil))&#125;]))(defn update-messages! [&#123;:keys [message]&#125;] (js/console.info &quot;收到服务端返回的消息&quot;) (swap! messages #(vec (take 10 (conj % message))))) 123456789101112131415(make-websocket! webSocketUrl update-messages!)(defn home-page [] [:div.container [:div.row [:div.col-md-12 [:h2 &quot;Welcome to chat&quot;] [:h4 &quot;服务端将你发送的内容加了个key做了回答&quot;]]] [:div.row [:div.col-sm-6 [message-list]]] [:div.row [:div.col-sm-6 [message-input]]]])[home-page] 参考immutant websockets sample WebSocket proxying WebSocket加入心跳包防止自动断开连接]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>cljs</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序猿的MacOS开发环境之一]]></title>
    <url>%2F2019%2F11%2F02%2F%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84MacOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B9%8B%E4%B8%80%2F</url>
    <content type="text"><![CDATA[程序猿的macOS上应该有的软件和小插件 简书地址 每个江湖上的高手都有自己趁手的兵器，你也应该有你自己的那把小李飞刀。小李飞刀这个兵器还真不是突然想到的。 要是问我什么不是方天画戟、青龙偃月刀、丈八蛇矛云云，或者为啥不是独孤求败的利剑、紫薇软剑、玄铁重剑之类的。我就呵呵了，你见过哪个道法高深的神仙，随身手里扛着这么大的兵器，关二哥拉屎时应该不会扛着青龙偃月刀吧。 小李飞刀则不然，随身携带，杀伤力不弱于其他，最重要的其实是小李飞刀是在浪子李寻欢手里，李寻欢此人是一个倾倒天下多情红颜的潇洒浪子，一个重情重义的悲情英雄，一生都被身心的痛苦折磨，却又不轻易显示喜怒哀乐，复杂的内心情感全靠眼神表现。所以计算式小李飞刀只是在百晓生兵器谱上排第三，我还是更喜欢，也许我是不喜欢天机老人的懦弱，和上官金虹的恶霸行为。 有人说，自古没有最厉害的兵器，只有最厉害的人。也是，孤独前辈的第四把剑就是木剑，“四十岁后，草木竹石均可为剑”，何其雄壮，人家有傲视群雄的本事的啊，这境界太高了，没几个能达到的。 我不反对上面的观点，但是顺手的兵器总也是能为平庸的人增添战斗力，要不然那么多人去抢倚天剑、屠龙刀。 废话太多了哈。。。😁 作为一坨程序猿，我想表达的意思是打造自己最趁手，最适合自己工作的工具—-要不换个标题：MacOS系统上常用的软件和插件。 关键词：程序猿、MacOS 所以我要说微信，QQ之类的估计您的揍我了。 先推荐两个资源下载地址： xclient.info爱情守望者 必备应用： git客户端：gitKarken，sourceTree 接口测试工具：postman 笔记工具：为知笔记，印象笔记 IDE：Intellij Idea，VS code，Emcas markdown写作工具：Typora 翻墙客户端：Shadowsocks 手机投屏软件：Vysor，有谷歌浏览器插件 硬盘U盘读写软件：Tuxera Disk Manager ####一些在线工具和网址: 发起在线问卷调查：https://www.wenjuan.com/在线定时任务执行写法工具：http://cron.qqe2.com/国际推荐使用：https://cdnjs.com/下载系统及工具：http://msdn.itellyou.cn优雅高效的免费在线APP原型工具 http://www.xiaopiu.com/showdoc文档工具：https://www.showdoc.cc/web/#/各种java工具：http://www.hutool.cn/在线无损压缩图片：https://squoosh.app/生成短链接：http://www.surl.sinaapp.com/在线工具集合：http://oktools.net在线工具集合2 ：http://www.atoolbox.netmockjs: http://mockjs.com/lisp里json转edn/map：http://pschwarz.bicycle.io/json-to-edn/ 1. shell客户端iterm2截止目前最喜欢的shell客户端，没有之一，之所以加个截止目前，是因为今年用emcas，都说这里面的shell也很赞。 做后端开发，经常要快速进入某一台远端服务器，然后看个log，改个配置啥的，这时候iterm+sshpass就能让你事半功倍了。关于怎么配，此处不再细说。123456wget http://sourceforge.net/projects/sshpass/files/sshpass/1.05/sshpass-1.05.tar.gz tar xvzf sshpass-1.05.tar.gz cd sshpass-1.05./configure make make install [站外图片上传中…(image-aefec1-1572691340926)] 推荐两个网友的杰作，一个安装，一个使用。mac下使用sshpass实现ssh记住密码Mac下，使用sshpass让iTerm2支持ssh登录信息保存 安装sshpass有问题的用户，可以试试12345678910brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rbUpdating Homebrew...Warning: Calling Non-checksummed download of sshpass formula file from an arbitrary URL is deprecated! Use &apos;brew extract&apos; or &apos;brew create&apos; and &apos;brew tap-new&apos; to create a formula file in a tap on GitHub instead.######################################################################## 100.0%==&gt; Downloading http://sourceforge.net/projects/sshpass/files/sshpass/1.06/sshpass-1.06.tar.gz==&gt; Downloading from https://netcologne.dl.sourceforge.net/project/sshpass/sshpass/1.06/sshpass-1.06.tar.gz######################################################################## 100.0%==&gt; ./configure --prefix=/usr/local/Cellar/sshpass/1.06==&gt; make install🍺 /usr/local/Cellar/sshpass/1.06: 9 files, 45.8KB, built in 9 seconds 安装成功。 iterm里另一个不得不用的是Zsh和Oh My Zsh家庭套餐，点到为止，网上一搜一大把，选个自己喜欢的theme用就行了。 iterm2的profiles里执行一个登录的命令1/usr/local/bin/sshpass -f /Users/mahaiqiang/Documents/sshpass/&lt;file_name&gt; ssh -p&lt;port&gt; marvin@ip file_name 只存储这个ip对应的用户登录密码，而且文件没有后缀。 如果没有安装成功sshpass，也可以用iterm的命令行模式，执行一个shell脚本，脚本的内容可能荣幸123456789101112#!/usr/bin/expect -fset user &lt;user-name&gt;set host &lt;ip&gt;set password &lt;password&gt;set port &lt;port&gt;set timeout -1spawn ssh -p $port $user@$hostexpect "*assword:*"send "$password\r"interactexpect eof High起来吧 2. Navicat PermiumNavicat Premium 是一套数据库开发工具，让你从单一应用程序中同时连接 MySQL、MariaDB、MongoDB、SQL Server、Oracle、PostgreSQL 和 SQLite 数据库。它与 Amazon RDS、Amazon Aurora、Amazon Redshift、Microsoft Azure、Oracle Cloud、MongoDB Atlas、阿里云、腾讯云和华为云等云数据库兼容。你可以快速轻松地创建、管理和维护数据库。 数据库工具在Mac上我比较钟情这款，导入导出都很方便，其他不推荐。不要说不是免费版，我相信你一定有办法免费，而且你还能搞个汉化版。 在Windows我用的最多HeidiSQL，轻量级，非常稳定的数据库客户端。是可惜没有mac版。 3. transmit相同功能的我还用过的filezilla和WinScp，但是从体验和视觉上来说，我更喜欢transmit，简洁直观 4. tinyCal这个小日历可了不得，试图比mac自带的日历小，但是又比mac状态栏上那个还不如没有日历表好。截图如下： 还有农历，看着不错吧，在设置个开机自启，系统自带的可以关闭了。 5. Alfred这个是在去年在海尔一起工作的小唐同学那里看来的，直接抄一下原创：Alfred作为老牌效率神器，网上很多帖子都已经做过介绍，这里说一下Alfred的剪贴板。 [站外图片上传中…(image-2652a3-1572691340926)]Alfred的剪贴板可以保存最近几天位于系统剪贴板的所有内容。因此如果当键入命令时，突然想起来这个命令我昨天好像复制过，那就可以直接调出来，贴进命令行即可。 这款神器可是Best-App排行NO.1的，可见一斑。 使用教程：5分钟上手Mac效率神器Alfred以及Alfred常用操作 6. LICECap 捕捉屏幕生成GIF1brew cask install LICECap 相对应的截图软件推荐xnipapp一款免费的截图软件，还支持滚动截图，离线操作。 7. Recorder it屏幕录制软件，可以在xclient.info上下载到。 8. keycastr 显示快捷键在你想做一个教程时，不管是gif了，还是录屏了，你或许在冥思苦想到底怎么解释我在键盘上按了啥，这回不用解释了，你按了啥有软件帮你显示出来了，简单明了。 1brew cask install keycastr 配合上生成gif搞个小教程简直不要太爽。 9. ssh tunnel再复制小唐同学推荐的一个神器ssh tunnel。 场景：我们需要搭建开发环境，使得本地的web server/api server 能够访问位于云服务器上局域网环境中的数据库，例如百度云提供的数据库服务。这些数据库服务器可以在百度云的机器上直接访问，而不能在公网环境下通过公网ip访问。这个时候可以用百度云的普通server建一个tunnel，从而实现数据访问。在xshell中也有类似功能，中文翻译做：隧道。 界面展示： 如图便是建立了三个tunnel，分别连向了两个关系型数据库服务器和一个redis服务器。举例来说第一条隧道连接，使用时的访问方法，就是直接localhost:13306即可。当然，直接用ssh命令也可解决，但麻烦不是。程序员就应该能偷懒的时候尽可能偷懒，美其名曰：解放和发展生产力~命令行： 1ssh -CfNg -L 16306:postgresql94.rd*****lwr2zr.rds.bj.baidubce.com:3306 root@180.***.***.189 原作者：tangxqa 10. PicGo图床，上传图片后直接将复制复制到了粘贴板，非常方便，尤其要写markdown1brew cask install PicGo 如果常写markdown的话，绝对是个不错的选择，谁还每个github账号，合理使用资源就行了，图片拖进上传区，直接就能返回来个markdown的地址放到粘贴板里了。至于怎么利用github做图床自行google下。 11. Charles抓包工具Charles是一款抓包代理调试工具、类 Fiddler。ios系统手机上有一款抓包神器：stream安卓手机上一般用：Packet Capture，或者抓包精灵 12. 内网穿透工具这个东西不常用，但是如果不知道还有个这么个玩意儿那就有点low了。我用过serveo和ngrok，ngrok相对稳定，但是使用便捷性赶不上什么都不用serveo一句命令的快。我的两个总结：使用serveo一秒钟实现内网穿透使用ngrok一分钟实现内网穿透 13. 为知笔记|印象笔记有时候你会有两台电脑，或者需要用移动端看看曾经报错的一些有效资源，这时候如果没有个云笔记，有点说不过去了，而且这种笔记不管是保存自己的东西，还可以通过google浏览器插件快速收藏网页，将某一篇博客剪切成自己的东西笔记。 [站外图片上传中…(image-7835d8-1572691340926)] 14. Parallels虚拟机神器带你飞~ 15. LogTail 日志监控查看工具前面说到的iterm配合sshpass登录到服务器不是个啥问题了，但是最近用的不管是阿里云和百度云的ECS，在终端连接一会儿后就会自动断开，而且我也不知道咋搞，就算是tail 了，一会儿没有动就自己断开了，非常糟心。 今天终于找到了一款我众里寻他千百度的logtail，我简直爱死他了，查看云服务器日志居然还有这么个玩意儿，简直神器啊，来两张图看看： 有了它服务器上的日志就不需要搭建类似ELK或者EFK环境了。 16. mpv：一个高可配的程序猿专用视频播放器安装：1brew cask install mpv 这是一款一个跨平台、简洁、开源、免费、且性能和功能兼备万能视频播放器。MPV 是一个基于 MPlayer 和 mplayer2 的开源极简全能播放器。支持各种视频格式、音频解码、支持特效字幕（电影动漫的ass特效字幕都没啥问题），不仅支持本地播放，同样支持网络播放。重点是 MPV 具有多系统平台支持、命令行、自定义、GPU 解码、脚本支持等特点…… 看这篇介绍 17 Moom或许有许多人和小编一样，感觉Mac OS在使用时各种都很好用，但是就是对于窗口大小的调整需要用鼠标去拖动大小不满意。 那么有没有一种更为快速的方法，可以让你迅速的最大化、最小化各种窗口，甚至和WIN10系统一样做到左右对半分配两个窗口呢？当然有！只需要在你的Mac上安装Moom这一款小软件即可实现。 Moom是苹果os平台上优秀的窗口管理工具，可以快速修改当前窗口的大小并放置在指定位置，默认情况下拥有五种尺寸可选，单击选项即可更改窗口大小，如最大化，移动到左边、右边等操作，还可以自定义窗口，让用户可以更好的查看mac上的内容。 18. PopClip一款在 Mac 上人尽皆知的小工具，它简单高效，具有强大的拓展功能，PopClip 最基本的功能即用鼠标选中一段文字就可以做复制粘贴的动作，省去了我们平时 Command+C or V 的麻烦。 除此之外，再无拓展支持的情况下，根据鼠标选中的内容，PopClip 还自身支持链接的跳转打开、自带词典的翻译、邮件地址跳转、搜索引擎搜索、单词纠正等功能，但这个工具真正强大之处在于它的拓展功能的使用哦。 小插件 Bartender展开和收缩状态栏 外接2K显示器无法开启hign dpi时的处理 开启教程：https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=11669269&amp;page=1用到的三个软件： 设置完成之后，在外接显示器也可以看到hign dpi的选项： Go2Shell在访达里增加一个打开命令行的快捷入口，快速进入命令行 还可以设置在哪打开 FeHelper一款谷歌浏览器插件，主要是免费的工具集合。 Octotree这又是一款chrome插件，能将github项目在左侧边栏以目录树形结构展示。让你更直观地感受自己或别人的项目。感谢@朋友你的学生卡掉了 同学的推荐 WeChatPlugin macmac微信助手，mac微信助手，功能全新升级，有很多比如消息防撤回、远程控制(已支持语音)、微信多开、第二次登录免认证等等的功能。 推荐工欲善其事，必先利其器-程序员工具推荐正是有了这些神器，让我再也离不开Mac！]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emacs上使用px转换vw插件]]></title>
    <url>%2F2019%2F10%2F30%2Femacs%E4%B8%8A%E4%BD%BF%E7%94%A8px%E8%BD%AC%E6%8D%A2vw%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[学习使用elisp给emacs写一个px转换成vw的插件 简书地址 因为emacs缺少一个插件已经影响了前端同学对emacs的兴趣了，这有点尴尬，其实emacs很强大的。对标vs code的px2vw插件，今天花半天实现了一个简易的相似功能的emacs插件。 配置参考px2vw-px2vw-emacs-plugin上中式英文说明也能看懂。 下载px2vw.el到本地~/emacs.d/lisp/目录下。 或在~/emacs.d/lisp/自件一个名为px2vw.el文件，将代码复制进去，保存。 在~/.emacs.d/custom.el文件里添加如下代码：123(require &apos;px-to-vw-vh)(global-set-key (kbd &quot;C-c w&quot;) &apos;px-&gt;vw) 如果这个操作很常用的话，也可以定义一个更简洁的快捷键，比如F9，那就将上面的第二行换成1(global-set-key [f9] &apos;px-&gt;vw) 重启emacs。 使用在px代码出，按下你设置的快捷键，将执行绑定的函数，这会把比如200px;换算成13.8889vw保留了4位小数点，替换掉原来的以px为单位的代码。 局限说明 目前插件内置了宽度是1440，如果需要修改，可以在下载下来的px2vw.el里把第一行定义的常量viewpoint-width改成你需要的值。 鉴于vh很少用到，因此还没有做适应，需要的时候手动计算下。 参考文档李杀的Elisp学习笔记Emacs Lisp px2vw.el附件12345678910111213141516171819202122232425262728293031323334353637383940(defvar viewpoint-width 1440) (defvar viewpoint-height 900) (defun kill-thing-at-point (thing) &quot;Kill the `thing-at-point&apos; for the specified kind of THING.&quot; (let ((bounds (bounds-of-thing-at-point thing))) (if bounds (kill-region (car bounds) (cdr bounds)) (error &quot;No %s at point&quot; thing))))(defun kill-word-at-point () &quot;Kill the word at point.&quot; (interactive) (kill-thing-at-point &apos;word))(defun convert-to-vw (px-v) (format &quot;%.2f&quot; (/ (float (* (string-to-number px-v) 100)) viewpoint-width)))(defun convert-to-vh (px-v) (format &quot;%.2f&quot; (/ (float (* (string-to-number px-v) 100)) viewpoint-height )))(defun px-&gt;vw () &quot;Convert word at point (or selected region) from px to vw.&quot; (interactive) (let* ((char (if (use-region-p) (cons (region-beginning) (region-end)) (thing-at-point &apos;symbol)))) (when (and char (not (string-blank-p char)) ) (if (string-match &quot;px&quot; char) (progn (setq word (current-word char)) (setq px-v (substring word 0 (- (length word) 2))) (kill-word-at-point) (insert (concat (convert-to-vw px-v) &quot;vw&quot;))) (print &quot;there&apos;s no px value to converting&quot;)))));;(global-set-key (kbd &quot;C-c w&quot;) &apos;px-&gt;vw);;(global-set-key [f9] &apos;px-&gt;vw)(provide &apos;px2vw) 大神加强版上面的plugin不支持整个文件或者选中区域一次性操作是个硬伤。大神版优化的同时，同时解决了这个问题。写的代码有长又烂的原因只有一个，那就是学的太浅。 1234567891011121314151617181920(defun k-test (string &amp;optional posBegin posEnd) &quot;支持当前段落和选中区域（region）.&quot; (interactive (if (use-region-p) (list nil (region-beginning) (region-end)) (let ((bds (bounds-of-thing-at-point &apos;paragraph))) (progn (goto-char (car bds)) (list nil (car bds) (cdr bds)))))) (while (re-search-forward &quot;\\([0-9.]+\\)\\(px\\)&quot; posEnd t) (let* ((px-digit-str (match-string 1)) (px-digit (string-to-number px-digit-str)) (vw-digit (format &quot;%.2f&quot; (/ (* 100.0 px-digit) 1400.0)))) (replace-match (concat vw-digit &quot;vw&quot;) t nil) )))]]></content>
      <categories>
        <category>emacs</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojurescript页面定时刷新]]></title>
    <url>%2F2019%2F10%2F24%2Fclojurescript-timer-refresh%2F</url>
    <content type="text"><![CDATA[clojurescript 页面定时器 简书地址 场景最近做蓝牙设备的连接，需要在app上实时显示蓝牙的读数，毕竟只有使用设备的时候才要求实时性，简易期间我们使用服务端通信，或者socket这种双向通信的，直接在页面时定时刷新 代码123456789101112131415(require &apos;[reagent.core :as r])(require &apos;[re-frame.core :as rf])(defn dispatch-timer-event [] (let [now (js/Date.)] (rf/dispatch [:timer now])))(defonce do-timer (js/setInterval dispatch-timer-event 1000))(rf/reg-event-db :timer (fn [db [_ new-time]] (prn &quot;&lt;&lt;&lt;&lt;&lt; this is a test log &gt;&gt;&gt;&gt;&gt;&quot; (str new-time)) (assoc db :time new-time))) 停止停止一个interval使用如下操作1234(r/render-component (r/create-element &quot;button&quot; #js &#123;:onClick #(. js/window (clearInterval do-timer))&#125; &quot;停止刷新&quot; ) js/klipse-container) 划重点：定时任务启动后必须找到对应的才能停止掉，在实际开发的过程中，你也一定不希望单页面的应用，只要定时任务启动了，关闭了当前页定时任务还在执行着，一定是要找到某个合适的契机停止掉的。我们是这样实现的，一个按钮控制跳页同时启动定时任务，setInterval的返回值用atom或者db保存起来。页面退出，或者其他button有操作时，调用clearInterval将atom或者db里订阅的interval停止掉。 效果实际使用中我们当然不是只打个log，是调用接口，效果如下： 参考https://github.com/Day8/re-frame/blob/master/examples/simple/src/simple/core.cljs]]></content>
      <categories>
        <category>clojurescript</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>clojurescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[emacs上安装类似explorer插件neotree]]></title>
    <url>%2F2019%2F10%2F24%2Femacs%E4%B8%8A%E5%AE%89%E8%A3%85%E7%B1%BB%E4%BC%BCexplorer%E6%8F%92%E4%BB%B6neotree%2F</url>
    <content type="text"><![CDATA[emacs使用感受和两个插件 简书地址 emacs推荐原因我开始学clojure是用intellij idea的，感觉这款神器配上cursive plugin + Rainbow Brackets撸码效果也还不错，现在想想可能这种感觉来自当时太不习惯clojure的写作习惯，和不熟悉clojure的哪怕最基础的函数。 使用的一个多月期间，整体code fomatter与大神的emacs不一样，所以打开一个namespace总是会重新根据cursive认为的缩进给加减括号，几天里总会出现那么一两次，括号乱的匹配不上，费很大劲。 学习期间，看高手玩弄代码，尤其是repl交互里，才开始觉得intellij idea欠缺点什么。于是开始使用emacs，各种查，各种问，强迫自己习惯，也就一周的时间，常用的快捷键也就能记差不多了（毕竟菜鸟级的入门用户常用的也不多😏）。 两三周以后我就真的不想再在intellij上玩了，尤其是学会括号吃进、吐出这种后来非常非常常用的快捷键，熟悉了之后感觉在emasc里编辑clojure也是一种享受。 Visual Studio Code也有好几个clojure插件，配上彩虹括号，代码可读性也还不错，但是编辑起来就更不如intellij idea了，因为连函数都跳不进去，删除和剪切时防止括号匹配错误等等都没有，更没有repl环境，总之对编辑clojure来说太次~~~效率也不会高。 缺陷补充但是事物都有两面性，毕竟萝卜白菜各有所爱，emacs也有它不足的地方，除了快捷键比较麻烦以外，有人说编写了代码必须按下C+x C+s保存，麻烦。听的更多的是emacs没有想别的ide一样的explorer可以看整个工程的结构，因此我将自己的尝试写一下，正在使用或有意向使用emacs的想加的可以自己加，也可以找我免费上门安装😁😄😁 我也安装的是大神推荐的purcell/emacs.d的配置，但是做了两点改动。 自动保存插件有了这个插件可以不用再按下C+x C+s保存了。默认1s钟你不动，程序就会自己保存，并且不会再有那些#文件，程序启动的话也会自己编译，我使用的时候静默时间改成3s。参考文章Emacs：我已经十年没有按过保存按键了（附带 auto-save.el 源码解析）做的，相信有这想法的话，应该谁都会，我这推荐下相关链接。 插件代码：auto-save.el 需要修改静默时间的话修改.el文件里的auto-save-idle函数参数即可，单位是秒。 neotree插件从网上搜一下的话，这样的需求还真不是只有我们想要，比如:A good project tree browser for Emacs?,emacs真是千人千样，我从各位大神高度的自定制方案里找到了neotree和sidebar两款，我使用的前者，安装简单，也能达到目的（我也担心乱七八糟安装多了，会不会影响eamcs启动运行速度，所以比重就轻）。 推荐F8作为控制显示和隐藏的快捷键，写多了，一图胜千言~]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>emacs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[神舟精盾T47T1安装黑苹果]]></title>
    <url>%2F2019%2F10%2F19%2F%E7%A5%9E%E8%88%9F%E7%B2%BE%E7%9B%BET47T1%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[新买的神舟精盾8G内存，1T固态，买来安装黑苹果的时候一点小问题记录 简书地址 最近在同事的鼓动下下手了神舟精盾UT471这款本子，14寸超薄本。 同事半个多月前就是买的这款，已经折腾好了黑苹果，正是基于这个原因，我犹豫中带着不安还是买了这款，折腾黑苹果确实是个头疼的事，除非舍得花钱。。。 与之前不同的事这次这个笔记本只有一块儿硬盘，所以安装于以前不同了，趁着有印象，记录下咋干的。 1、首先，系统分区得要两个ESP区，一个引导clover，一个引导Windows，就是因为没有搞懂这个，老是想在一个ESP上把两个引导都加上，最后导致正版的windows10废了，装了个盗版的。 2、黑苹果的无线网卡和蓝牙是铁定驱动不了的，当时联想拯救者还花150大洋，买了个黑苹果无线网卡换上去，一切完美了，但是这次就惨了，据同事说，市面上没有插口与之能匹配的黑苹果无线网卡，他买了一次拿回来试过了，不能用。因此wifi和蓝牙只能用USB驱动了，这样一个电脑上就要至少插两个设备，而且就算插两个，airdrop这么赞的投屏功能也不属于你了。 3、要驱动USB蓝牙，就要先禁止掉mac自带的蓝牙，虽然自带的不能用，但是它还是站着矛盾不拉屎，不禁止掉USB的适配器是不起作用的，因此macOS只认一个。于是可以参考下文设置禁止一下： 小米笔记本装MAC（黑苹果），外接USB蓝牙，禁止笔记本自带的蓝牙方法 4、禁止ABC输入法参考：删除MAC系统自带的ABC输入法 5、美中不足的地方，电脑启动时要先断开电源，否则会导致键盘无法驱动，开机后再充电，此时键盘恢复正常。]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure之制作lein模板（一）]]></title>
    <url>%2F2019%2F10%2F09%2Fclojure%E4%B9%8B%E5%88%B6%E4%BD%9Clein%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[使用开源luminus模板策略，制作属于自己的项目模板 简书地址 传送门Writing TemplatesWriting Lein template — quick tutorial 制作目标项目1、创建工程123456789101112131415161718192021➜ mygitrepo lein new template hc-template --to-dir hc-templateGenerating a Luminus project.➜ mygitrepo cd hc-template➜ hc-template tree.├── CHANGELOG.md├── LICENSE├── README.md├── project.clj├── resources│ └── leiningen│ └── new│ └── hc_template│ └── foo.clj└── src └── leiningen └── new └── hc_template.clj7 directories, 6 files➜ hc-template 2、 根目录手动增加shadow-cljs.edn文件123456789101112131415161718192021;; This file is generated by lein-shadow, do not manually edit. Instead, edit project.clj shadow-cljs key.&#123;:nrepl &#123;:port 7002&#125;, :builds &#123;:app &#123;:target :browser, :output-dir &quot;target/cljsbuild/public/js&quot;, :asset-path &quot;/js&quot;, :modules &#123;:app &#123;:entries [hc-template.app]&#125;&#125;, :devtools &#123;:watch-dir &quot;resources/public&quot;, :preloads [re-frisk.preload]&#125;, :dev &#123;:closure-defines &#123;&quot;re_frame.trace.trace_enabled_QMARK_&quot; true&#125;&#125; :release &#123;:output-dir &quot;dist/&quot; :module-hash-names true :build-options &#123;:manifest-name &quot;cljs-manifest.json&quot;&#125;&#125;&#125;&#125; , :test &#123;:target :node-test, :output-to &quot;target/test/test.js&quot;, :autorun true&#125;&#125;, :dev-http &#123;8000 &#123;:roots [&quot;resources/public&quot; &quot;target/cljsbuild/public&quot;]&#125;&#125; :lein true&#125; 3、引入antd1npm install antd --save package.json配置文件12345678910&#123; &quot;dependencies&quot;: &#123; &quot;antd&quot;: &quot;^3.22.0&quot;, &quot;create-react-class&quot;: &quot;15.6.3&quot;, &quot;react&quot;: &quot;16.8.6&quot;, &quot;react-dom&quot;: &quot;16.8.6&quot;, &quot;shadow-cljs&quot;: &quot;2.8.39&quot; &#125;, &quot;devDependencies&quot;: &#123;&#125;&#125; 4、配置入口文件在resources/public目录下新建index.html文件，内容如下：12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;cn&quot;&gt;&lt;head&gt; &lt;title&gt;后台管理系统&lt;/title&gt; &lt;meta charset=&quot;utf-8&quot;/&gt; &lt;meta content=&quot;width=device-width, initial-scale=1.0&quot; name=&quot;viewport&quot; /&gt; &lt;link href=&quot;https://cdn.bootcss.com/antd/3.18.0/antd.min.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;!-- Our JavaScript will modify the DOM inside this element --&gt;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;!-- All our ClojureScript gets compiled into this file --&gt;&lt;script&gt; document.write(&quot;&lt;script type=&apos;text/javascript&apos; src=&apos;/js/app.js?v=&quot;+Math.random()+&quot;&apos; type=&apos;text/javascript&apos;&gt;&lt;\/script&gt;&quot;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 5、启动项目，验证是否正常12345678910111213141516➜ shadow-cljs serverPreparing npm packagesInstalling npm packagesnpm packages successfully installedRunning shadow-cljs...2019-08-25 20:13:00,880 [main] DEBUG org.jboss.logging - Logging Provider: org.jboss.logging.Slf4jLoggerProvider2019-08-25 20:13:02,199 [main] DEBUG io.undertow - starting undertow server io.undertow.Undertow@31ff09472019-08-25 20:13:02,207 [main] INFO org.xnio - XNIO version 3.7.0.Final2019-08-25 20:13:02,398 [main] INFO org.jboss.threads - JBoss Threads version 2.3.2.Final2019-08-25 20:13:02,423 [main] DEBUG io.undertow - Configuring listener with protocol HTTP for interface 0.0.0.0 and port 9630shadow-cljs - server version: 2.8.39 running at http://localhost:9630shadow-cljs - nREPL server started on port 7002shadow-cljs - watching build :app[:app] Configuring build.[:app] Compiling ...[:app] Build completed. (345 files, 344 compiled, 0 warnings, 62.36s) clojure编译器概览: http://localhost:9630 实时开发的预览: http://localhost:8000 参考luminus-template实现机制编写source加载代码参考leiningen的原因是Writing Lein template — quick tutorial这文中妹子没有考虑clojure本身两个大括号这种语法是存在的，所以如果用她的方式，代码中本来就是的语法将创建模板不成功，我想这也是leiningen使用连个尖括号&lt;&lt;name&gt;&gt;来给变量赋值的原因。 上核心代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445(ns leiningen.new.common (:require [selmer.parser :as selmer] [leiningen.new.templates :refer [renderer raw-resourcer -&gt;files]] [clojure.pprint :refer [code-dispatch pprint with-pprint-dispatch]] [clojure.string :as string] [clojure.java.io :as io]))(def template-name &quot;hc-template&quot;)(defn render-template [template options] (selmer/render (str &quot;&lt;% safe %&gt;&quot; template &quot;&lt;% endsafe %&gt;&quot;) options &#123;:tag-open \&lt; :tag-close \&gt; :filter-open \&lt; :filter-close \&gt;&#125;))(defn init-render [] (renderer template-name render-template))(defn slurp-resource [path] (-&gt; (str &quot;leiningen/new/hc_template/&quot; path) io/resource slurp))(selmer/add-tag! :include (fn [args context-map] (-&gt; (slurp-resource (first args)) (render-template context-map) (string/replace #&quot;^\n+&quot; &quot;&quot;) (string/replace #&quot;\n+$&quot; &quot;&quot;))))(defn render-asset [render options asset] (if (string? asset) asset (let [[target source] asset] [target (render source options)])))(defn render-assets [assets binary-assets options] (let [render (init-render) raw (raw-resourcer template-name)] (apply -&gt;files options (into (map (partial render-asset render options) assets) (map (fn [[target source]] [target (raw source)]) binary-assets))))) 需要加载的资源文件目录是sources/leiningen/new/hc_template目录下，加载文件：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596(ns leiningen.new.hc-template (:require [leiningen.new.templates :refer [multi-segment sanitize-ns renderer name-to-path -&gt;files project-name year sanitize]] [leiningen.core.main :as main] [selmer.parser :as selmer] [clojure.string :as string] [leiningen.new.common :refer :all] [clojure.java.io :as io]))(def timestamp (.format (java.text.SimpleDateFormat. &quot;yyyyMMddHHmmss&quot;) (java.util.Date.)))(def project-assets [[&quot;dev-config.edn&quot; &quot;dev-config.edn&quot;] [&quot;.gitignore&quot; &quot;gitignore&quot; ] [&quot;Procfile&quot; &quot;Procfile&quot; ] [&quot;project.clj&quot; &quot;project.clj&quot; ] [&quot;Dockerfile&quot; &quot;Dockerfile&quot; ] [&quot;Capstanfile&quot; &quot;Capstanfile&quot; ] [&quot;README.md&quot; &quot;README.md&quot;] [&quot;shadow-cljs.edn&quot; &quot;shadow-cljs.edn&quot; ] [&quot;package.json&quot; &quot;package.json&quot; ]])(def clj-core-assets [[&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/core.clj&quot; &quot;src/clj/core.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/nrepl.clj&quot; &quot;src/clj/nrepl.clj&quot; ] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/config.clj&quot; &quot;src/clj/config.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/handler.clj&quot; &quot;src/clj/handler.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/middleware.clj&quot; &quot;src/clj/middleware.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/middleware/formats.clj&quot; &quot;src/clj/middleware/formats.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/middleware/exception.clj&quot; &quot;src/clj/middleware/exception.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/db/core.clj&quot; &quot;src/clj/db/core.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/routes/services.clj&quot; &quot;src/clj/routes/services.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/routes/guestbook.clj&quot; &quot;src/clj/routes/guestbook.clj&quot;] ;;test [&quot;&#123;&#123;backend-test-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/test/handler.clj&quot; &quot;test/clj/handler.clj&quot;] [&quot;&#123;&#123;backend-test-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/test/db/core.clj&quot; &quot;test/clj/db/core.clj&quot;] ;; hc clj [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/db/redis.clj&quot; &quot;src/clj/db/redis.clj&quot;] [&quot;&#123;&#123;backend-path&#125;&#125;/&#123;&#123;sanitized&#125;&#125;/common/result.clj&quot; &quot;src/clj/common/result.clj&quot;]]);;这里还有其他很多代码。。。。。(def db-assets [[(str &quot;&#123;&#123;resource-path&#125;&#125;/migrations/&quot; timestamp &quot;-add-users-table.down.sql&quot;) &quot;resources/migrations/20190831145908-add-users-table.down.sql&quot;] [(str &quot;&#123;&#123;resource-path&#125;&#125;/migrations/&quot; timestamp &quot;-add-users-table.up.sql&quot;) &quot;resources/migrations/20190831145908-add-users-table.up.sql&quot;] [&quot;&#123;&#123;resource-path&#125;&#125;/sql/queries.sql&quot; &quot;resources/sql/queries.sql&quot;]])(def binary-assets [[&quot;&#123;&#123;resource-path&#125;&#125;/public/favicon.ico&quot; &quot;resources/public/favicon.ico&quot;] [&quot;&#123;&#123;resource-path&#125;&#125;/public/index.html&quot; &quot;resources/public/index.html&quot;] [&quot;&#123;&#123;resource-path&#125;&#125;/public/img/warning_clojure.png&quot; &quot;resources/public/img/warning_clojure.png&quot;]])(def core-assets (vec (concat project-assets clj-core-aeests environment-assets db-assets cljs-core-assets system-assets)))(def project-relative-paths &#123;:backend-path &quot;src/clj&quot; :backend-test-path &quot;test/clj&quot; :client-path &quot;src/cljs&quot; :client-test-path &quot;test/cljs&quot; :resource-path &quot;resources&quot; :cljc-path &quot;src/cljc&quot; :db-path &quot;src/clj&quot; :source-paths [&quot;src/clj&quot;] :resource-paths [&quot;resources&quot;] :now (java.util.Date.)&#125;)(def render (renderer &quot;hc-template&quot; render-template))(defn generate-project &quot;Create a new Luminus project&quot; [options] (main/info &quot;Generating a hc-template project.&quot;) (main/info &quot;Please read README.md firstly!!!&quot;) (render-assets core-assets binary-assets options))(defn hc-template &quot;init function&quot; [name] (let [options (merge project-relative-paths &#123;:name (project-name name) :selmer-renderer render-template :min-lein-version &quot;2.0.0&quot; :project-ns (sanitize-ns name) :sanitized (name-to-path name) :year (year) &#125;)] (generate-project options))) 模板开发和测试 源代码目录： resources/leiningen/new/hc_template/加载模板文件：src/leiningen/new/hc_template.clj 开发步骤： 将自己的代码文件保存在resources/leiningen/new/hc_template/对应的目录下。 修改文件的namespace名称为待赋值的&lt;&lt;project-ns&gt;&gt;,需要引入的其他变量也一样用尖括号括起来，比如项目名称&lt;&gt;。 将自己的源代码在src/leiningen/new/hc_template.clj 加入到render队列里。 cd到模板项目rcclojuretemplate，执行如下命令 1lein new hc-template test testing 目录则为用模板创建的目标工程 运行前端，分别执行1yarn 1yarn start 启动后在浏览器本地9630端口查看项目编译情况，8000端口查看前端页面是否加载正常 运行后端：通过ide启动后台项目，查看能否正常启动，查看3000端口swagger显示否能正常显示 前后台都测试通过后，删除testing目录，提交源代码。 部署更新：修改根目录下project.clj里的版本号，最后一位+1即可，通过命令lein deploy部署最新版，账号密码：marvin/Mw99267@,首次部署，会有release版本授权错误提示，需要安装gpg，关于gpg的使用，请参考 GPG公私钥的使用和Q&amp;A 记一次向maven中央仓库提交依赖包 如果本地更新测试不充分或者不想配置gpg，可以先push代码，找马海强发布新版本。]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 自动备份]]></title>
    <url>%2F2019%2F09%2F30%2Fmysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[在linux上安装mysql 定时任务运行备份脚本简书地址 脚本文件位置：/opt/chuangke/db/script/mysql_backup.shdb备份文件：/opt/chuangke/db/backup备份脚本：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#!/bin/bash#==============================================================================#TITLE: mysql_backup.sh#DESCRIPTION: script for automating the daily mysql backups on development computer#USAGE: ./mysql_backup.sh#CRON: # example cron for daily db backup @ 9:15 am # min hr mday month wday command # 15 9 * * * /Users/[your user name]/scripts/mysql_backup.sh#RESTORE FROM BACKUP #$ gunzip &lt; [backupfile.sql.gz] | mysql -u [uname] -p[pass] [dbname]#==============================================================================# CUSTOM SETTINGS#==============================================================================# directory to put the backup filesBACKUP_DIR=/opt/chuangke/db/backup# MYSQL ParametersMYSQL_UNAME=user2018MYSQL_PWORD=9bJk!mDp@58.# Don&apos;t backup databases with these names # Example: starts with mysql (^mysql) or ends with _schema (_schema$)IGNORE_DB=&quot;(^mysql|_schema$)&quot;# include mysql and mysqldump binaries for cron bash userPATH=$PATH:/usr/local/mysql/bin# Number of days to keep backupsKEEP_BACKUPS_FOR=30 #days#==============================================================================# METHODS#==============================================================================# YYYY-MM-DDTIMESTAMP=$(date +%F)function delete_old_backups()&#123; echo &quot;Deleting $BACKUP_DIR/*.sql.gz older than $KEEP_BACKUPS_FOR days&quot; find $BACKUP_DIR -type f -name &quot;*.sql.gz&quot; -mtime +$KEEP_BACKUPS_FOR -exec rm &#123;&#125; \;&#125;function mysql_login() &#123; local mysql_login=&quot;-u $MYSQL_UNAME&quot; if [ -n &quot;$MYSQL_PWORD&quot; ]; then local mysql_login+=&quot; -p$MYSQL_PWORD&quot; fi echo $mysql_login&#125;function database_list() &#123; local show_databases_sql=&quot;SHOW DATABASES WHERE \`Database\` NOT REGEXP &apos;$IGNORE_DB&apos;&quot; echo $(mysql $(mysql_login) -e &quot;$show_databases_sql&quot;|awk -F &quot; &quot; &apos;&#123;if (NR!=1) print $1&#125;&apos;)&#125;function echo_status()&#123; printf &apos;\r&apos;; printf &apos; %0.s&apos; &#123;0..100&#125; printf &apos;\r&apos;; printf &quot;$1&quot;&apos;\r&apos;&#125;function backup_database()&#123; backup_file=&quot;$BACKUP_DIR/$TIMESTAMP.$database.sql.gz&quot; output+=&quot;$database =&gt; $backup_file\n&quot; echo_status &quot;...backing up $count of $total databases: $database&quot; $(mysqldump $(mysql_login) $database | gzip -9 &gt; $backup_file) printf &quot;path = $&#123;backup_file&#125;&quot; #scp copy to other server scp $backup_file haieradmin@10.135.26.78:/opt/chuangke/db/backup/&#125;function backup_databases()&#123; local databases=$(database_list) local total=$(echo $databases | wc -w | xargs) local output=&quot;&quot; local count=1 for database in $databases; do backup_database local count=$((count+1)) done echo -ne $output | column -t&#125;function hr()&#123; printf &apos;=%.0s&apos; &#123;1..100&#125; printf &quot;\n&quot;&#125;#==============================================================================# RUN SCRIPT#==============================================================================delete_old_backupshrbackup_databaseshrprintf &quot;All backed up!\n\n&quot; 添加定时任务12345678[root@localhost ~]# crontab [选项]选项: -e: 编辑crontab定时任务 -l: 查询crontab任务 -r: 删除当前用户所有的crontab任务[root@localhost ~]# crontab -e # 编辑定时任务# 添加如下定时任务，使用脚本的方法，每晚2点执行* 2 * * * /opt/chuangke/db/script/mysql_backup.sh]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro部署在nginx上带二级目录]]></title>
    <url>%2F2019%2F09%2F29%2FAnt%20Design%20Pro%E9%83%A8%E7%BD%B2%E5%9C%A8nginx%E4%B8%8A%E5%B8%A6%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%2F</url>
    <content type="text"><![CDATA[以部署antd pro管理系统为例，将webpack项目部署在nginx的二级目录下。 简书地址 一般我们npm build后的所有静态文件在dist里，部署在nginx的端口根目录是什么也不需要做修改的，但是偏偏有时候因为资源问题，需要在同一个端口下用二级目录来区分工程。 我们现在流行的js project编译后都是在一个dist名称的目录下，入口文件一般是index.html，Ant design pro也没有例外。分两种情况看现状。 1、 部署在nginx端口的跟目录yarn build命令后将dist文件夹下的目录copy到nginx能访问到的指定目录，比如本文的/opt/site/test/antd-pro如下：12345678910111213141516171819root@instance-ffkcm2y2:/opt/site/test/antd-pro# pwd/opt/site/test/antd-proroot@instance-ffkcm2y2:/opt/site/test/antd-pro# ls28.614fa0c1.async.js p__404.2636ef73.async.js p__profile__advanced__model.ts.53b2cc97.async.js29.e6e2e94a.async.js p__account__center__model.ts.e7d2b570.async.js p__profile__basic__model.ts.666ea347.async.js30.ed953c68.async.js p__account__settings__model.ts.18871ae5.async.js p__user__login.42c71fa9.async.js31.26eb59f0.async.js p__dashboard__analysis__model.tsx.d7334d5e.async.js p__user__login.69c29ea4.chunk.css32.858d1d30.async.js p__dashboard__monitor__model.ts.2295eb87.async.js p__user__login__model.ts.d7f50bee.async.jsasset-manifest.json p__dashboard__workplace__model.ts.25c12073.async.js p__user__register.440437ac.chunk.cssfavicon.png p__form__advanced-form__model.ts.83317f1b.async.js p__user__register.a695f9b3.async.jsicons p__form__basic-form__model.ts.4ec9fad5.async.js p__user__register__model.ts.474a7318.async.jsindex.html p__form__step-form__model.ts.2182323a.async.js p__user__register-result.3718897d.async.jslayouts__BasicLayout.6bb2089d.chunk.css p__list__basic-list__model.ts.ee583322.async.js p__user__register-result.b1bdabda.chunk.csslayouts__BasicLayout.d3a07379.async.js p__list__card-list__model.ts.a5f25999.async.js umi.0385b6b1.csslayouts__BlankLayout.17fcb893.async.js p__list__search__applications__model.ts.05817605.async.js umi.1ffff763.jslayouts__BlankLayout.6a502b55.chunk.css p__list__search__articles__model.ts.9b3e67e3.async.js vendors.1acb639b.chunk.csslayouts__UserLayout.265c2404.async.js p__list__search__projects__model.ts.b50103cf.async.js vendors.bda2d737.async.jslayouts__UserLayout.50d9ab78.chunk.css p__list__table-list__model.ts.7288e948.async.js viz.40029ece.async.jsroot@instance-ffkcm2y2:/opt/site/test/antd-pro# nginx的配置文件:12345678910111213141516171819202122232425262728root@instance-ffkcm2y2:/usr/local/nginx/conf/vhost# cat antd.test.5055.confserver &#123; listen 5055; server_name 182.61.51.177; index index.html; root /opt/site/test/antd-pro/; location / &#123; try_files $uri $uri/ /doc.html; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; location ~ /\. &#123; deny all; &#125; access_log /opt/nginxlog/antd-pro-access.log; &#125;root@instance-ffkcm2y2:/usr/local/nginx/conf/vhost# 访问看看所有js和css直接在端口以下首层。 2、部署时携带二级目录 1、修改工程根目录下的config/config.js文件两处修改， export default下增加base和publicPath两个参数，分别配置一样的参数/children-pathmainfest 下修改basePath从原来的’/‘改为’/children-path/‘，注意结尾有斜线。 修改玩后重新npm install，然后本地启动，本地启动没问题，再进行下一步。 2、打包dist 3、将dist上传到目标服务器 4、配置nginx12345678910111213141516171819202122232425262728293031server &#123; listen 5055; server_name 182.61.51.177; index index.html; root /opt/site/test/antd-pro/; location / &#123; try_files $uri $uri/ /doc.html; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; location ~ /\. &#123; deny all; &#125; location /children-path &#123; alias /opt/site/test/antd-pro2; &#125; access_log /opt/nginxlog/antd-pro-access.log; &#125; 访问看看效果 累赘到最后发现，自己是个大傻逼，不看文档的后果很严重。 多看文档！多看文档！！多看文档！！！重要的事情说三遍！！！！！！！！ 文档在哪里？不是瞎子应该就能找到：https://pro.ant.design/docs/deploy-cn]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[工作中常用的SQL]]></title>
    <url>%2F2019%2F08%2F27%2Fmysql-%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84SQL%2F</url>
    <content type="text"><![CDATA[工作中偶尔用但是又很容易忘记的sql 简书地址 现在项目中用的最多的是免费的mysql，因此下面的sql只保证在mysql上奏效。 1、时间戳格式化 &amp; case-when查询系统发放的红包的有效时间和状态：12345678910111213141516171819202122232425262728293031323334353637SELECT a.amount 红包面额, a.member_phone 领取人, a.amount_range 使用门槛, FROM_UNIXTIME( LEFT ( a.rule_start, 10 ), '%Y-%m-%d %T' ) 生效时间, FROM_UNIXTIME( LEFT ( a.rule_end, 10 ), '%Y-%m-%d %T' ) 过期时间, a.send_time 发送时间,CASE a.`status` WHEN '10' THEN '未使用' WHEN '20' THEN '已使用' WHEN '30' THEN '将过期' WHEN '40' THEN '已过期' WHEN '50' THEN '已占用' ELSE '其他' END AS '当前状态', a.useage_range_name 使用范围, b.remarks 活动名称, b.rule_start 规则开始时间, b.rule_end 规则截止时间, a.`use_date` AS 使用或过期时间 FROM `hl_benefit_redpackage_user` a INNER JOIN `hl_benefit_redpackage` b ON a.redpackage_id = b.redpackage_id WHERE a.redpackage_id != '' AND ! ISNULL( a.redpackage_id ); 2、group by的合理使用一般地，select后面只能是group by 的字段或者跟些聚合函数，比如查询某天以后没天注册用户数量：123456789SELECT DATE_FORMAT( member_regist_time, '%Y-%m-%d' ) AS '日期', COUNT( 1 ) AS '用户数' FROM hl_member WHERE DATE_FORMAT( member_regist_time, '%Y-%m-%d' ) &gt;= '2015-08-20' GROUP BY DATE_FORMAT( member_regist_time, '%Y-%m-%d' ) 这种查询能出的字段有限，那么如果要查出更多，同时group呢？123select * from user where id in( select min(id) from user where name = 'Java3y' and pv = 20 and time='7-25' group by name,pv,time;) 将查询后的结果作为子查询，放在外部查询的where 子句后，这样外部查询是可以select 出其他字段的。还有一个常见场景那就是查询一个表某些字段重复的数据12345678910111213141516171819SELECT * FROM hl_custom_item a WHERE ( a.custom_item_name, a.parent_id ) IN (SELECT custom_item_name, parent_id FROM hl_custom_item GROUP BY custom_item_name, parent_id HAVING COUNT( * ) &gt; 1 ) GROUP BY custom_item_name; 3、select update更新会员领取红包表的手机号为会员表的手机号12345UPDATE `hl_benefit_redpackage_user` aSET a.member_phone = (SELECT b.member_phone_no FROM `hl_member` b where a.member_id=b.member_Id)where a.member_id != NULL; 4、 update select部门表示个树结构的表，里面有几万条数据，更新时会有效率问题，原SQL如下：123UPDATE t_department d set d.parent_id=dept_id ,d.update_time=NOW()WHERE d.dept_code in (SELECT t.dept_code FROM t_idm_department twhere t.parent_code=NEW.dept_code); 优化SQL如下1234UPDATE t_department d JOIN (SELECT t.dept_code FROM t_idm_department twhere t.parent_code=NEW.dept_code) e on d.dept_code = e.dept_code set d.parent_id=dept_id ,d.update_time=NOW() 5、insert select将从患者表查出的数据某些字段插入到一个新的表1234INSERT INTO t_wx_user (id, openid, gender, nick_name, headimgurl, create_time)SELECT patient_id, openid, gender, nick_name, headimgurl, NOW()FROM t_patient; 参考在工作中常用到的SQL]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojureScript 零零碎碎]]></title>
    <url>%2F2019%2F08%2F27%2FclojureScript%E9%9B%B6%E9%9B%B6%E7%A2%8E%E7%A2%8E%2F</url>
    <content type="text"><![CDATA[clojure script 做前端点点滴滴零碎知识总结 简书地址 控制台查看db信息在浏览器中开启自定义日志后可以在console中查看re-frame管理的db里的内容，加格式化。开启方式：https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-some-custom-formatters-were-not-rendered 在console里使用如下命令查看1re_frame.db.app_db.state 效果： 用kee-frame和re-frame修改db的值目标给db的【demo】下增加一个key，值是一个ajax的返回结果引入两个包re-frame和kee-frame 使用re-frame/reg-event-db修改db 12345678910111213141516171819202122(require &apos;[kee-frame.core :as kf])(require &apos;[re-frame.core :as rf])(defn- concat-key [keys] (concat [:demo] keys))(defn- data-&gt;db [db keys value] (assoc-in db (concat-key keys) value))(kf/reg-event-fx ::demo-detail-ajax (fn [&#123;:keys [db]&#125; [id]] &#123;:http-xhrio &#123;:uri (&quot;http://localhost:3000/api/demo?id=&quot; id) :method :get :timeout 10000 :on-failure [:common/ajax-get-failuer] :response-format (ajax/json-response-format &#123;:keywords? true&#125;) :on-success [::set-db-demo-detail]&#125;&#125;))(rf/reg-event-db ::set-db-demo-detail (fn [db [_ res]] (data-&gt;db db [:selected :detail] (:data res)))) 上面的操作用kee-frame实现 123456789101112(kf/reg-chain-named ::demo-detail-ajax (fn [ctx [params]] &#123;:http-xhrio &#123;:uri (&quot;http://localhost:3000/api/demo?id=&quot; (:id params) :method :get :timeout 10000 :on-failure [:common/ajax-get-failuer] :response-format (ajax/json-response-format &#123;:keywords? true&#125;)&#125;&#125;) :将返回结果数据存入db (fn [&#123;:keys [db]&#125; [_ res]] &#123;:db (data-&gt;db db [:demo-detail] (:data res))&#125;)) 区别： re-frame里发起请求和存储db需要两个事件来实现，而kee-frame需要一个，第二个还可以起中文的名字，便于在控制台查看。 re-frame/reg-event-db返回的是(assoc db :key value)，而kee-frame/reg-chain返回的是{:db (assoc db :key value} kee-frame的这种返回类似于re-frame/reg-event-fx的另一种形式 123456789(defn h ;; maybe choose a better name like `delete-item` [coeffects event] ;; `coeffects` holds the current state of the world. (let [item-id (second event) ;; extract id from event vector db (:db coeffects)] ;; extract the current application state &#123;:db (dissoc-in db [:items item-id])&#125;)) ;; effect is &quot;change app state to ...&quot;(rf/reg-event-fx ;; a part of the re-frame API :delete-item ;; the kind of event h) 这个处理github上是有的，这个h函数换可以简化一下 123(defn h [&#123;:keys [db]&#125; [_ item-id]] ;; &lt;--- new: obtain db and id directly &#123;:db (dissoc-in db [:items item-id])&#125;) ;; same as before kee-frame/reg-chain处理多次有依赖请求和参数传递有个这样的需求，controller里start需要触发不止一个ajax请求数据供页面渲染，通常的做法是dispatch多个event，这在start里很好写的，因为start本来接受函数或者event的集合。但是如果我们的多个ajax请求间有依赖，比如第二个ajax需要使用第一个ajax的请求结果作为参数，并且也要使用发起第一个ajax时使用的参数，怎么搞呢？看看实现：12345678910111213141516171819202122232425(defn data-&gt;db [db keys values] (prn &quot;将多个结果存入db&quot;))(kf/reg-chain-named ::demo-detail-ajax1 (fn [ctx [params]] &#123;:http-xhrio &#123;:uri (&quot;http://ajax-demo1?id=&quot; :params params :method :get :timeout 10000 :on-failure [:common/ajax-get-failuer] :response-format (ajax/json-response-format &#123;:keywords? true&#125;)&#125;&#125;) ::发起第二个请求 (fn [ctx [params res1]] &#123;:http-xhrio &#123;:uri (&quot;http://ajax-demo2&quot; :params params :method :post :timeout 10000 :on-failure [:common/ajax-get-failuer] :response-format (ajax/json-response-format &#123;:keywords? true&#125;)&#125;&#125;) :将上两个请求返回结果数据存入db (fn [&#123;:keys [db]&#125; [_ res1 res2]] &#123;:db (data-&gt;db db [key1 key2] [res1 res2]&#125;)) 说明：chain在reframe上扩展的这个event参数和结果是一直往下累计的，第一个参数是dispatch时的参数，往后每个函数的第二组参数依次是每一次请求的结果。 antd的组件中使用组件一些组件需要的属性的参数类型是ReactNode， 比如Input的prefix属性这需要 使用Reagent的as-element函数 (as-element form) Turns a vector of Hiccup syntax into a React element. Returns form unchanged if it is not a vector. 1234(defn page1 [] [:&gt; ant/Input &#123;:prefix (r/as-element [:&gt; ant/Icon &#123;:type &quot;user&quot;&#125;])&#125;]) 修改页面atom元素赋值和修改初学者包括小菜鸡我是不是会碰到个问题，从db里订阅的数据渲染页面时第一次没有，第二次以后就都正常了，或者你想修改一下这个值重新提交到接口上，发现值改不了。 可能你的代码是这样的1234567(defn page2 [] (let [ data @(re-frame/subscribe [:db-key])] (fn [] [:div [ant/input &#123;:default-value (:name @data) :type &quot;text&quot; :on-change #(swap! item assoc item-str (-&gt; % .-target .-value))&#125;]]))) 亦或是这样的:123456(defn page3 [] (fn [] (let data @(re-frame/subscribe [:db-key]) [:div [ant/input &#123;:default-value (:name @data) :type &quot;text&quot; :on-change #(swap! item assoc item-str (-&gt; % .-target .-value))&#125;]]))) 恭喜，这两种方式完美踩雷，我们大神说因为我没有看reagent的Guide一二三，好吧，确实没看。 现状和原因 第一种写法的现状：页面的input里第一次无法赋值 第一种写法的原因：页面加载一次，但是第一次订阅不到db里的数据，因为db里还没有数据 第二种写法的现状：页面input上有值了，但是不能修改，提示react的value不能被修改 第二种写法的原因：从db里订阅的值data订阅之后就与订阅没有关系了，说白了，也就不是atom了，所以不能修改。 方案：12345678910111213(require &apos;[reagent.ratom :as ratom :refer [reaction]])(def db-value (reaction @(re-frame/subscribe [:db-key])))(def change-value (atom nil))(defn page4 [] (fn [] (reset! change-value @(if (nil? @db-value) (atom (deref (rf/subscribe [:db-key]))) db-value)) [:div [ant/input &#123;:default-value (:name @db-value) :type &quot;text&quot; :on-change #(swap! item assoc item-str (-&gt; % .-target .-value))&#125;]])) 当然，如你所知，写法有很多种，比如这个change-value你可以在fn里用let定义，并且比较推荐。 kee-frame/reg-controller 有没有好好看文档？1234567891011121314151617181920212223242526(defn reg-controller "Put a controller config map into the global controller registry. Parameters: `id`: Must be unique in controllere registry. Will appear in logs. `controller`: A map with the following keys: `:params`: A function that receives the route data and returns the part that should be sent to the `start` function. A nil return means that the controller should not run for this route. `:start`: A function or an event vector. Called when `params` returns a non-nil value different from the previous invocation. The function receives whatever non-nil value that was returned from `params`, and returns a re-frame event vector. If the function does nothing but returning the vector, the surrounding function can be omitted. `:stop`: Optional. A function or an event vector. Called when previous invocation of `params` returned non-nil and the current invocation returned nil. If the function does nothing but returning the vector, the surrounding function can be omitted." [id controller] (when-not (s/valid? ::spec/controller controller) (e/expound ::spec/controller controller) (throw (ex-info "Invalid controller" (s/explain-data ::spec/controller controller)))) (when (get @state/controllers id) (console :warn "Overwriting controller with id " id)) (swap! state/controllers update id merge controller)) kee-frame引入controller来优化路由路由管理，监听路由变化，所以在路由发生变化时程序里的所有controler都会竖起耳朵，当然最好是只有这个变化和自己有关，才去响应。这就要在params里加handler的判断。 :params 参数是一个函数包含路由信息，尤其是获取handler里的路由地址，当然包含参数。如果返回nil的话，后面start就不会执行，其他情况就会触发:start。 :start 一个函数或者一组事件的集合，函数里可以处理参数等，如果是一堆event的话，可以在函数里发起dispatch或者直接返回[:event1 ::event2]等等。来个基础的例子： 123456(kf/reg-controller :bind-user-page &#123;:params (fn [params] (when (= :bind-user-page (get-in params [:data :name])) true)) :start (fn [] (prn &quot;?????????===&quot;) (re-frame/dispatch [:choose-hospital]))&#125;) 携带query参数的例子：123456789101112;;路由带参跳转不同页面(kf/reg-controller :路由带参跳转不同页面 &#123;:params (fn [route-data] (when (-&gt; route-data :data :name (= :weixin-redirect)) (:query-string route-data))) :start (fn [_ params] (re-frame/dispatch [:weixin-redirect (reduce-kv (fn [m k v] (assoc m (keyword k) v)) &#123;&#125; (into &#123;&#125; (map #(clojure.string/split % #&quot;=&quot;) (clojure.string/split params #&quot;&amp;&quot;))))]))&#125;) 如果想要每次路由变化，都触发某个controller的start，只需要在params里返回identity即可。 clojurescript 和 javascript交互有时候我们的clojurescript需要和javascript交互。比如用js打个log，比如用js获取window的location数据等，举个列子123(.log js/console &quot;打个log&quot;)(.-location js/window)(.-search (.-location js/window)) cljs还提供了cljs和js互转的函数clj-&gt;js和js-&gt;clj看看例子： 1(def js-object (clj-&gt;js :a 1 :b [1 2 3] :c #&#123;"d" true :e nil&#125;)) 输出结果12345&#123; &quot;a&quot;: 1, &quot;b&quot;: [1, 2, 3], &quot;c&quot;: [null, &quot;d&quot;, &quot;e&quot;, true]&#125; 也可以简化用#js12345678910(def js-object #js &#123;:a 1 :b #js [1 2 3] :c #js ["d" true :e nil]&#125;)# 输出&#123; "c": &#123; "e": null, "d": true &#125;, "b": [1, 2, 3 ], "a": 1&#125; js有时候需要转成cljs，用js-&gt;clj实现,比如：12345678(require &apos;[reagent.core :as r])(defn get-form &quot;返回又From.create创建的 `form` 这个函数只能在form内部调用, 因为使用了reaget/current-component.&quot; [] (-&gt; (r/current-component) (r/props) (js-&gt;clj :keywordize-keys true) (:form))) 大神在4clojure博客上也有js操作DOM和引入highcharts的使用的例子。更多交互的操作参考ClojureScript: JavaScript Interop 和Clojurescript interop with javascript 用figwheel编译工程，启动服务三步启动 figwheel：Using the Figwheel REPL within nREPL在emacs里启动cider-jack-in-cljs选择figwheel123(use &apos;figwheel-sidecar.repl-api)(start-figwheel!)(cljs-repl) 在alk项目里的示例：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556user&gt; (use 'figwheel-sidecar.repl-api)niluser&gt; (start-figwheel!)Figwheel: Starting server at http://0.0.0.0:3449Figwheel: Watching build - patient-appCompiling build :patient-app to "target/cljsbuild/public/patientjs/app.js" from ["src/cljs/patient" "src/cljc" "env/dev/cljs/patient"]...Successfully compiled build :patient-app to "target/cljsbuild/public/patientjs/app.js" in 5.142 seconds.Figwheel: Starting CSS Watcher for paths ["resources/public/css"]Figwheel: Starting nREPL server on port: 7002niluser&gt; (cljs-repl)Launching ClojureScript REPL for build: patient-appFigwheel Controls: (stop-autobuild) ;; stops Figwheel autobuilder (start-autobuild id ...) ;; starts autobuilder focused on optional ids (switch-to-build id ...) ;; switches autobuilder to different build (reset-autobuild) ;; stops, cleans, and starts autobuilder (reload-config) ;; reloads build config and resets autobuild (build-once id ...) ;; builds source one time (clean-builds id ..) ;; deletes compiled cljs target files (print-config id ...) ;; prints out build configurations (fig-status) ;; displays current state of system (figwheel.client/set-autoload false) ;; will turn autoloading off (figwheel.client/set-repl-pprint false) ;; will turn pretty printing off Switch REPL build focus: :cljs/quit ;; allows you to switch REPL to another build Docs: (doc function-name-here) Exit: :cljs/quit Results: Stored in vars *1, *2, *3, *e holds last exception objectPrompt will show when Figwheel connects to your applicationTo quit, type: :cljs/quitnil cljs.user&gt; (fig-status) cljs.user&gt; (fig-status) Figwheel System Status----------------------------------------------------Watching builds: [patient-app]Client Connections patient-app: 1 connection----------------------------------------------------nilcljs.user&gt; (build-once doctor-app)Figwheel: Building once - doctor-appCompiling build :doctor-app to "target/cljsbuild/public/doctorjs/app.js" from ["src/cljs/doctor" "src/cljc" "env/dev/cljs/doctor"]...Successfully compiled build :doctor-app to "target/cljsbuild/public/doctorjs/app.js" in 14.038 seconds.nilcljs.user&gt; (fig-status) Figwheel System Status----------------------------------------------------Watching builds: [patient-app]Client Connections patient-app: 0 connections doctor-app: 1 connection----------------------------------------------------nilcljs.user&gt; 用浏览器链接后可以在repl里查看状态1(fig-status) 还有其他操作，控制台有提示1234567891011121314151617181920user&gt; (cljs-repl)Launching ClojureScript REPL for build: devFigwheel Controls: (stop-autobuild) ;; stops Figwheel autobuilder (start-autobuild [id ...]) ;; starts autobuilder focused on optional ids (switch-to-build id ...) ;; switches autobuilder to different build (reset-autobuild) ;; stops, cleans, and starts autobuilder (reload-config) ;; reloads build config and resets autobuild (build-once [id ...]) ;; builds source one time (clean-builds [id ..]) ;; deletes compiled cljs target files (print-config [id ...]) ;; prints out build configurations (fig-status) ;; displays current state of system Switch REPL build focus: :cljs/quit ;; allows you to switch REPL to another build Docs: (doc function-name-here) Exit: Control+C or :cljs/quit Results: Stored in vars *1, *2, *3, *e holds last exception objectPrompt will show when Figwheel connects to your applicationTo quit, type: :cljs/quitcljs.user&gt;]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>cljs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins + statistics 实现代码统计]]></title>
    <url>%2F2019%2F08%2F26%2Fjenkins%20%2B%20statistics%20%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[git 的statistics统计分页，待页面 简书地址一个不错的代码统计插件statistics 安装statistics需要先在收集代码的服务器上搭建statistics，具体步骤上面链接有。我是centos系统，因此只需一句命令：1yum install gitstats jenkins配置12345#执行脚本echo &quot;git stats start&quot;/opt/auto-deploy-scripts/code_statistics.sh questionnaire masterecho &quot;git stats end&quot;echo &quot;review address:http://10.138.46.76:8888/questionnaire/&quot; 收集脚本code_statistics.sh1234567891011121314151617181920212223242526272829303132333435[root@1169CKT questionnaire]# vi /opt/auto-deploy-scripts/code_statistics.sh#!/bin/bashname=$1branch=$2if [ name == &quot;&quot; ] ;then echo &quot;project name is null&quot; exit 5else if [ branch == &quot;&quot; ] ;then branch = master fi echo &quot;Deploy $&#123;branch&#125; of $&#123;name&#125; project !&quot; cd /opt/chuangke/gitstats/projects/$&#123;name&#125;/ git pull git checkout $&#123;branch&#125; cd /opt/chuangke/gitstats/gitstats/ rm -rf /opt/chuangke/gitstats/result/$&#123;name&#125;/* ./gitstats /opt/chuangke/gitstats/projects/$&#123;name&#125; /opt/chuangke/gitstats/result/$&#123;name&#125;/ echo &quot;Deploy success!&quot;fi 关于脚本的一点解释 两个参数，第一个是项目名，第二个是分支名 /opt/chuangke/gitstats/projects/${name}/目录是$name项目从git库pull下来的目录，也就是要统计的目标项目。 /opt/chuangke/gitstats/result/${name}/目录是$name项目统计完以后生成的静态文件目录，也是nginx要访问的目录。 gitstats项目的目录下执行gitstats脚本的第一个参数是要统计的项目，第二个参数是统计文件存放的目录 nginx 配置12345678910111213141516171819202122232425262728293031323334353637server &#123; listen 8888; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; #location / &#123; # root html; # index index.html index.htm; #&#125; index index.html index.htm; client_max_body_size 100m; location /questionnaire &#123; alias /opt/chuangke/gitstats/result/questionnaire; &#125; location /portal &#123; alias /opt/chuangke/gitstats/result/Portal; &#125; location /portalmanage &#123; alias /opt/chuangke/gitstats/result/portalmanage; &#125; error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125;&#125; 来个截图 注意配置的nginx要能在浏览器访问，需要保证centos的防火墙配置哟。12345678910111213141516开启端口[root@centos7 ~]# firewall-cmd --zone=public --add-port=80/tcp --permanent查询端口号80 是否开启：[root@centos7 ~]# firewall-cmd --query-port=80/tcp重启防火墙：[root@centos7 ~]# firewall-cmd --reload查询有哪些端口是开启的:[root@centos7 ~]# firewall-cmd --list-port]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springboot 之 利用logback发送异常警告邮件]]></title>
    <url>%2F2019%2F08%2F24%2FSpringboot%20%E4%B9%8B%20%E5%88%A9%E7%94%A8logback%E5%8F%91%E9%80%81%E5%BC%82%E5%B8%B8%E8%AD%A6%E5%91%8A%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[利用logback自动将异常邮件发送到运维邮箱里。 简书地址 logback作为默认的日志实现在springboot项目里很多，尤其是有了lombok。 log打到配置文件里，并且分sql、info、error这些都太easy，随后我会附上我的配置。 那么怎么用这东西将异常邮件发送给运维人员呢？ properties配置123456789logback.logdir=/opt/chuangke/log/pre/apilogback.appname=mobileofficespring.mail.host=smtp.exmail.qq.comspring.mail.username=mailtest@3vyd.comspring.mail.password=xxxspring.mail.default-encoding=UTF-8spring.mail.error.subject=[ERROR] in project namespring.mail.error.to=marvin.ma@3vyd.com,303764416@qq.com 多人时，邮箱之间用英文逗号分隔 logback文件跟发送邮件相关的时这几句123456789101112131415161718192021222324252627282930313233 &lt;!-- 邮件配置 --&gt; &lt;springProperty scope="context" name="smtpHost" source="spring.mail.host" /&gt; &lt;springProperty scope="context" name="username" source="spring.mail.username" /&gt; &lt;springProperty scope="context" name="password" source="spring.mail.password" /&gt; &lt;springProperty scope="context" name="mailSubject" source="spring.mail.error.subject" /&gt; &lt;springProperty scope="context" name="mailTo" source="spring.mail.error.to" /&gt; &lt;appender name="MAIL" class="ch.qos.logback.classic.net.SMTPAppender"&gt; &lt;smtpHost&gt;$&#123;smtpHost&#125;&lt;/smtpHost&gt; &lt;smtpPort&gt;25&lt;/smtpPort&gt; &lt;username&gt;$&#123;username&#125;&lt;/username&gt; &lt;password&gt;$&#123;password&#125;&lt;/password&gt; &lt;SSL&gt;false&lt;/SSL&gt; &lt;asynchronousSending&gt;true&lt;/asynchronousSending&gt; &lt;to&gt;$&#123;mailTo&#125;&lt;/to&gt; &lt;from&gt;$&#123;username&#125;&lt;/from&gt; &lt;subject&gt;$&#123;mailSubject&#125;: %logger&#123;0&#125; &lt;/subject&gt; &lt;charsetEncoding&gt;UTF-8&lt;/charsetEncoding&gt; &lt;cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker"&gt; &lt;!-- 每个电子邮件只发送一个日志条目 --&gt; &lt;bufferSize&gt;1&lt;/bufferSize&gt; &lt;/cyclicBufferTracker&gt; &lt;layout class="ch.qos.logback.classic.html.HTMLLayout"/&gt; &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;/appender&gt;&lt;logger name="com.hczt" level="INFO" additivity="false"&gt; &lt;appender-ref ref="fileInfoLog" /&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;appender-ref ref="MAIL"/&gt;&lt;/logger&gt; 在哪个级别或者包上需要将异常发送邮件，就appender上MAIL就可以了。 完整的logback-spring.xml文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145&lt;configuration&gt; &lt;!-- application.properties 传递参数，不能使用logback自带的&lt;property&gt;标签 --&gt; &lt;springProperty scope="context" name="appname" source="logback.appname" /&gt; &lt;springProperty scope="context" name="logdir" source="logback.logdir" /&gt; &lt;contextName&gt;$&#123;appname&#125;&lt;/contextName&gt; &lt;!-- 邮件配置 --&gt; &lt;springProperty scope="context" name="smtpHost" source="spring.mail.host" /&gt; &lt;springProperty scope="context" name="username" source="spring.mail.username" /&gt; &lt;springProperty scope="context" name="password" source="spring.mail.password" /&gt; &lt;springProperty scope="context" name="mailSubject" source="spring.mail.error.subject" /&gt; &lt;springProperty scope="context" name="mailTo" source="spring.mail.error.to" /&gt; &lt;appender name="MAIL" class="ch.qos.logback.classic.net.SMTPAppender"&gt; &lt;smtpHost&gt;$&#123;smtpHost&#125;&lt;/smtpHost&gt; &lt;smtpPort&gt;25&lt;/smtpPort&gt; &lt;username&gt;$&#123;username&#125;&lt;/username&gt; &lt;password&gt;$&#123;password&#125;&lt;/password&gt; &lt;SSL&gt;false&lt;/SSL&gt; &lt;asynchronousSending&gt;true&lt;/asynchronousSending&gt; &lt;to&gt;$&#123;mailTo&#125;&lt;/to&gt; &lt;from&gt;$&#123;username&#125;&lt;/from&gt; &lt;subject&gt;$&#123;mailSubject&#125;: %logger&#123;0&#125; &lt;/subject&gt; &lt;charsetEncoding&gt;UTF-8&lt;/charsetEncoding&gt; &lt;cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTracker"&gt; &lt;!-- 每个电子邮件只发送一个日志条目 --&gt; &lt;bufferSize&gt;1&lt;/bufferSize&gt; &lt;/cyclicBufferTracker&gt; &lt;layout class="ch.qos.logback.classic.html.HTMLLayout"/&gt; &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 开发环境 全部输出到控制台--&gt; &lt;springProfile name="dev"&gt; &lt;!-- 输出到控制台 --&gt; &lt;appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;layout class="ch.qos.logback.classic.PatternLayout"&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- 指定最基础的日志输出级别 --&gt; &lt;root level="INFO"&gt; &lt;appender-ref ref="STDOUT"/&gt; &lt;/root&gt; &lt;/springProfile&gt; &lt;!-- 测试环境+准生产环境+生产环境 输出到文件 --&gt; &lt;springProfile name="test,pre,prod"&gt; &lt;!-- 输出到文件-info级别 --&gt; &lt;appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;!-- 如果只是想要Info级别的日志，只是过滤info还是会输出Error日志，因为Error的级别高，使用filter，可以避免输出Error日志 --&gt; &lt;filter class="ch.qos.logback.classic.filter.LevelFilter"&gt; &lt;!--过滤 Error--&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;!--匹配到就禁止--&gt; &lt;onMatch&gt;DENY&lt;/onMatch&gt; &lt;!--没有匹配到就允许--&gt; &lt;onMismatch&gt;ACCEPT&lt;/onMismatch&gt; &lt;/filter&gt; &lt;!-- 日志名称，如果没有File属性，那么只会使用FileNamePattern的文件路径规则 如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期 即，&lt;File&gt;的日志都是当天的 --&gt; &lt;File&gt;$&#123;logdir&#125;/info.$&#123;appname&#125;.log&lt;/File&gt; &lt;!-- 滚动策略，按照时间滚动 --&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;!-- 文件路径，定义了日志的切分方式 把每一天的日志归档到一个文件中，以防止日志填满整个磁盘空间 --&gt; &lt;FileNamePattern&gt;$&#123;logdir&#125;/info.$&#123;appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt; &lt;/rollingPolicy&gt; &lt;!-- 日志输出编码格式化 --&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L [%X&#123;requestId&#125;] - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!-- 输出到文件-error --&gt; &lt;appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt; &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;Error&lt;/level&gt; &lt;/filter&gt; &lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则 如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天的日志改名为今天的日期。 即，&lt;File&gt; 的日志都是当天的。 --&gt; &lt;File&gt;$&#123;logdir&#125;/error.$&#123;appname&#125;.log&lt;/File&gt; &lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间--&gt; &lt;FileNamePattern&gt;$&#123;logdir&#125;/error.$&#123;appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt; &lt;/rollingPolicy&gt; &lt;!--日志输出编码格式化--&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L [%X&#123;requestId&#125;] - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name="sqlLog" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;File&gt;$&#123;logdir&#125;/sql.$&#123;appname&#125;.log&lt;/File&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;FileNamePattern&gt;$&#123;logdir&#125;/sql.$&#123;appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt; &lt;!--只保留最近7天的日志--&gt; &lt;maxHistory&gt;7&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;!--日志输出编码格式化--&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level %logger Line:%-3L [%X&#123;requestId&#125;] - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;logger name="com.hczt" level="INFO" additivity="false"&gt; &lt;appender-ref ref="fileInfoLog" /&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;appender-ref ref="MAIL"/&gt; &lt;/logger&gt; &lt;logger name="com.haier" level="INFO" additivity="false"&gt; &lt;appender-ref ref="fileInfoLog" /&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;appender-ref ref="MAIL"/&gt; &lt;/logger&gt; &lt;logger name="org" level="ERROR" additivity="false"&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;appender-ref ref="MAIL"/&gt; &lt;/logger&gt; &lt;logger name="p6spy" level="INFO" additivity="false"&gt; &lt;appender-ref ref="sqlLog" /&gt; &lt;/logger&gt; &lt;root level="ERROR"&gt; &lt;appender-ref ref="fileErrorLog" /&gt; &lt;appender-ref ref="MAIL"/&gt; &lt;/root&gt; &lt;/springProfile&gt;&lt;/configuration&gt; 附上截图 完美！！]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springboot 之 配置文件属性加密]]></title>
    <url>%2F2019%2F08%2F22%2FSpringboot%20%E4%B9%8B%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E5%8A%A0%E5%AF%86%2F</url>
    <content type="text"><![CDATA[使用Jasypt对springboot项目的配置属性加密。简书地址 写这篇的目的不是为了创新，而是备忘，最近学习clojure，java基本上已经放下了，但是曾今用过的东西如果不记录一下，以后用起来估计连查什么关键字都不知道了，因此在主页上做个笔记。 原来我们写的springboot的配置文件大概是这样的12345spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;useSSL=false username: root password: 123456 怎么看也是赤裸裸的，大概你也想过要是能加密就好了，如果只是想想的话，肯定不会自己加密，这里就介绍个非常方便易用的加密工具jasypt。 常规使用在springboot中引入依赖12345 &lt;dependency&gt; &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt;&lt;/dependency&gt; 修改后的配置文件123456789101112131415spring: datasource: url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;zeroDateTimeBehavior=convertToNull&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;tinyInt1isBit=false # 对应用户名 root ，密码 123456 username: ENC[KHRM9dKY8KykzzYbt8rRZQ==] password: ENC[RWmQMxlcukotJAb36PrKSA==]jasypt: encryptor: # 任意的随机字符串均可 password: SBPstLlrFzXW01Okb62R95qvpj4J83Dn property: # 自定义属性规则，默认前缀是“ENC(”，后缀为“)” prefix: &quot;ENC[&quot; suffix: &quot;]&quot; 这里只加密了用户名和密码，其实所有属性，报过jdbc的url也是可以用同样的方式加密的。留意到上面这段配置的用户名和密码是 ENC[xxx] 这种格式的，其中 ENC[] 是自定义配置的，这也是 Jasypt 能正常识别待解密数据的规则，那其中的加密串又是从哪来的呢？当然是运算出来的。最简单的配置，开发者只需要再补充完 jasypt.encryptor.password=xxx 属性即可（同上，还支持使用 DER、PEM 这种证书的 private/public keys 加解密方式），具体的生成代码在下方： 1234567891011121314151617181920212223242526272829@Slf4j@SpringBootApplication@EnableEncryptablePropertiespublic class JasyptSpringBootApplication &#123; public static void main(String[] args) &#123; ConfigurableApplicationContext context = SpringApplication.run(JasyptSpringBootApplication.class, args); JasyptSpringBootApplication application = context.getBean(JasyptSpringBootApplication.class); // 这里可以将明文(用户名、密码)转换成相应密文 application.jasypt("root"); application.jasypt("123456"); // 不过程序最后还是通过明文信息进行数据库连接 HikariDataSource hikariDataSource = (HikariDataSource) context.getBean(DataSource.class); log.info("DB username: &#123;&#125; , password: &#123;&#125;", hikariDataSource.getUsername(), hikariDataSource.getUsername()); &#125; @Resource private StringEncryptor stringEncryptor; public void jasypt(String text) &#123; // 即使是相同明文，但这里每次生成的都是不同的密文 String encryptedText = stringEncryptor.encrypt(text.trim()); String decryptedText = stringEncryptor.decrypt(encryptedText); log.info("ORIGINAL: &#123;&#125; ; ENCRYPTED: &#123;&#125; ; DECRYPTED: &#123;&#125;", text, encryptedText, decryptedText); &#125;&#125; 在开发环境要切换jdbc，或者看看密码到底是啥，为啥报jdbc链接错误时，可以用这个12345678910111213141516171819202122232425262728293031323334353637import lombok.extern.slf4j.Slf4j;import org.jasypt.encryption.StringEncryptor;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import javax.annotation.Resource;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTest(classes = MobileOfficeApplication.class)@Slf4jpublic class MobileOfficeApplicationTests &#123; //@Test public void te()&#123; System.out.println(userService.encodePwd()); &#125; @Autowired private StringEncryptor stringEncryptor; @Test public void contextLoads() &#123; &#125; @Test public void testEncrypt() &#123; System.out.println(&quot;=====================================&quot;); System.out.println(&quot;key1:&quot; + stringEncryptor.encrypt(&quot;jdbc:p6spy:mysql://127.0.0.1:3306/chuangke?characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Hongkong&amp;autoReconnect=true\n&quot;)); System.out.println(&quot;key2:&quot; + stringEncryptor.encrypt(&quot;root&quot;)); System.out.println(&quot;key3:&quot; + stringEncryptor.encrypt(&quot;root&quot;)); System.out.println(&quot;=====================================&quot;); &#125;&#125; 进阶上面的例子是将password设置在与密文一起的配置文件中，这样方便是方便，但是有密码，有密文，知道加密算法，谁也可以解密呀（安全是相对的，其实这个已经很不错了），那有么有更安全的方式呢？当然有！！！！有两种办法: 部署时设置password为了防止salt(盐)泄露,反解出密码.可以在项目部署的时候使用命令传入salt(盐)值 1java -jar -Djasypt.encryptor.password=G0CvDz7oJn6 xxx.jar 将password配置到服务器的环境变量里 1234567891011# 打开/etc/profile文件vim /etc/profile#文件末尾插入export JASYPT_PASSWORD = G0CvDz7oJn6#编译 source /etc/profile#运行 java -jar -Djasypt.encryptor.password=$&#123;JASYPT_PASSWORD&#125; xxx.jar 参考还将密码明文写在配置文件？试试 Jasypt Spring Boot]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改gitlab，gitosis-admin的默认端口22后]]></title>
    <url>%2F2019%2F08%2F19%2F%E4%BF%AE%E6%94%B9gitlab%EF%BC%8Cgitosis-admin%E7%9A%84%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A322%E5%90%8E%2F</url>
    <content type="text"><![CDATA[本地配置远端server的端口供ssh使用 简书地址 以gitosis-admin作为git代码库管理工具后，修改了默认的22端口，此时ssh的连接自然拿不到代码，怎么办呢？ 在本地.ssh的目录下创建一个config文件，没有扩展名哦。 内容如下:1234567host 106.14.1.1hostname 106.14.1.1port 2093host git.server.comhostname git.server.comport 2093 这就是连接到hostname的2093端口的意思。 添加了本配置就可以访问git服务器了。]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用serveo一秒钟实现内网穿透]]></title>
    <url>%2F2019%2F08%2F09%2F%E4%BD%BF%E7%94%A8serveo%E4%B8%80%E7%A7%92%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[一点不夸张，1秒钟！！！！1ssh -R 80:localhost:3000 serveo.net 简书地址在此之前，我一直用ngrok，自己也总结过使用ngrok一分钟实现内网穿透,简单的将本地服务映射成公网访问的地址，反正我是用不了1分钟。 今天偶然看到一篇文章完败ngrok?一键开启内网穿透神器serveo，这次又颠覆了我的认知，于是决定花1秒钟体验下。 真的是1秒钟哦，看看命令：12345678Last login: Fri Aug 9 08:28:43 on console➜ ~ ssh -R 80:localhost:3000 serveo.netThe authenticity of host &apos;serveo.net (159.89.214.31)&apos; can&apos;t be established.RSA key fingerprint is SHA256:07jcXlJ4SkBnyTmaVnmTpXuBiRx2+Q2adxbttO9gt0M.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &apos;serveo.net,159.89.214.31&apos; (RSA) to the list of known hosts.Forwarding HTTP traffic from https://vilicus.serveo.netPress g to start a GUI session and ctrl-c to quit. 访问试试： 果真六六六~~~~ 以后就用这个了。 其他高阶使用用的时候上官网查询，如果我用到了我再完善这篇。]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>server</tag>
        <tag>网络</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure web(luminus)接口开发]]></title>
    <url>%2F2019%2F07%2F31%2Fclojure%20web(luminus)%E6%8E%A5%E5%8F%A3%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[clojure中调用java,解决jar包依赖冲突 简书地址 项目框架本项目使用luminus做模板，参考luminus-template,执行下面的命令init工程:1lein new luminus alk-wxapi +mysql +service 相关文档 后台基础框架luminus 后台sql支持HugSQL 后台web框架 前后端路由框架 前端状态管理框架 前端PC版UI框架-antizer clojure 函数定义及demo查询 clojure编程风格指南 spec guide 单元测试 项目运行在命令行工具中启动用lein启动一个repl，lein没有安装的需要自行百度。1234567891011121314➜ ~ cd git/redcreation/alk-wxapi➜ alk-wxapi git:(master) lein replnREPL server started on port 50529 on host 127.0.0.1 - nrepl://127.0.0.1:50529REPL-y 0.4.3, nREPL 0.6.0Clojure 1.10.0Java HotSpot(TM) 64-Bit Server VM 1.8.0_192-b12 Docs: (doc function-name-here) (find-doc &quot;part-of-name-here&quot;) Source: (source function-name-here) Javadoc: (javadoc java-object-or-class-here) Exit: Control+D or (exit) or (quit) Results: Stored in vars *1, *2, *3, an exception in *euser=&gt; 然后在Intellij Idea中远程连接 run这个配置，然后在下面的repl环境中执行(start)即启动server。 常见问题及解决方案1、处理request实际项目开发中经常需要打印request内容，这部分在springMVC中一般用aop来解决。clojure中没有对象，更别提aop了，但是没有框架的束缚，处理起request和response反而更加灵活，是用clojure的middleware处理的，比如一个打印出入参的middleware如下：123456789101112131415161718(require '[clojure.tools.logging :as log])(defn log-wrap [handler] (fn [request] (if-not (:dev env) (let [request-id (java.util.UUID/randomUUID)] (log/info (str "\n================================ REQUEST START ================================" "\n request-id:" request-id "\n request-uri: " (:uri request) "\n request-method: " (:request-method request) "\n request-query: " (:query (:parameters request)) "\n request-body: " (:body (:parameters request)))) (let [res (handler request)] (log/info (str "response: " (:body res) "\n request-id:" request-id)) (log/info (str "\n================================ response END ================================")) res)) (handler request)))) 将此swap配置在全局路由中即可,一般是有个统一配置format的middleware的，放在一起即可。 2、在handler中使用request里自定义的对象有了上面说的middleware能处理request，那么往request里放个对象，自然不在话下，比如讲header里的token转换成user对象置于request中，在后面handler中直接是用。1234567891011(defn token-wrap [handler] (fn [request] (let [token (get-in request [:headers "token"]) user (-&gt; token str-&gt;jwt :claims)] (log/info (str "解析后的user：" (-&gt; token str-&gt;jwt :claims))) (log/info (str "******* the current user is " (:iss user))) (handler (assoc request :current-user (:iss user)))))) 3、hendler获取body，path，query的参数在handle前后，可以用(keys request)查看request里自己传入的参数，那么在handler里怎么获取这些参数呢,在Luminus中定义了三种与springMVC类似的参数关键词，对应关系如下： mvc request luminus 含义 @RequestParam query-params parameters -&gt; query query参数，URL后面问号的参数，或form的参数 @PathVariable path-params parameters -&gt; path path参数，URL中/的参数 @RequestBody body-params parameters -&gt;body post/put方法里的body参数 这三个keyword是ring自身的处理，是原始request里的参数，但是query-params参数被处理成map的key不是keywords，是普通的string，得用(query-params “id”)这样来取值。因此推荐如下示例使用：推荐从request的parameters中获取，关键字分别是query，path， body。获取的例子：1234567891011121314151617181920212223242526272829303132333435363738394041424344;;非推荐方式;;api返回结果: &#123;"data": "path params: &#123;:id \"1\"&#125;\n query params: &#123;\"name\" \"2\"&#125;\n body params: &#123;:message \"22\"&#125;"&#125;["/path/bad/:id" &#123;:post &#123;:summary "路径上传参--不推荐此方法获取--query参数key变成了str" :parameters &#123;:path &#123;:id int?&#125; :query &#123;:name string?&#125; :body &#123;:message string?&#125;&#125; :handler (fn [&#123;:keys [path-params query-params body-params]&#125;] &#123;:status 200 :body &#123;:data (str "path params: " path-params "\n query params: " query-params "\n body params: " body-params)&#125;&#125;)&#125;&#125;];;good handler api返回结果:;&#123;; "code": 1,; "message": "操作成功",; "data": "path params: &#123;:id 1&#125;, query params: &#123;:name \"2\"&#125;, body params: &#123;:message \"22\"&#125; ";&#125;["/path/good/:id" &#123;:post &#123;:summary "路径上传参--GOOD--获取到3种map" :parameters &#123;:path &#123;:id int?&#125; :query &#123;:name string?&#125; :body &#123;:message string?&#125;&#125; :handler (fn [&#123;&#123;:keys [body query path]&#125; :parameters&#125;] (ok (format "path params: %s, query params: %s, body params: %s " path query body)))&#125;&#125;];;good handler, 接口里三种参数都有，并且想直接获取map中key的vals;; api返回结果:;&#123;;"code": 1,;"message": "操作成功",;"data": "path params 'id': 1, query params 'name': 2 , body params: &#123;:message \"22\"&#125; ";&#125;["/path/good-all-params/:id" &#123;:post &#123;:summary "路径上传参--GOOD--直接得到key的val" :parameters &#123;:path &#123;:id int?&#125; :query &#123;:name string?&#125; :body &#123;:message string?&#125;&#125; :handler (fn [&#123;&#123;:keys [body]&#125; :parameters &#123;&#123;:keys [id]&#125; :path&#125; :parameters &#123;&#123;:keys [name]&#125; :query&#125; :parameters&#125;] (ok (format "path params 'id': %s, query params 'name': %s , body params: %s " id name body)))&#125;&#125;] 原因分析：我们在handler.clj的ring/router后面使用[reitit.ring.middleware.dev :as dev]的{:reitit.middleware/transform dev/print-request-diffs}方法打印出中间件的处理逻辑， 结果如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373--- Middleware --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;&#125;--- Middleware :reitit.ring.middleware.parameters/parameters --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;&#125;--- Middleware :reitit.ring.middleware.muuntaja/format-negotiate --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, +:muuntaja/request #muuntaja.core.FormatAndCharset &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, +:muuntaja/response #muuntaja.core.FormatAndCharset &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;&#125;--- Middleware :reitit.ring.middleware.muuntaja/format-response --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, :muuntaja/request &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, :muuntaja/response &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;&#125;--- Middleware :reitit.ring.middleware.exception/exception --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, :muuntaja/request &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, :muuntaja/response &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;&#125;--- Middleware :reitit.ring.middleware.muuntaja/format-request --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, :muuntaja/request &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, :muuntaja/response &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, +:body-params &#123;:message &quot;22&quot;&#125;&#125;--- Middleware :reitit.ring.coercion/coerce-request --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :body-params &#123;:message &quot;22&quot;&#125;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, :muuntaja/request &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, :muuntaja/response &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, +:parameters &#123;:body &#123;:message &quot;22&quot;&#125;, :path &#123;:id 1&#125;, :query &#123;:name &quot;2&quot;&#125;&#125;&#125;2019-06-22 11:09:16,537 [XNIO-2 task-2] INFO alk-wxapi.middleware.log-interceptor - ================================ REQUEST START ================================ request-id:8ddb3169-e72f-4b90-8811-d500c50d3057 request-uri: /api/guestbooks/path/good-all-params/1 request-method: :post request-query: &#123;:name &quot;2&quot;&#125; request-body: &#123;:message &quot;22&quot;&#125; --- Middleware --- &#123;:body #&lt;io.undertow.io.UndertowInputStream@39931c66&gt;, :body-params &#123;:message &quot;22&quot;&#125;, :character-encoding &quot;ISO-8859-1&quot;, :content-length 21, :content-type &quot;application/json&quot;, :context &quot;&quot;, :cookies &#123;&quot;JSESSIONID&quot; &#123;:value &quot;GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU&quot;&#125;, &quot;_ga&quot; &#123;:value &quot;GA1.1.521496834.1555489511&quot;&#125;, &quot;_gid&quot; &#123;:value &quot;GA1.1.947080805.1561170619&quot;&#125;&#125;, :flash nil, :form-params &#123;&#125;, :handler-type :undertow, :headers &#123;&quot;accept&quot; &quot;application/json&quot;, &quot;accept-encoding&quot; &quot;gzip, deflate, br&quot;, &quot;accept-language&quot; &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7&quot;, &quot;connection&quot; &quot;keep-alive&quot;, &quot;content-length&quot; &quot;21&quot;, &quot;content-type&quot; &quot;application/json&quot;, &quot;cookie&quot; &quot;_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619&quot;, &quot;host&quot; &quot;localhost:3000&quot;, &quot;origin&quot; &quot;http://localhost:3000&quot;, &quot;referer&quot; &quot;http://localhost:3000/api/api-docs/index.html&quot;, &quot;user-agent&quot; &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot;&#125;, :multipart-params &#123;&#125;, :parameters &#123;:body &#123;:message &quot;22&quot;&#125;, :path &#123;:id 1&#125;, :query &#123;:name &quot;2&quot;&#125;&#125;, :params &#123;:name &quot;2&quot;&#125;, :path-info &quot;/api/guestbooks/path/good-all-params/1&quot;, :path-params &#123;:id &quot;1&quot;&#125;, :query-params &#123;&quot;name&quot; &quot;2&quot;&#125;, :query-string &quot;name=2&quot;, :remote-addr &quot;0:0:0:0:0:0:0:1&quot;, :request-method :post, :scheme :http, :server-exchange #&lt;io.undertow.server.HttpServerExchange@78f2e776 HttpServerExchange&#123; POST /api/guestbooks/path/good-all-params/1 request &#123;Accept=[application/json], Accept-Language=[zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7], Accept-Encoding=[gzip, deflate, br], Origin=[http://localhost:3000], User-Agent=[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36], Connection=[keep-alive], Content-Length=[21], Content-Type=[application/json], Cookie=[_ga=GA1.1.521496834.1555489511; JSESSIONID=GpSiQENkmzM7qQwqWdYxjehYKvNKoEGMG6MIwqwU; _gid=GA1.1.947080805.1561170619], Referer=[http://localhost:3000/api/api-docs/index.html], Host=[localhost:3000]&#125; response &#123;Server=[undertow]&#125;&#125;&gt;, :server-name &quot;localhost&quot;, :server-port 3000, :session nil, :ssl-client-cert nil, :uri &quot;/api/guestbooks/path/good-all-params/1&quot;, :muuntaja/request &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;, :muuntaja/response &#123;:charset &quot;utf-8&quot;, :format &quot;application/json&quot;, :raw-format &quot;application/json&quot;&#125;&#125; 可以看到在reitit.ring.coercion/coerce-request中间件处理后request里增加了:parameters { :body {:message &quot;22&quot;}, :path {:id 1}, :query {:name &quot;2&quot;}}3种类型一致的map，这就是我们为什么推荐使用的原因。 handler里获取request自定义的对象： 那么，在上一步handle中加入到request中了一个current-user怎么获取和使用呢？其实，body-params，query-params这些也只是从request中获取到的而已，既然能从request中获取这些，那么request里的其他所有自然也能在handler中获取，看下面的例子：123456789101112131415161718["/reset/pwd" &#123;:post &#123;:summary "修改密码" :parameters &#123;:body (s/keys :req-un [::old-pwd ::new-pwd])&#125; :handler (fn [&#123;&#123;&#123;:keys [old-pwd new-pwd]&#125; :body&#125; :parameters :as request&#125;] (let [current-id (-&gt; request :current-user :user-id) db-user (db/get-user-id &#123;:user-id current-id&#125;)] (if (check-old-pwd old-pwd (:password db-user)) (do (conman.core/with-transaction [*db*] (db/update-pwd! &#123;:password (d/sha-256 new-pwd) :user-id current-id&#125;)) &#123;:status 200 :body &#123;:code 1 :message "修改成功，请用新密码登录"&#125;&#125;) &#123;:status 400 :body &#123;:code 0 :message "密码错误，请输入正确的密码！"&#125;&#125;)))&#125;&#125;] :as request的意思是包含前面指定获取的参数的所有。 4、分页，动态hugsql在springboot里习惯使用spring data jpa，分页使用Pageable、PageRequest，还能携带Sort，放回结果自动分页，确实方便。在luminusweb里没有看到分页的说明，于是在底层的HugSQL里找到的方案,举个动态sql，并且使用like模糊查询的例子：123456789101112131415161718192021222324252627-- :name get-patient-like :? :*-- :doc 模糊查询患者列表SELECT/*~ (if (:count params) */ count(*) AS &apos;total-elements&apos;/*~*/ p.`patient_id`, p.`name`, p.`headimgurl`, p.`patient_no`/*~ ) ~*/FROM `t_patient` pWHERE p.deleted = FALSE AND p.`hospital_id` = :hospital-id/*~ (if (= nil (:keywords params)) */ AND 1=1/*~*/ AND ( p.`name` LIKE :keywords OR p.mobile LIKE :keywords OR p.patient_no LIKE :keywords )/*~ ) ~*/ORDER BY p.`create_time` DESC--~ (if (:count params) &quot;;&quot; &quot;LIMIT :page, :size ;&quot;) 调用：1234567891011121314151617181920212223["/patient/search" &#123;:get &#123;:summary "医生模糊检索患者列表" :parameters &#123;:query (s/keys :req-un [:base/page :base/size] :opt-un [::keywords])&#125; :handler (fn [&#123;&#123;&#123;:keys [page size keywords]&#125; :query&#125; :parameters :as request&#125;] (let [hospital-id (-&gt; request :doctor :hospital-id)] &#123;:status 200 :body &#123;:code 1 :data &#123;:total-elements (-&gt;&gt; (db-pat/get-patient-like &#123;:count true :keywords (str "%" keywords "%") :hospital-id hospital-id&#125;) (map :total-elements) (first)) :content (db-pat/get-patient-like &#123;:page page :size size :hospital-id hospital-id :keywords (str "%" keywords "%")&#125;)&#125;&#125;&#125;))&#125;&#125;] 说明：接口的page,size为必须参数，keywords是非必须参数，sql中根据count的boolean值判断是不是求count，根据keywords是否有值判断是否加模糊查询条件，实现动态sql调用。更多hugSQL的高阶使用，使用时参考官网边用边学吧。 一个in查询的例子，下例中的type用逗号隔开传入: 12345678:get &#123;:summary "分页获取患者检查报告列表" :parameters &#123;:query (s/keys :req-un [:base/patient-id ::type])&#125; :handler (fn [&#123;&#123;&#123;:keys [type, patient-id]&#125; :query&#125; :parameters&#125;] &#123;:status 200 :body &#123;:code 1 :data (db/get-examine-reports &#123;:patient-id patient-id :types (str/split type #",")&#125;)&#125;&#125;)&#125; sql： 123456-- :name get-reports :? :*-- :doc 查询列表SELECT*FROM `t_report`WHERE `deleted` = FALSE AND `id` =:id AND `type` in (:v*:types) 调用处保证types是个array就行： 12345678:get &#123;:summary "获取报告列表" :parameters &#123;:query (s/keys :req-un [:base/id ::type])&#125; :handler (fn [&#123;&#123;&#123;:keys [type, id]&#125; :query&#125; :parameters&#125;] &#123;:status 200 :body &#123;:code 1 :data (db/get-reports &#123;:id id :types (str/split type #",")&#125;)&#125;&#125;)&#125; 批量操作,hugsql支持批量操作，语法是:t*，看看sql 1234-- :name batch-create-cure-reaction-detail! :! :n-- :doc: 新建INSERT INTO `t_cure_reaction_detail` (`main_id`, `type`, `dict_key_id`, `dict_key_name`, `dict_value_id`, `dict_value_name`) VALUES :t*:reaction-detail 一个UT： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748(ns alk-wxapi.routes.service.cure-reaction-service-test (:require [clojure.test :as t] [alk-wxapi.routes.service.cure-reaction-service :as sut] [alk-wxapi.db.db-patient-cure :as db] [alk-wxapi.db.core :refer [*db*]] [luminus-migrations.core :as migrations] [clojure.java.jdbc :as jdbc] [alk-wxapi.config :refer [env]] [mount.core :as mount]))(t/use-fixtures :once (fn [f] (mount/start #'alk-wxapi.config/env #'alk-wxapi.db.core/*db*) (migrations/migrate ["migrate"] (select-keys env [:database-url])) (f)))(def test-batch-create-cure-reaction-detail-data '[[1 "REACTION" 62 "哮喘症状" 68 "气闭"] [1 "REACTION" 58 "全身非特异性反应" 59 "发热"] [1 "DISPOSE" 86 "处理方式" 89 "局部处理(冰敷)"]])(t/deftest test-batch-create-cure-reaction-detail (jdbc/with-db-transaction [t-conn *db*] (jdbc/db-set-rollback-only! t-conn) (t/is (= 2 (db/batch-create-cure-reaction-detail-data! &#123;:reaction-detail test-batch-create-cure-reaction-detail-data&#125;))))) 执行结果： 123456789101112131415161718192021222324(alk-wxapi.db.db-patient-cure/batch-create-cure-reaction-detail! &#123;:reaction-detail [[1 &quot;REACTION&quot; 62 &quot;哮喘症状&quot; 68 &quot;气闭&quot;] [1 &quot;REACTION&quot; 58 &quot;全身非特异性反应&quot; 59 &quot;发热&quot;] [1 &quot;DISPOSE&quot; 86 &quot;处理方式&quot; 89 &quot;局部处理(冰敷)&quot;]]&#125;)=&gt; 32019-06-15 15:16:06,929 [nRepl-session-353b6f60-9fd8-415c-9baa-19f7eb4a97f9] INFO jdbc.sqlonly - batching 1 statements: 1: INSERT INTO `t_cure_reaction_detail` (`main_id`, `type`, `dict_key_id`, `dict_key_name`, `dict_value_id`, `dict_value_name`) VALUES (1,&apos;REACTION&apos;,62,&apos;哮喘症状&apos;,68,&apos;气闭&apos;),(1,&apos;REACTION&apos;,58,&apos;全身非特异性反应&apos;,59,&apos;发热&apos;),(1,&apos;DISPOSE&apos;,86,&apos;处理方式&apos;,89,&apos;局部处理(冰敷)&apos;) 需要注意的是传入的vector，里面也是vector，按照sql中的顺序，不是map结构。 5、mysql中的字段表名和字段下划线在clojure中用中线连接的统一适配druids提供了几个adapter，用来处理转换关系，比如有驼峰，中线等，我们使用连接符转换，即创建connection时加入kebab-case： 123456789(defstate ^:dynamic *db* :start (do (Class/forName "net.sf.log4jdbc.DriverSpy") (if-let [jdbc-url (env :database-url)] (conman/connect! &#123;:jdbc-url jdbc-url&#125;) (do (log/warn "database connection URL was not found, please set :database-url in your config, e.g: dev-config.edn") *db*))) :stop (conman/disconnect! *db*))(conman/bind-connection *db* &#123;:adapter (kebab-adapter)&#125; "sql/queries.sql") 这个adapter在init项目时已经引入了，就看使用不使用。 6、获取环境变量的值环境变量比较好获取，比如微信的配置和获取 12&#123;:weixin &#123;:app-id "wx9258d165932dad73" :secret "my-secret"&#125; 在dev/test/prod中配置结构相同， 1234567891011(require '[alk-wxapi.config :refer [env]])(defn get-weixin-access-token [code] (let [url (format "https://api.weixin.qq.com/sns/oauth2/access_token?appid=%s&amp;secret=%s&amp;code=%s&amp;grant_type=authorization_code" (-&gt; env :weixin :app-id) (-&gt; env :weixin :secret) code)] (log/info "请求微信access-token, url: %s" url) url)) 如果配置是一层，使用也只需写一层key。特别说明：在将redis的connetion从clj修改成从环境变量中获取时，也是一样的配置和获取，但是碰到了问题，在request里查看env中的redis的各项都有值，但是调用redis的地方却提示无法创建connection， 123456789101112131415(ns alk-wxapi.db.redis (:require [taoensso.carmine :as car :refer (wcar)] [alk-wxapi.config :refer [env]] [mount.core :refer [defstate]]))(def server1-conn :start &#123;:pool &#123;&#125; :spec &#123;:host (-&gt; env :redis-host) :port (-&gt; env :redis-port) :password (-&gt; env :redis-password) :timeout-ms (-&gt; env :redis-timeout-ms) :db (-&gt; env :redis-db)&#125;&#125;)(defmacro wcar* [&amp; body] `(car/wcar server1-conn ~@body)) 最后得知是因为env被定义了个state， 123456789101112(ns alk-wxapi.config (:require [cprop.core :refer [load-config]] [cprop.source :as source] [mount.core :refer [args defstate]]))(defstate env :start (load-config :merge [(args) (source/from-system-props) (source/from-env)])) 但是按照说明文档redis的conn是个常规的def定义的函数，但是它下面的使用是个宏defmacro，宏是在编译的执行的，因此在初始化时evn环没有ready，所以无法创建出connection。需要将server1-conn改成一个state，state有依赖状态，会等到env完成后才产生。 123(defstate server1-conn ...) 7、jar引入及依赖冲突解决： lein deps :tree 查看包依赖。 引入新的jar时在project.clj的:dependencies按说明引入，跟maven一样，分groupId、artifactId、version。 排除某sdk里的某些冲突包 12[com.baidu.aip/java-sdk &quot;4.11.0&quot; :exclusions [org.slf4j/slf4j-simple]] 8、spec使用spec的使用需要引入[clojure.spec.alpha :as s]和[spec-tools.core :as st]，看个spec的定义： 12345678910111213(s/def ::page (st/spec &#123;:spec int? :description "页码，从0开始" :swagger/default "0" :reason "页码参数不能为空"&#125;))(s/def ::size (st/spec &#123;:spec int? :description "每页条数" :swagger/default 10 :reason "条数参数不能为空"&#125;)) 使用： 12345678910111213["/page" &#123;:get &#123;:summary "分页获取字典数据" :parameters &#123;:query (s/keys :req-un [::page ::size]) :handler (s/keys :req-un [page] :opt-un [size])&#125; :handler (fn [&#123;&#123;&#123;:keys [page, size]&#125; :query&#125; :parameters :as request&#125;] &#123;:status 200 :body &#123;:code 10 :data &#123;:total-elements (-&gt;&gt; (db/get-dicts-page &#123;:count true&#125;) (map :total-elements) (first)) :content (db/get-dicts-page &#123;:page page :size size&#125;)&#125;&#125;&#125;)&#125;&#125;] spec的参数也可以定义在其他namespace里，使用时加上namespace的名字即可，比如一个叫base的namespace里定义参数如下： 12345(s/def :base/role (st/spec &#123;:spec #&#123;"PATIENT", "DOCTOR"&#125; :description "角色" :reason "角色不能为空"&#125;)) 这个枚举类型的spec在另一个namespace里使用时不需要在require里引入这个base，而直接在spec里加namespace的名字，是这样的： 1:parameters &#123;:header (s/keys :req-un [:base/role])&#125; 用coll-of定义出一个list 12345678(s/def ::head-id id?)(s/def ::url string?)(s/def ::unmatched-head (s/keys :req [::head-id ::url]))(s/def ::unmatched-head-result (st/spec &#123;:spec (s/coll-of ::unmatched-head)&#125;)) 再比定义一个下面的post的body体：1234567891011&#123; &quot;patient-id&quot;: &quot;string&quot;, &quot;patient-ext-list&quot;: [ &#123; &quot;dict-id&quot;: 0, &quot;dict-type&quot;: &quot;string&quot;, &quot;dict-value&quot;: &quot;string&quot;, &quot;other-value&quot;: &quot;string&quot; &#125; ]&#125; spec定义123456(s/def ::dict-id int?)(s/def ::dict-value string?)(s/def ::dict-type string?)(s/def ::other-value string?)(s/def ::patient-ext-list (s/coll-of (s/keys :req-un [::dict-id ::dict-type ::dict-value ::other-value])))(s/def ::ext-body (s/keys :req-un [:base/patient-id ::patient-ext-list])) coll-of函数还接收可选的参数，用来对数组中的元素进行限制，可选参数有如下： （1）:kind- - - -可以指定数组的类型，vector，set，list等； （2）:count- - - -可以限定数组中元素的个数； （3）:min-count- - - -限定数组中元素个数的最小值 （4）:max-count- - - -限定数组中元素个数的最大值 （5）:distinct- - - -数组没有重复的元素 （6）:into- - - -可以将数组的元素插入到[],(),{},#{}这些其中之一，主要是为了改变conform函数的返回结果 定义一个指定长度的 123456(s/def ::id (st/spec &#123;:spec (s/and string? #(= (count %) 6)) :description "一个长度为6字符串" :swagger/default "666666" :reason "必须是长度为6的字符串"&#125;)) 使用函数验证参数合法性 123456789(s/def ::head-body-id (st/spec &#123;:spec (s/and string? (fn [s] (let [[head-id body-id] (clojure.string/split s #&quot;-&quot;)] (and (s/valid? ::head-id head-id) (s/valid? ::body-id body-id))))) :description &quot;一个长度为13字符串, head-id 和 body-id 用‘-’ 连起来&quot; :swagger/default &quot;666666-999999&quot; :reason &quot;必须是长度为13的字符串，用-把body-id和head-id连起来&quot;&#125;)) 定义数组 12(s/def ::dict-id [string?]) ;Good(s/def ::dict-id vector?) ;Bad 更多使用参考：clojure.spec库入门学习 9、新增接口加入route创建一个新的namespace，参考官网说明定义出一个routes函数，然后将其加入到handle.clj中即可，像下面这样一直conj即可： 10、文件上传接口接口定义 123456789101112131415161718192021222324252627282930313233343536(defn format-date-time [timestamp] (-&gt; "yyyyMMddHHmmss" (java.text.SimpleDateFormat.) (.format timestamp)));;上传到本地(defn upload-file-local [type file] (let [file-path (str (-&gt; env :file-path) type "/" (format-date-time (java.util.Date.)) "/" (:filename file))] (io/make-parents file-path) (with-open [writer (io/output-stream file-path)] (io/copy (:tempfile file) writer)) (get-image-data file-path) file-path))(defn common-routes [] ["/common" &#123;:swagger &#123;:tags ["文件接口"]&#125; :parameters &#123;:header (s/keys :req-un [::token ::role])&#125; :middleware [token-wrap]&#125; ["/files" &#123;:post &#123;:summary "附件上传接口" :parameters &#123;:multipart &#123;:file multipart/temp-file-part :type (st/spec &#123;:spec string? :description "类型" :reason "类型必填"&#125;)&#125;&#125; :responses &#123;200 &#123;:body &#123;:code int?, :data &#123;:file-url string?&#125;&#125;&#125;&#125; :handler (fn [&#123;&#123;&#123;:keys [type file]&#125; :multipart&#125; :parameters&#125;] &#123;:status 200 :body &#123;:code 1 :message "上传成功" :data &#123;:file-url (:url (upload-file-local type file))&#125;&#125;&#125;)&#125;&#125;]]) 如果要将图片上传至七牛等有CDN能力的云存储空间，可以使用别人的轮子，或者自己需要造轮子，我这里使用了一个别人造的上传七牛的轮子,先在:dependencies里加入依赖1[clj.qiniu &quot;0.2.1&quot;] 调用api 12345678910111213141516171819202122232425262728293031(require '[clj.qiniu :as qiniu]);;上传到七牛配置(defn set-qiniu-config [] (qiniu/set-config! :access-key "my-key" :secret-key "my-secret"))(def qiniu-config &#123;:bucket "medical" :domain "http://prfmkg8tt.bkt.clouddn.com/" :prefix "alk/weixin/"&#125;)(defn qiniu-upload-path [type filename] (str (-&gt; qiniu-config :prefix) type "/" (utils/format-date-time (java.util.Date.)) "/" filename));;七牛云上传，返回上传后地址(defn upload-file-qiniu [type file] (set-qiniu-config) (let [filename (:filename file) bucket (-&gt; qiniu-config :bucket) key (qiniu-upload-path type filename) res (qiniu/upload-bucket bucket key (:tempfile file))] (log/info "上传七牛云结果：" res) (if-not (= 200 (-&gt; res :status)) (throw (Exception. " 附件上传失败 "))) (str (-&gt; qiniu-config :domain) key))) 使用的时候将上传local改成upload-file-qiniu即可。 11、全局跨域配置在middleware的wrap-base中加入跨域信息，先配置个*的 12345678910111213141516171819(ns alk-wxapi.middleware (:require [alk-wxapi.env :refer [defaults]] [alk-wxapi.config :refer [env]] [ring.middleware.flash :refer [wrap-flash]] [immutant.web.middleware :refer [wrap-session]] [ring.middleware.cors :refer [wrap-cors]] [ring.middleware.defaults :refer [site-defaults wrap-defaults]]))(defn wrap-base [handler] (-&gt; ((:middleware defaults) handler) wrap-flash (wrap-session &#123;:cookie-attrs &#123;:http-only true&#125;&#125;) (wrap-cors :access-control-allow-origin [#".*"] :access-control-allow-methods [:get :put :post :delete]) (wrap-defaults (-&gt; site-defaults (assoc-in [:security :anti-forgery] false) (dissoc :session))))) 12、增加打包环境比如增加pre环境，在project.clj中配置uberjar即可，在:profiles里增加,可以参考test环境，比如增加的uberjar-test环境： 123456:uberjar-test &#123;:omit-source true :aot :all :uberjar-name &quot;alk-wxapi-test.jar&quot; :source-paths [&quot;env/test/clj&quot;] :resource-paths [&quot;env/test/resources&quot;] :jvm-opts [&quot;-Dconf=test-config.edn&quot;]&#125; 打包:1234567891011121314151617181920212223242526272829303132333435363738➜ alk-wxapi git:(master) ✗ lein with-profiles uberjar-test uberjarCompiling alk-wxapi.common.utilsCompiling alk-wxapi.configCompiling alk-wxapi.coreCompiling alk-wxapi.db.coreCompiling alk-wxapi.db.db-dictsCompiling alk-wxapi.db.db-doctorCompiling alk-wxapi.db.db-guestbookCompiling alk-wxapi.db.db-hospitalCompiling alk-wxapi.db.db-patientCompiling alk-wxapi.db.redisCompiling alk-wxapi.envCompiling alk-wxapi.handlerCompiling alk-wxapi.middlewareCompiling alk-wxapi.middleware.exceptionCompiling alk-wxapi.middleware.formatsCompiling alk-wxapi.middleware.interceptorCompiling alk-wxapi.middleware.log-interceptorCompiling alk-wxapi.middleware.token-interceptorCompiling alk-wxapi.nreplCompiling alk-wxapi.routes.baseCompiling alk-wxapi.routes.dictsCompiling alk-wxapi.routes.doctorCompiling alk-wxapi.routes.fileCompiling alk-wxapi.routes.guestbookCompiling alk-wxapi.routes.hospitalCompiling alk-wxapi.routes.patientCompiling alk-wxapi.routes.patient-costCompiling alk-wxapi.routes.patient-examineCompiling alk-wxapi.routes.publicCompiling alk-wxapi.routes.userCompiling alk-wxapi.routes.weixinCompiling alk-wxapi.validationWarning: skipped duplicate file: config.ednWarning: skipped duplicate file: logback.xmlCreated /Users/mahaiqiang/git/redcreation/alk-wxapi/target/uberjar+uberjar-test/alk-wxapi-0.1.0-SNAPSHOT.jarCreated /Users/mahaiqiang/git/redcreation/alk-wxapi/target/uberjar/alk-wxapi-test.jar➜ alk-wxapi git:(master) ✗ 13、事务发起事务使用conman.core/with-transaction，一个例子： 123456789(let [timestamp (java.util.Date.) id (utils/generate-db-id)] (conman.core/with-transaction [*db*] (db/create-guestbook! (assoc body-params :timestamp timestamp :id id)) (db/get-guestbook &#123;:id id&#125;) (throw (ex-info (str "异常，事务回滚，列表中查看该id的数据是否存在，id:" id) &#123;&#125;)))) 注意：只有在transaction中的exception发生，事务的机制才会生效，我测试时就正好稀里糊涂把throw放到了with-transaction里面，导致总是不会回滚。 14、工具类工具类Utils单独一个namespace，目前收纳 获取uuid 12(defn generate-db-id [] (clojure.string/replace (str (java.util.UUID/randomUUID)) "-" "")) 日期时间格式化 123456789(defn format-time [timestamp] (-&gt; "yyyy-MM-dd HH:mm:ss" (java.text.SimpleDateFormat.) (.format timestamp)))(defn format-date-time [timestamp] (-&gt; "yyyyMMddHHmmss" (java.text.SimpleDateFormat.) (.format timestamp))) 15、定时任务有个比较重量级的http://clojurequartz.info/articles/guides.html库，quartz与在java里的一样，只不过是clojure的实现。我们项目里没有很复杂的需要动态修改的定时任务，因此选择了一个轻量级的库:chime，api参考github。下面是项目中的一个demo 1234567891011121314151617181920212223242526272829(ns alk-wxapi.common.scheduler (:require [chime :refer [chime-ch]] [clj-time.core :as t] [clj-time.periodic :refer [periodic-seq]] [clojure.core.async :as a :refer [&lt;! go-loop]] [clojure.tools.logging :as log]) (:import org.joda.time.DateTimeZone));; FIXME 定时功能应该还没有做 (^_^)(defn times [] (rest (periodic-seq (.. (t/now) (withZone (DateTimeZone/getDefault)) #_(withTime 0 0 0 0)) (t/minutes 10))))(defn channel [] (a/chan))(defn chime [] (chime-ch (times) &#123;:ch (channel)&#125;))(defn start-scheduler [] (let [chime-channle (chime)] (go-loop [] (when-let [msg (&lt;! chime-channle)] (log/error (format "亲爱的 %s, Clojure repl搞一个小时了，休息一下？" (System/getProperty "user.name"))) (recur))) chime-channle)) 该定时任务项目启动后一个小时执行一次，执行只是简单打个log，效果如下： 16、优雅地打印jdbc的执行sql项目中默认的jdbc驱动是mysql自身的启动，所以默认的databaseurl也许是这样的 1:database-url "mysql://localhost:3306/demo?user=root&amp;password=password 然而，这样的配置是不会打印出jdbc执行的真正sql的，而我们有时候很需要这些sql，因为他们代表着逻辑，有时候debug也会需要。那么怎么配置才能达到目的呢？我们使用的是log4jdbc，因此需要在project.clj中引入该库， 1[com.googlecode.log4jdbc/log4jdbc "1.2"] 引入以后修改需要查看sql的profile里的edn配置文件，比如本地dev-config.edn 1:database-url "jdbc:log4jdbc:mysql://localhost:3306/demo?user=root&amp;password=password 然后jdbc连接处自然也得变,routes/db/core.clj 12345678(defstate ^:dynamic *db* :start (do (Class/forName "net.sf.log4jdbc.DriverSpy") (if-let [jdbc-url (env :database-url)] (conman/connect! &#123;:jdbc-url jdbc-url&#125;) (do (log/warn "database connection URL was not found, please set :database-url in your config, e.g: dev-config.edn") *db*))) :stop (conman/disconnect! *db*)) 默认的log配置，使用logback是配置的方式。这样会在log控制台看到很多jdbc的log，因为默认这些日志都是info的，需要调整logback里日志级别。为了分开打印log、error、sql的log，附上我本地的logback配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;10 seconds&quot;&gt; &lt;statusListener class=&quot;ch.qos.logback.core.status.NopStatusListener&quot;/&gt; &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!-- 如果只是想要Info级别的日志，只是过滤info还是会输出Error日志，因为Error的级别高，使用filter，可以避免输出Error日志 --&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt; &lt;!--过滤 Error--&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;!--匹配到就禁止--&gt; &lt;onMatch&gt;DENY&lt;/onMatch&gt; &lt;!--没有匹配到就允许--&gt; &lt;onMismatch&gt;ACCEPT&lt;/onMismatch&gt; &lt;/filter&gt; &lt;file&gt;log/info-wxapi.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;log/info-wxapi.%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!-- keep 30 days of history --&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%date&#123;ISO8601&#125; [%thread] %-5level %logger&#123;36&#125; - %msg %n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;ERRORFILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter--&gt; &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt; &lt;level&gt;Error&lt;/level&gt; &lt;/filter&gt; &lt;file&gt;log/error-wxapi.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;log/error-wxapi.%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!-- keep 30 days of history --&gt; &lt;maxHistory&gt;10&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%date&#123;ISO8601&#125; [%thread] %-5level %logger&#123;36&#125; - %msg %n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;appender name=&quot;SQLFILE&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt; &lt;file&gt;log/sql-wxapi.log&lt;/file&gt; &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt; &lt;fileNamePattern&gt;log/sql-wxapi.%d&#123;yyyy-MM-dd&#125;.%i.log&lt;/fileNamePattern&gt; &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt; &lt;maxFileSize&gt;100MB&lt;/maxFileSize&gt; &lt;/timeBasedFileNamingAndTriggeringPolicy&gt; &lt;!-- keep 30 days of history --&gt; &lt;maxHistory&gt;10&lt;/maxHistory&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;charset&gt;UTF-8&lt;/charset&gt; &lt;pattern&gt;%date&#123;ISO8601&#125; [%thread] %-5level %logger&#123;36&#125; - %msg %n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;logger name=&quot;org.apache.http&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;org.xnio.nio&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;com.zaxxer.hikari&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;io.undertow.session&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;io.undertow.request&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;jdbc.audit&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;jdbc.sqltiming&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;jdbc.connection&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;jdbc.resultset&quot; level=&quot;warn&quot;/&gt; &lt;logger name=&quot;wxapi&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt; &lt;appender-ref ref=&quot;FILE&quot;/&gt; &lt;appender-ref ref=&quot;ERRORFILE&quot;/&gt; &lt;/logger&gt; &lt;logger name=&quot;jdbc.sqlonly&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt; &lt;appender-ref ref=&quot;SQLFILE&quot;/&gt; &lt;/logger&gt; &lt;root level=&quot;ERROR&quot;&gt; &lt;appender-ref ref=&quot;ERRORFILE&quot;/&gt; &lt;appender-ref ref=&quot;FILE&quot;/&gt; &lt;/root&gt;&lt;/configuration&gt; :as request的意思是包含前面指定获取的参数的所有。当然，如你所知，clojure确实足够灵活，取参方式也还有方式，比如12345678["/path/good-all-params/:id" &#123;:post &#123;:summary "更多方式" :parameters &#123;:path &#123;:id int?&#125; :query &#123;:name string?&#125; :body &#123;:message string?&#125;&#125; :handler (fn [&#123;&#123;data :body&#125; :parameters &#123;&#123;:keys [id]&#125; :path&#125; :parameters] (ok (format " body params: %s " data)))&#125;&#125;] 这里参数名称data可以定义成任何你想叫的名字。]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure爬坑之项目里处理过的复杂逻辑]]></title>
    <url>%2F2019%2F07%2F31%2Fclojure%E7%88%AC%E5%9D%91%E4%B9%8B%E9%A1%B9%E7%9B%AE%E9%87%8C%E5%A4%84%E7%90%86%E8%BF%87%E7%9A%84%E5%A4%8D%E6%9D%82%E9%80%BB%E8%BE%91%2F</url>
    <content type="text"><![CDATA[clojure中调用java,解决jar包依赖冲突 简书地址 1、一个高阶函数的使用：将db查询结果日期进行format，并且group和求sum，重新组织结构从DB中查到的map结果集如下：1234567891011121314151617181920212223242526272829303132333435(alk-wxapi.db.db-patient/get-patient-cost &#123;:page 0, :size 10, :patient-id 222&#125;)=&gt;(&#123;:deleted 0, :drug-flag 1, :drug-id 1, :cost-date #object[java.time.LocalDate 0x2d30b554 &quot;2019-05-07&quot;], :id &quot;1&quot;, :create-time #object[java.time.LocalDateTime 0x76211aed &quot;2019-06-05T22:42:14&quot;], :count 2, :drug-name &quot;安脱达&quot;, :patient-id &quot;222&quot;, :sum 58.0&#125; &#123;:deleted 0, :drug-flag 1, :drug-id 1, :cost-date #object[java.time.LocalDate 0x9e55443 &quot;2019-06-05&quot;], :id &quot;3&quot;, :create-time #object[java.time.LocalDateTime 0x7114ec3c &quot;2019-06-05T22:42:01&quot;], :count 10, :drug-name &quot;安脱达&quot;, :patient-id &quot;222&quot;, :sum 120.0&#125; &#123;:deleted 0, :drug-flag 1, :drug-id 4, :cost-date #object[java.time.LocalDate 0x59267d5f &quot;2019-05-07&quot;], :id &quot;2&quot;, :create-time #object[java.time.LocalDateTime 0x27aef2e4 &quot;2019-06-05T22:41:50&quot;], :count 15, :drug-name &quot;奥马珠&quot;, :patient-id &quot;222&quot;, :sum 200.0&#125;) json以后格式是一条条的record：1234567891011121314151617181920212223242526272829303132333435363738&quot;data&quot;: [ &#123; &quot;deleted&quot;: 0, &quot;drug-flag&quot;: 1, &quot;drug-id&quot;: 1, &quot;cost-date&quot;: &quot;2019-05-07&quot;, &quot;id&quot;: &quot;1&quot;, &quot;create-time&quot;: &quot;2019-06-05T22:42:14&quot;, &quot;count&quot;: 2, &quot;drug-name&quot;: &quot;安脱达&quot;, &quot;patient-id&quot;: &quot;222&quot;, &quot;sum&quot;: 58 &#125;, &#123; &quot;deleted&quot;: 0, &quot;drug-flag&quot;: 1, &quot;drug-id&quot;: 1, &quot;cost-date&quot;: &quot;2019-06-05&quot;, &quot;id&quot;: &quot;3&quot;, &quot;create-time&quot;: &quot;2019-06-05T22:42:01&quot;, &quot;count&quot;: 10, &quot;drug-name&quot;: &quot;安脱达&quot;, &quot;patient-id&quot;: &quot;222&quot;, &quot;sum&quot;: 120 &#125;, &#123; &quot;deleted&quot;: 0, &quot;drug-flag&quot;: 1, &quot;drug-id&quot;: 4, &quot;cost-date&quot;: &quot;2019-05-07&quot;, &quot;id&quot;: &quot;2&quot;, &quot;create-time&quot;: &quot;2019-06-05T22:41:50&quot;, &quot;count&quot;: 15, &quot;drug-name&quot;: &quot;奥马珠&quot;, &quot;patient-id&quot;: &quot;222&quot;, &quot;sum&quot;: 200 &#125; ] 而预期的json是干这么几件事: 1、根据日期将分组，以指定字段为key，group的日期为value2、对日期进行格式化3、同一日期下的数据，以list为key，record作为value4、对每个list里record的sum字段求和，与list同级，以total-cost为key，和为value5、同4类似，对list里的record的count求和，与list同级，以total-count为key，和为value123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123;"content": [ &#123; "cost-date": "2019-05-07", "list": [ &#123; "deleted": 0, "drug-flag": 1, "drug-id": 1, "cost-date": "2019-05-07", "id": "1", "create-time": "2019-06-05T22:42:14", "count": 2, "drug-name": "安脱达", "patient-id": "222", "sum": 58 &#125;, &#123; "deleted": 0, "drug-flag": 1, "drug-id": 4, "cost-date": "2019-05-07", "id": "2", "create-time": "2019-06-05T22:41:50", "count": 15, "drug-name": "奥马珠", "patient-id": "222", "sum": 200 &#125; ], "total-cost": 258, "total-count": 17 &#125;, &#123; "cost-date": "2019-06-05", "list": [ &#123; "deleted": 0, "drug-flag": 1, "drug-id": 1, "cost-date": "2019-06-05", "id": "3", "create-time": "2019-06-05T22:42:01", "count": 10, "drug-name": "安脱达", "patient-id": "222", "sum": 120 &#125; ], "total-cost": 120, "total-count": 10 &#125; ]&#125; 那么这个处理函数应该怎么写呢？提供一个工具类，处理将关系数据库的record搞成tree的函数12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061(defn group-data-by-keys "对一组数据库返回结果&#123;data&#125;进行处理, 使用&#123;group-keys&#125;中的key进行group-by: (sut/group-data-by-keys test-dict [:group-code1 :group-code2] ) 可以带多组额外的集合函数，多组[key reducing-function init-value]的格式： (sut/group-data-by-keys test-dict [:group-code] :a (fn [v e] (+ v (:id e))) 0 :b (fn [v e] (+ v (:id e))) 0 )" ([data group-keys] (-&gt;&gt; data (group-by (fn [m] (select-keys m group-keys))) (reduce-kv (fn [m k v] (assoc m k &#123;:list (mapv (fn [e] (apply dissoc e group-keys)) v)&#125;)) &#123;&#125;) (mapv (fn [e] (apply merge e))))) ([data group-keys key r-func val &amp; krvs] (-&gt;&gt; data (group-by (fn [m] (select-keys m group-keys))) (reduce-kv (fn [m k v] (assoc m k (if (empty? krvs) &#123;:list (mapv (fn [e] (apply dissoc e group-keys)) v) key (reduce r-func val v)&#125; (apply assoc &#123;:list (mapv (fn [e] (apply dissoc e group-keys)) v) key (reduce r-func val v)&#125; (let [krvs-seq (partition 3 krvs)] (mapcat (fn [krv] (let [[key r-func val] krv] [key (reduce r-func val v)])) krvs-seq)))))) &#123;&#125;) (map (fn [e] (apply merge e)))))) 在提供一个相反作用的函数12345678910111213141516171819202122(defn list-from-group-by "去除分组, 作用和group-data-by-key 相反: 一层嵌套: (list-from-group-by &#123;:y 1 :a [&#123;:b 2&#125; &#123;:b 3&#125;]&#125; ))) -&gt; [&#123;:b 2, :y 1&#125; &#123;:b 3, :y 1&#125;] 双层嵌套: (mapcat sut/list-from-group-by (sut/list-from-group-by &#123;:y 1 :a [&#123;:b [&#123;:x 99&#125;]&#125; &#123;:b [&#123;:x 77&#125;]&#125;]&#125; )) -&gt; [&#123;:x 99, :y 1&#125; &#123;:x 77, :y 1&#125;] " [m] (reduce-kv (fn [r k v] (if (vector? v) (-&gt;&gt; (apply conj r v) (map #(merge % (dissoc m k)))) r)) [] m)) 2、一些有用的utils12345678910111213141516(defn lower-case-keywrod "把输入的字符串变成keywrokd \"ABC\" -&gt; :abc " [s] (keyword (clojure.string/lower-case s)))(defn parse-int "string 转 int" [s] (Integer/parseInt (re-find #"\A-?\d+" s)))(defn parse-double "string 转 doule" [s] (Double/parseDouble (re-find #"\A-?\d+" s))) 3、筛选和判断一组数据中不为nil的有这么一组数：1(def x '[(nil nil nil nil nil) (nil nil nil nil nil) (&#123;:drug-id "300", :drug-name "西替利嗪，左西替利嗪（仙特朗，优泽）", :checked true, :dosage "1111", :dosage-unit "滴/天"&#125; nil &#123;:drug-id "302", :drug-name "谈说斯汀（UPDATE）", :checked true, :dosage "1111", :dosage-unit "滴/天"&#125; nil) ()]) 找出不为nil的1(filter (complement nil?) (mapcat identity x)) 4、两个数中找到不为nil的第一个数12(first (filter (complement nil?) [a b]))]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql中存储带特殊符号的微信昵称]]></title>
    <url>%2F2019%2F07%2F20%2Fmysql%E4%B8%AD%E5%AD%98%E5%82%A8%E5%B8%A6%E7%89%B9%E6%AE%8A%E7%AC%A6%E5%8F%B7%E7%9A%84%E5%BE%AE%E4%BF%A1%E6%98%B5%E7%A7%B0%2F</url>
    <content type="text"><![CDATA[微信昵称中有表情符号，在获取到微信个人信息保存到mysql时，格式不支持导致保存失败，怎么解决？ 简书地址 问题：微信昵称中有表情符号，在获取到微信个人信息保存到mysql时，格式不支持导致保存失败。现象： 错误：12345678Caused by: java.sql.SQLException: Incorrect string value: &apos;\xF0\x9F\x8C\xB2\xE6\x97...&apos; for column &apos;nick_name&apos; at row 1 at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129) ~[alk-wxapi.jar:na] at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97) ~[alk-wxapi.jar:na] at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[alk-wxapi.jar:na] at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:975) ~[alk-wxapi.jar:na] at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1114) ~[alk-wxapi.jar:na] at com.mysql.cj.jdbc.ClientPreparedStatement.executeBatchSerially(ClientPreparedStatement.java:854) ~[alk-wxapi.jar:na] ... 82 common frames omitted 解决思路：1、修改mysql的配置，不外乎server端，客户端，DB2、数据库存base64，base64连图片都能搞，一个表清应该是ok的，只不过需要存储的时候encode，拿出来再decode 解决方案：果断采用第一种啊，并实践证明，是科学+合理+快捷的方式。修改mysql的配置，配置文件位置各不相同，不再累赘。 修改点就一个，mysqld上加个character-set-server = utf8mb4，就这一个而已。 然后修改数据库、这个表、这个字段的字符集类型为utf8mb4，ok了。 验证： 第二种方式也称应用层解决方案 base64可以用java.util.Base64，也可以用apache提供的。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro或者其他npm管理的项目一键远程部署]]></title>
    <url>%2F2019%2F07%2F17%2FAnt%20Design%20Pro%E6%88%96%E8%80%85%E5%85%B6%E4%BB%96npm%E7%AE%A1%E7%90%86%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%80%E9%94%AE%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[npm项目没有jenkins这样的自动打包工具的话，本地配置好免密登录，一句命令实现自动部署，还是挺美滋滋的。 简书地址 听起来title有点绕，其实目的很简单，就是本地一条简单命令，实现将项目打包并上传到服务器这么个功能。 具体实现 在项目根目录的package.json文件中找到scripts，相信你能看到不少命令，start、build等等，在此处增加一条命令，内容大概如下：1&quot;dist&quot;: &quot;npm run build &amp;&amp; rsync -p22 -avz --delete-after dist/ root@x.x.x.x:/opt/site/test/antd-pro&quot;, 其他更多命令，在后面拼接 多个&amp;&amp;就可以。 运行：1yarn dist 或者1npm run dist 解释：这句话会先执行npm run build然后再将dist目录下的所有文件拷贝到目标服务器，当然需要您配好本地到服务器的免密登录。]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac上将mysql加入环境变量classpath]]></title>
    <url>%2F2019%2F07%2F16%2FMac%E4%B8%8A%E5%B0%86mysql%E5%8A%A0%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fclasspath%2F</url>
    <content type="text"><![CDATA[mac系统上安装了mysql server以后，命令行里没有，提示 command not found: mysql简书地址 mac上玩开发的同志多在使用items的oh-my-zsh这个神奇，不知道的可以看看这篇文章。 问题:我本地安装的mysql服务已经用了大半年了，今天一用命令行，发现居然没有12345➜ ~ which mysqlmysql not found➜ ~ whereis mysql➜ ~ mysqlzsh: command not found: mysql 虽然我基本不会用，但是既然知道了，岂能不把它搞好，万一用呢（其实不大可能）。 还是stackoverflow好使，在这篇文章中很快就找到了答案，而且配置也非常easy，但是毕竟不是自己的，于是就简单记录一下。 我本地的.bash_profile文件里面最后面已经加了下面的内容了1export PATH=$&#123;PATH&#125;:/usr/local/mysql/bin/ 但是依然没有，这是前提。 方案：修改~/.zshrc文件，在最后加入1export PATH=$&#123;PATH&#125;:/usr/local/mysql/bin/ 然后1source ~/.zshrc 再查看1234➜ ~ mysql --versionmysql Ver 14.14 Distrib 5.7.25, for macos10.14 (x86_64) using EditLine wrapper➜ ~ mysql -root -pEnter password: 完。]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上安装和使用nginx]]></title>
    <url>%2F2019%2F07%2F10%2FMac%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8nginx%2F</url>
    <content type="text"><![CDATA[mac系统上安装和配置nginx供开发使用 简书地址 nginx安装在mac系统上，基本上所有软件都可以用brew(brew 又叫Homebrew，brew类似CentOS系统下的Yum软件包管理工具，能在Mac中方便的安装软件或者卸载软件 )这个神器搞定，这也是我一枚穷屌丝为啥非要舍弃国民青睐的windows系统，而费劲巴拉的非要玩黑苹果的原因。言归正传，123brew search nginx # brew 查询Nginxbrew install nginx # brew 安装Nginx 安装完成后，可在终端输通过 brew list nginx 来显示nginx安装路径： 通过brew install安装应用会在/usr/local/Cellar/目录下； 某些应用会自动创建软链接放在 /usr/bin 或者 /usr/sbin，同时也可能将整个文件夹放在/usr/local 可以使用 brew list 软件名 (比如 brew list Nginx)确定Nginx安装位置。1234567891011121314151617181920212223242526272829303132333435➜ ~ brew list nginx/usr/local/Cellar/nginx/1.17.1/.bottle/etc/ (15 files)/usr/local/Cellar/nginx/1.17.1/bin/nginx/usr/local/Cellar/nginx/1.17.1/homebrew.mxcl.nginx.plist/usr/local/Cellar/nginx/1.17.1/html -&gt; ../../../var/www/usr/local/Cellar/nginx/1.17.1/share/man/man8/nginx.8/usr/local/Cellar/nginx/1.17.1/share/nginx/ (2 files)➜ ~ ll /usr/local/Cellar/nginx/1.17.1total 624-rw-r--r-- 1 mahaiqiang staff 290K 6 25 20:19 CHANGES-rw-r--r-- 1 mahaiqiang staff 678B 7 10 18:57 INSTALL_RECEIPT.json-rw-r--r-- 1 mahaiqiang staff 1.4K 6 25 20:19 LICENSE-rw-r--r-- 1 mahaiqiang staff 49B 6 25 20:19 READMEdrwxr-xr-x 3 mahaiqiang staff 102B 6 25 20:19 bin-rw-r--r-- 1 mahaiqiang staff 571B 7 10 18:57 homebrew.mxcl.nginx.plistlrwxr-xr-x 1 mahaiqiang staff 16B 7 10 18:57 html -&gt; ../../../var/wwwdrwxr-xr-x 4 mahaiqiang staff 136B 6 25 20:19 share➜ ~# Nginx www目录➜ ~ cd /usr/local/Cellar/nginx/1.17.1➜ 1.17.1 ll ../../../var/wwwtotal 16-rw-r--r-- 1 mahaiqiang staff 494B 6 25 20:19 50x.html-rw-r--r-- 1 mahaiqiang staff 612B 6 25 20:19 index.html➜ 1.17.1 pwd/usr/local/Cellar/nginx/1.17.1➜# 寻找Nginx 配置文件➜ ~ find /usr/ -name &quot;nginx.conf&quot;/usr//local/Cellar/nginx/1.17.1/.bottle/etc/nginx/nginx.conf/usr//local/etc/nginx/nginx.conffind: /usr//local/mysql-5.7.25-macos10.14-x86_64/data: Permission deniedfind: /usr//local/mysql-5.7.25-macos10.14-x86_64/keyring: Permission deniedfind: /usr//sbin/authserver: Permission denied➜ ~ 执行nginx命令启动 使用一下指名配置文件位置信息，更多使用参考Linux 上我常用的几种nginx配置 1、配置文件位置1/usr/local/etc/nginx/nginx.conf 2、软连接12345$ which nginx/usr/local/bin/nginx # /usr/bin/nginx 提示没权限，直接用 /usr/local/bin/nginx$ ln -s /usr/local/sbin/nginx /usr/local/bin/nginx 3、Nginx 隐藏版本号nginx 配置文件里增加 server_tokens off;server_tokens作用域是http server location语句块server_tokens默认值是on，表示显示版本信息，设置server_tokens值是off，就可以在所有地方隐藏nginx的版本信息。隐藏了 Nginx 版本号后，重启Nginx即可 4、多文件配置细心的你打开nginx.config会发现文件最后一行是这句 include servers/*; 没错，这句的意思你可以在这个目录下放自己的配置文件，每个server独立的配置文件会被加入到主配置文件中。 剩下的玩法请参考Linux 上我常用的几种nginx配置。]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[获取微信公众号的openid并发送模板消息之前后端]]></title>
    <url>%2F2019%2F06%2F22%2F%20%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84openid%E5%B9%B6%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF%E4%B9%8B%E5%89%8D%E5%90%8E%E7%AB%AF%2F</url>
    <content type="text"><![CDATA[微信公众号获取授权，获取微信用户信息，并且发送模板消息。 简书地址 如今的开发感觉已经离不开微信了，虽然相关的文章已经比微信官网还要多了，但是别人家的再好也是别人家的，自己走一遍还是挺有意义的。 如果是开发环境，还没有审核的微信公众号，那自然是不能发送模板消息的，只能获取到微信用户信息。需要申请个测试的公众号，官网免费申请。申请好以后，需要在”网页服务”-&gt;”网页账号”里配置一下oauth2.0的授权回调地址。 后面的操作就跟下面我正式的开发者平台一样了。 作为前端小白，有机会从零开始申请公众号，开发公众号，自然要学到什么记录什么。本篇记录下开发环境怎么获取openid并且发送模板消息的。 参考微信网页开发授权官方文档微信公众平台，微信网页授权，redirect_uri参数错误，解决方法 获取微信用户信息1、关注微信公众号 2、绑定微信号称为网页开发者 3、修改微信网页授权关于网页授权回调域名的说明 在微信公众号请求用户网页授权之前，开发者需要先到公众平台官网中的“开发 - 接口权限 - 网页服务 - 网页帐号 - 网页授权获取用户基本信息”的配置选项中，修改授权回调域名。请注意，这里填写的是域名（是一个字符串），而不是URL，因此请勿加 http:// 等协议头； 授权回调域名配置规范为全域名，比如需要网页授权的域名为：www.qq.com，配置以后此域名下面的页面http://www.qq.com/music.html 、 http://www.qq.com/login.html 都可以进行OAuth2.0鉴权。但http://pay.qq.com 、 http://music.qq.com 、 http://qq.com无法进行OAuth2.0鉴权 如果公众号登录授权给了第三方开发者来进行管理，则不必做任何设置，由第三方代替公众号实现网页授权即可。 先配置服务器，保证根域名下可以访问到微信提供的测试文件。如果您没有可用的域名，或许这篇文章可以祝您一臂之力。配置好以后是这样的：配置授权域名 注意：这一步如果是tomcat做的容器，将txt文件放在tomcat/webapps/ROOT/下即可。 如果用的nginx转发的，将文件放在根目录即可。比如：nginx如下：12345location / &#123; root /opt/site/alk-patient; index index.html index.htm; try_files $uri $uri/ /index.html;&#125; 如果这一步没有配置，域名是加不上去的。 这一步要是有问题不会配，只能说这位后台适合去买庆丰包子。 4、获取code回调url要用urlencode处理，比如我的回调地址是https%3a%2f%2fxhapp.3vyd.com%2fMP_verify_5J1FbKvfyqtzU26N.txt设置在微信api里如下https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=https%3a%2f%2fxhapp.3vyd.com%2fMP_verify_5J1FbKvfyqtzU26N.txt&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect 将该URL用微信开发者工具访问后 同意授权，跳转成功后，想要的code在url里 5、获取微信用户信息获取到了code以后，调用服务端的接口，获取用户信息： 服务端看微信官网API，出问题概率太小，不再贴代码。粘一下服务端打出来的log：12345678910111213141516171819202122=============== REQUEST START =============== request-id:d0ae146d-86fa-4dfb-8224-f0f90b234e4a request-uri: /api/public/weixin/authorized/001g4LGs0ns6xf1qaPGs0kS1Hs0g4LG4 request-method: :get request-query: request-body: 2019-06-22 15:54:16,796 [XNIO-1 task-2] INFO alk-wxapi.routes.weixin - 请求微信access-token的 url: %s https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=001g4LGs0ns6xf1qaPGs0kS1Hs0g4LG4&amp;grant_type=authorization_code 2019-06-22 15:54:17,056 [XNIO-1 task-2] INFO alk-wxapi.routes.weixin - ====== 请求微信access-token返回结果 ===== : &#123;:access_token 22_laqOVUrxrg5URkqS18gzDqdvgsHlkl5tXxBU6pbaqI9kIqdAdDVMk7zw0gMmoUlR2F1uQnhyzfdlmyixsP3qLA, :expires_in 7200, :refresh_token 22_eHVuzmK9VGxgQsxQV0qwCx9eNoECv7506YXsaXQH9LxEMifD5KwXkTRKAG2WxdlIkj9ZthbSC2wFbtaYGfNClg, :openid oIzsW5sck7l9kmtwDb66_RAvdepY, :scope snsapi_userinfo&#125; 2019-06-22 15:54:17,057 [XNIO-1 task-2] INFO alk-wxapi.routes.weixin - 请求微信用户信息的 url: %s https://api.weixin.qq.com/sns/userinfo?access_token=22_laqOVUrxrg5URkqS18gzDqdvgsHlkl5tXxBU6pbaqI9kIqdAdDVMk7zw0gMmoUlR2F1uQnhyzfdlmyixsP3qLA&amp;openid=oIzsW5sck7l9kmtwDb66_RAvdepYlang=zh_CN 2019-06-22 15:54:17,256 [XNIO-1 task-2] INFO alk-wxapi.routes.weixin - ====== 请求微信用户信息user-info返回结果 ===== : &#123;:sex 1, :nickname 马海强, :city Qingdao, :headimgurl http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxGWwK3lTGAffuGickR7V1VjAiawaAicIsoxGGAD0yWf2toLUZGAiaFHwS8QDMvZ2vLW3QJloKTnIPQ/132, :openid oIzsW5sck7l9kmtwDb66_RAvdepY, :language zh_CN, :province Shandong, :country CN, :privilege []&#125; 2019-06-22 15:54:38,673 [XNIO-1 task-2] INFO jdbc.sqlonly - SELECT * FROM `t_patient` p WHERE p.`deleted` = FALSE AND p.`openid` = &apos;oIzsW5sck7l9kmtwDb66_RAvdepY&apos;; 2019-06-22 15:54:38,834 [XNIO-1 task-2] INFO jdbc.sqlonly - batching 1 statements: 1: INSERT INTO `t_patient`(`patient_id`, `nick_name`, `gender`, `openid`, `province`, `city`, `country`, `headimgurl`, `unionid`, `create_time`, `status`) values (&apos;a8dfb64eb45549b0b109e7170ac131e0&apos;, &apos;马海强&apos;, &apos;男&apos;, &apos;oIzsW5sck7l9kmtwDb66_RAvdepY&apos;, &apos;Shandong&apos;, &apos;Qingdao&apos;, &apos;CN&apos;, &apos;http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxGWwK3lTGAffuGickR7V1VjAiawaAicIsoxGGAD0yWf2toLUZGAiaFHwS8QDMvZ2vLW3QJloKTnIPQ/132&apos;, NULL, NOW(), 20); 2019-06-22 15:54:38,841 [XNIO-1 task-2] INFO alk-wxapi.routes.weixin - 微信公众号注册新用户，用户信息：%s &#123;:sex 1, :nickname 马海强, :city Qingdao, :headimgurl http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxGWwK3lTGAffuGickR7V1VjAiawaAicIsoxGGAD0yWf2toLUZGAiaFHwS8QDMvZ2vLW3QJloKTnIPQ/132, :openid oIzsW5sck7l9kmtwDb66_RAvdepY, :language zh_CN, :province Shandong, :country CN, :privilege []&#125; 2019-06-22 15:54:38,843 [XNIO-1 task-2] INFO alk-wxapi.middleware.log-interceptor - response: &#123;:code 1, :message &quot;操作成功&quot;, :data &#123;:sex 1, :nickname &quot;马海强&quot;, :city &quot;Qingdao&quot;, :headimgurl &quot;http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqxGWwK3lTGAffuGickR7V1VjAiawaAicIsoxGGAD0yWf2toLUZGAiaFHwS8QDMvZ2vLW3QJloKTnIPQ/132&quot;, :openid &quot;oIzsW5sck7l9kmtwDb66_RAvdepY&quot;, :language &quot;zh_CN&quot;, :province &quot;Shandong&quot;, :country &quot;CN&quot;, :privilege []&#125;&#125; request-id:d0ae146d-86fa-4dfb-8224-f0f90b234e4a 2019-06-22 15:54:38,853 [XNIO-1 task-2] INFO alk-wxapi.middleware.log-interceptor - =============== response END =============== 到此，获得用户信息。 公众平台配置模板消息官方文档 1、从模板库中选择适合自己的模板，添加称为自己的模板，获取的模板id 2、查看模板消息详情，确认字段内容 3、公众号里基本配置-&gt;IP白名单配置当前网络外网地址IP 4、postman调用发消息 获取access_token 发送模板消息 收到的消息 完美！收关！]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure上一个start最多的集合数据处理库-specter]]></title>
    <url>%2F2019%2F06%2F21%2Fclojure%E4%B8%8A%E4%B8%80%E4%B8%AAstart%E6%9C%80%E5%A4%9A%E7%9A%84%E9%9B%86%E5%90%88%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%BA%93-specter%2F</url>
    <content type="text"><![CDATA[正如站点介绍Clojure(Script)’s missing piece 简书地址正如站点介绍Clojure(Script)’s missing piece 使用示例require '[com.rpl.specter :refer :all]) ;;; 1.1 clojure(map inc [1 2 3 4])(into #&#123;&#125; (map inc #&#123;1 2 3 4&#125;)) ;;; 1.2 specter(transform ALL inc #&#123;1 2 3 4&#125; )(transform ALL inc '(1 2 3 4)) ;;; 2 方便的操作嵌套数据结构 ;;; 2.1 Clojure(defn apply-fn-to-map [f m] (into &#123;&#125; (for [[k v] m] [k (f v)]) ))(apply-fn-to-map inc &#123;:a 1 :b 2&#125;)(map #(apply-fn-to-map inc %) [&#123;:a 1 :b 1&#125; &#123;:c 1 :d 1&#125;]) ;;; 2.2 Specter(transform [MAP-VALS] inc &#123;:a 1 :b 2&#125;)(transform [ALL MAP-VALS] inc [&#123;:a 1 :b 1&#125; &#123;:c 1 :d 1&#125;] )(transform [ALL MAP-VALS even?] inc [&#123;:a 1 :b 2&#125; &#123;:c 3 :d 4&#125;] ) ;;; 工作原理[&#123;:a 1 :b 2&#125; &#123;:c 3 :d 4&#125;] ;;; ALL&#123;:a 1 :b 2&#125;&#123;:c 3 :d 4&#125; ;;; MAP-VAL1234 ;;; even?24 ;;; inc35 ;;; 重建 ;;; reverse even?1335 ;;; reverse MAP-VAL&#123;:a 1 :b 3&#125;&#123;:c 3 :d 5&#125; ;;; reverse ALL[&#123;:a 1 :b 3&#125; &#123;:c 3 :d 5&#125;] ;;; 具体使用(def data &#123;:result [&#123;:hy-x 45, :ft-y 36, :immed-other-dispose "涂抹药水2", :later-other-reaction nil, :cure-id "1", :reaction-time "2019-05-28T14:01:00", :ft-x 34, :immed-other-reaction "胳膊红肿3", :list [&#123;:type "REACTION", :main-id "1", :dict-key-name "局部反应", :list [&#123;:dict-value-name "手臂肿胀", :create-time "2019-05-01T14:02:25", :id-2 230, :dict-value-id 53, :show true&#125; &#123;:dict-value-name "疼痛", :create-time "2019-05-01T14:02:25", :id-2 231, :dict-value-id 55, :show true&#125; &#123;:dict-value-name "活动受限", :create-time "2019-05-01T14:02:25", :id-2 232, :dict-value-id 57, :show true&#125; &#123;:dict-value-name "热", :create-time "2019-05-01T14:02:25", :id-2 247, :dict-value-id 54, :show true&#125; &#123;:dict-value-name "瘙痒", :create-time "2019-05-01T14:02:25", :id-2 248, :dict-value-id 56, :show true&#125; &#123;:dict-value-name "活动受限", :dict-value-code "HUODONGSHOUXIAN", :parent-id 52, :group-code "REACTION", :dict-value-sort 5, :dict-value-id 57, :show true&#125;], :dict-key-id 52&#125; &#123;:type "REACTION", :main-id "1", :dict-key-name "全身非特异性反应", :list [&#123;:dict-value-name "发热", :create-time "2019-05-01T14:02:25", :id-2 233, :dict-value-id 59, :show true&#125; &#123;:dict-value-name "疲倦", :create-time "2019-05-01T14:02:25", :id-2 234, :dict-value-id 60, :show true&#125; &#123;:dict-value-name "关节痛", :create-time "2019-05-01T14:02:25", :id-2 235, :dict-value-id 61, :show true&#125; &#123;:dict-value-name "关节痛", :dict-value-code "GUANJIETONG", :parent-id 58, :group-code "REACTION", :dict-value-sort 3, :dict-value-id 61, :show true&#125;], :dict-key-id 58&#125; &#123;:type "REACTION", :main-id "1", :dict-key-name "过敏性结膜炎症状", :list [&#123;:dict-value-name "眼痒", :create-time "2019-05-01T14:02:25", :id-2 256, :dict-value-id 75, :show true&#125; &#123;:dict-value-name "眼肿", :create-time "2019-05-01T14:02:25", :id-2 237, :dict-value-id 79, :show true&#125; &#123;:dict-value-name "结膜充血", :create-time "2019-05-01T14:02:25", :id-2 257, :dict-value-id 77, :show true&#125; &#123;:dict-value-name "畏光", :create-time "2019-05-01T14:02:25", :id-2 258, :dict-value-id 78, :show true&#125; &#123;:dict-value-name "眼肿", :dict-value-code "YANZHONG", :parent-id 74, :group-code "REACTION", :dict-value-sort 5, :dict-value-id 79, :show true&#125;], :dict-key-id 74&#125; &#123;:type "DISPOSE", :main-id "1", :dict-key-name "处理方式", :list [&#123;:dict-value-name "抗组胺药", :create-time "2019-05-01T14:02:25", :id-2 238, :dict-value-id 87, :show true&#125; &#123;:dict-value-name "β受体激动剂(雾化)", :create-time "2019-05-01T14:02:25", :id-2 239, :dict-value-id 90, :show true&#125; &#123;:dict-value-name "糖皮质激素", :create-time "2019-05-01T14:02:25", :id-2 263, :dict-value-id 88, :show true&#125; &#123;:dict-value-name "局部处理(冰敷)", :create-time "2019-05-01T14:02:25", :id-2 264, :dict-value-id 89, :show true&#125;], :dict-key-id 86&#125; &#123;:type "REACTION", :main-id "1", :dict-key-name "哮喘症状", :list [&#123;:dict-value-name "咳嗽", :create-time "2019-05-01T14:02:25", :id-2 249, :dict-value-id 64, :show true&#125; &#123;:dict-value-name "胸闷", :create-time "2019-05-01T14:02:25", :id-2 250, :dict-value-id 65, :show true&#125; &#123;:dict-value-name "咽痒不适", :dict-value-code "YANYANGBUSHI", :parent-id 62, :group-code "REACTION", :dict-value-sort 5, :dict-value-id 67, :show true&#125;], :dict-key-id 62&#125; &#123;:type "REACTION", :main-id "1", :dict-key-name "鼻炎症状", :list [&#123;:dict-value-name "鼻痒", :create-time "2019-05-01T14:02:25", :id-2 251, :dict-value-id 69, :show true&#125; &#123;:dict-value-name "喷嚏", :create-time "2019-05-01T14:02:25", :id-2 252, :dict-value-id 70, :show true&#125; &#123;:dict-value-name "流涕", :create-time "2019-05-01T14:02:25", :id-2 253, :dict-value-id 71, :show true&#125; &#123;:dict-value-name "鼻塞", :create-time "2019-05-01T14:02:25", :id-2 254, :dict-value-id 72, :show true&#125; &#123;:dict-value-name "鼻干", :create-time "2019-05-01T14:02:25", :id-2 255, :dict-value-id 73, :show true&#125; &#123;:dict-value-name "鼻干", :dict-value-code "BIGAN", :parent-id 68, :group-code "REACTION", :dict-value-sort 6, :dict-value-id 73, :show true&#125;], :dict-key-id 68&#125; &#123;:type "REACTION", :main-id "1", :dict-key-name "过敏性皮肤症状", :list [&#123;:dict-value-name "荨麻疹", :create-time "2019-05-01T14:02:25", :id-2 259, :dict-value-id 81, :show true&#125; &#123;:dict-value-name "湿疹", :create-time "2019-05-01T14:02:25", :id-2 260, :dict-value-id 82, :show true&#125; &#123;:dict-value-name "皮肤瘙痒", :create-time "2019-05-01T14:02:25", :id-2 261, :dict-value-id 83, :show true&#125; &#123;:dict-value-name "血管性水肿", :create-time "2019-05-01T14:02:25", :id-2 262, :dict-value-id 84, :show true&#125; &#123;:dict-value-name "血管性水肿", :dict-value-code "XUEGUANIXINGSHUIZHONG", :parent-id 80, :group-code "REACTION", :dict-value-sort 4, :dict-value-id 84, :show true&#125;], :dict-key-id 80&#125;], :id 1, :later-other-dispose nil, :hy-y 33, :reaction-type "IMMED"&#125; &#123;:hy-x 66, :ft-y 33, :immed-other-dispose "", :later-other-reaction "大面积红点", :cure-id "1", :reaction-time "2019-05-21T10:03:00", :ft-x 22, :immed-other-reaction "", :list [&#123;:type "REACTION", :main-id "2", :dict-key-name "全身非特异性反应", :list [&#123;:dict-value-name "发热", :create-time "2019-05-03T14:03:56", :id-2 240, :dict-value-id 59, :show true&#125; &#123;:dict-value-name "关节痛", :create-time "2019-05-03T14:03:56", :id-2 241, :dict-value-id 61, :show true&#125; &#123;:dict-value-name "关节痛", :dict-value-code "GUANJIETONG", :parent-id 58, :group-code "REACTION", :dict-value-sort 3, :dict-value-id 61&#125;], :dict-key-id 58&#125; &#123;:type "REACTION", :main-id "2", :dict-key-name "哮喘症状", :list [&#123;:dict-value-name "喘息", :create-time "2019-05-03T14:03:56", :id-2 242, :dict-value-id 63, :show true&#125; &#123;:dict-value-name "气闭", :create-time "2019-05-03T14:03:56", :id-2 243, :dict-value-id 66, :show true&#125; &#123;:dict-value-name "咽痒不适", :create-time "2019-05-03T14:03:56", :id-2 244, :dict-value-id 67, :show true&#125; &#123;:dict-value-name "咽痒不适", :dict-value-code "YANYANGBUSHI", :parent-id 62, :group-code "REACTION", :dict-value-sort 5, :dict-value-id 67&#125;], :dict-key-id 62&#125; &#123;:type "DISPOSE", :main-id "2", :dict-key-name "处理方式", :list [&#123;:dict-value-name "糖皮质激素", :create-time "2019-05-03T14:03:56", :id-2 245, :dict-value-id 88, :show true&#125; &#123;:dict-value-name "局部处理(冰敷)", :create-time "2019-05-03T14:03:56", :id-2 246, :dict-value-id 89, :show true&#125;], :dict-key-id 86&#125;], :id 2, :later-other-dispose "抹药", :hy-y 88, :reaction-type "LATER"&#125;]&#125;) ;;; 2.2.1 select(select [:result ALL :list ALL :list ALL :show ] data) ;;; 找到:dict-value-name(select [:result ALL :list ALL :list ALL (submap [:dict-value-name :show]) ] data) ;;; 使用transform做数据更新(transform [:result ALL :list ALL :list] (constantly "sdsdsdsdsdd") data) ;;; 使用setval做数据更新 ;;; 替换一个值(setval [:result FIRST :hy-x ] "------" data) ;;; 替换一个collection的值(setval [:result ALL :list ALL ] "------" data) ;;; 插入一个新值(setval [:result FIRST :list FIRST :list (nthpath 1) ] "------" data)]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>specter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure编程初体验]]></title>
    <url>%2F2019%2F06%2F10%2Fclojure%E7%BC%96%E7%A8%8B%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[使用clojure开发web接口常见问题及解决方案 简书地址 收藏的学习地址：Leiningen中文教程luminusweb官方文档Clojure常用包leiningen API 学习中命令行里敲过的123456789101112131415161718192021222324252627282930313233343536373839404142434445(+ 11 11 1111)(/ 1 2)(doc /)(Take 5 (repeat 10))(1 2 3) =&gt; error&apos;(1 2 3) =&gt; (1 2 3)(doc if)(def a-array [1 2 3])(def b-array [1 2 3])(idertical? a-array b-array)(def a-list (1 2 3))(def b-list [1 2 3])(type a-list)(type b-list)(conj a-list 9)(conj b-list 9)(def my-add (fn [x y] (+ x y)))(my-add 4 2)`#&#123;1 2 3&#125;`(type #&#123;1 2 3&#125;)(type &#123;:a a&#125;)(filter even? [1 2 3 ])(map inc [1 2 3]) 常用的一些函数的使用体会 map123456789101112131415161718192021222324252627282930313233343536# map 遍历list，格式化list里map的key对应的value(require &apos;[clj-time.format :as f])=&gt; nil(def custom-formatter (f/formatter &quot;yyyyMMdd&quot;))=&gt; #&apos;user/custom-formatter(defn convert-format [d] (f/unparse custom-formatter (f/parse (f/formatter :date-hour-minute-second ) d)))=&gt; #&apos;user/convert-format(map (fn [m] (assoc m :create-time (convert-format (:create-time m))) ) [&#123;:id 1 :create-time &quot;2019-04-17T14:47:24&quot;&#125; &#123; :id 2 :create-time &quot;2019-04-17T14:47:44&quot;&#125;])=&gt; (&#123;:id 1, :create-time &quot;20190417&quot;&#125; &#123;:id 2, :create-time &quot;20190417&quot;&#125;)# 在写一个(map (fn [m] (assoc m :office-name (format &quot;%s-%s&quot; (:office-id m) (:office-name m)))) [&#123; :office-id &quot;1&quot;, :office-name &quot;耳鼻喉科&quot;, :hospital-id &quot;1&quot;, :create-time &quot;2019-04-17T14:47:24&quot;, :deleted 0 &#125;, &#123; :office-id &quot;2&quot;, :office-name &quot;变态反应科&quot;, :hospital-id &quot;1&quot;, :create-time &quot;2019-04-17T14:47:44&quot;, :deleted 0 &#125;])=&gt;(&#123;:office-id &quot;1&quot;, :office-name &quot;1-耳鼻喉科&quot;, :hospital-id &quot;1&quot;, :create-time &quot;2019-04-17T14:47:24&quot;, :deleted 0&#125; &#123;:office-id &quot;2&quot;, :office-name &quot;2-变态反应科&quot;, :hospital-id &quot;1&quot;, :create-time &quot;2019-04-17T14:47:44&quot;, :deleted 0&#125;) 2、date、timestamp、string12345678910(import &apos;[java.text SimpleDateFormat]) (import &apos;[java.sql Timestamp]) ;; timelong is the long int time seconds (defn timestamp2date [timelong] (.toString (Timestamp. timelong))) ;; date is date string 04/16/2012 (defn date2timestamp [date] (.getTime (.parse (SimpleDateFormat. &quot;MM/dd/yyyy&quot;) date))) 3、conj4、seq5、when-let6、comp就是对参数从右到左组合执行所有函数，如下面的函数：1((comp f1 f2 .. fn) arg1 arg2 .. argn) 可以转变为：1(f1 (f2 (.. (fn arg1 arg2 .. argn)))) 举例12345678((comp str +) 8 8 8) ;;=&gt; &quot;24&quot;(filter (comp not zero?) [0 1 0 2 0 3 0 4]);;=&gt; (1 2 3 4)(map (comp - (partial + 3) (partial * 2)) [1 2 3 4]);;=&gt; (-5 -7 -9 -11) 7、partial形如：((partial f arg1 arg2 .. argn) arga argb .. argz)就是执行：(f arg1 arg2 .. argn arga argb .. argz)注意：偏函数的第一个参数是一个函数，后面至少有1个其他参数partial函数称为“偏函数”或者“部分完整函数”，因为它是不完整的，定义也用def而不是defn。12345678user=&gt; (def hundred-times (partial * 100))#&apos;user/hundred-timesuser=&gt; (hundred-times 5)500user=&gt; (hundred-times 4 5 6)12000 8、reduce9、apply 函数间对比使用1、assoc vs update-in vs assoc-in说法不一，详情参考Assoc-vs-Update/assoc，只允许更新数据结构的第一层。处理数据的性能最高，几乎是assoc-in的两倍。assoc-in 和update-in 可以使用路径表达式改变数据结构的内层。如果新的值不依赖旧值，assoc-in就可以满足需求，不需要使用update-in;在有依赖关系时，使用update-in123456(defrecord Person [fname lname address]）(defrecourd Address [street city state zip])(def stu (Person. &quot;Stu&quot; &quot;Halloway&quot; (Address. &quot;200 N Mangum&quot; &quot;Durham&quot; &quot;NC&quot; 27707)))(assoc stu :fname &quot;Stuart&quot;)(upate-in stu [:address :zip] inc) 有用的代码段1、记录接口响应时间middleware123456(defn record-response-time [handler] (fn [req] (let [start-date (System/currentTimeMillis)] (handler req) (let [res-time (- (System/currentTimeMillis) start-date)] (println (format &quot;%s took %d ms&quot; (:uri req) res-time)))))) 需要注意的是 record-response-time 需要放在 middleware 最外层，这样它才能纪录一个请求经过所有 middleware + handler 处理的时间。 2、移除map中值为nil的key参考clojure nil? - Remove nil values from a map?我使用的两个1(into &#123;&#125; (filter #(not (nil? (val %))) &#123;:a true :b false :c nil&#125;)) 1(into &#123;&#125; (remove #(nil? (val %)) &#123;:a true :b false :c nil&#125;))]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringBoot 之Servlet启动前和配置热更新]]></title>
    <url>%2F2019%2F06%2F09%2FSpringBoot%20%E4%B9%8BServlet%E5%90%AF%E5%8A%A8%E5%89%8D%E5%92%8C%E9%85%8D%E7%BD%AE%E7%83%AD%E6%9B%B4%E6%96%B0%2F</url>
    <content type="text"><![CDATA[需要在servlet启动后和销毁前做点啥？需要热更新配置文件？本文记录这两个操作 简书地址 有个项目里甲方粑粑提了个需求：给所有手机号默认没天最多发送50条短信，但是可以改，修改成51的话，那就每天再多发一条呗。 需求听起来很简单，把50存在数据库的system_config表中，每次发送时，查询然后判断下。 配置在配置文件中热更新可以使配置生效，但是是不能满足需求，因为修改后的值没有保存容器重启后就失效。 但是聪明如你，这一定不是最优的。 这个需求不是我实现的，但是我参与了方案讨论，现在已经实现，在此记录下方案和方式，以备不时之需。 方案一： 1、默认配置存储在DB中 2、容器启动后从DB中读取配置数据，并存入Redis，后面使用时以redis为准，如果redis丢失了，从DB重新获取。3、修改配置时修改redis中的配置数据，并同步修改DB里的数据。 引入redis的好处时每次发送时无需进行DB级的查询，提高相应效率。方案二： 1、默认配置存储在DB中2、容器启动后，将从DB中查询到的数据，创建出一个配置文件。3、修改配置时修改DB中的数据，同时使用配置热更新，修改配置文件中的值。 很明显重点是容器启动后读取DB中的数据，本文使用方案二，上源码： 系统属性table123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.Id;import javax.persistence.Inheritance;import javax.persistence.InheritanceType;import javax.persistence.Table;import org.hibernate.annotations.GenericGenerator;import lombok.Data;import lombok.ToString;/** * 配置文件数据表 * */@ToString@Data@Entity@Table(name = &quot;t_sys_config&quot;)@Inheritance(strategy = InheritanceType.SINGLE_TABLE)public class SysConfig &#123; /** * 主键 */ @Id @GenericGenerator(name = &quot;snowFlakeId&quot;, strategy = &quot;com.hczt.haier.commoncenter.jpa.SnowflakeIdentifierGenerator&quot;) @GeneratedValue(generator = &quot;snowFlakeId&quot;) private Long id; /** * 属性编码 */ private String code; /** * 属性值 */ private String value; /** * 属性名称 */ private String name; /** * 属性描述 */ private String description;&#125; 加载SystemConfig12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485import java.util.Map;import java.util.Properties;import java.util.regex.Pattern;import java.util.stream.Collectors;import javax.annotation.PostConstruct;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.core.env.ConfigurableEnvironment;import org.springframework.core.env.MutablePropertySources;import org.springframework.core.env.PropertiesPropertySource;import org.springframework.core.env.PropertySource;import com.hczt.haier.smscenter.db.entity.SysConfig;import com.hczt.haier.smscenter.service.SysConfigService;import lombok.extern.slf4j.Slf4j;/** * 系统属性配置 * */@Slf4j@Configurationpublic class SystemConfig &#123; @Autowired private ConfigurableEnvironment environment; @Autowired private SysConfigService sysConfigService; /** * 从数据库加载配置文件信息 */ @PostConstruct public void initDbPropertySourceUsage() &#123; log.info("从数据库中加载属性配置文件开始"); // 获取系统属性集合 MutablePropertySources propertySources = environment.getPropertySources(); // 从数据库中获取自定义变量表 Map&lt;String, String&gt; collect = sysConfigService.findAll().stream().collect(Collectors.toMap(SysConfig::getCode, SysConfig::getValue)); log.info("从数据库中获取自定义变量表完成，获取到的数据为【&#123;&#125;】", collect); // 将转换后的列表加入属性中 Properties properties = new Properties(); properties.putAll(collect); PropertiesPropertySource constants = new PropertiesPropertySource("system-config", properties); // 定义寻找属性的正则，该正则为系统默认属性集合的前缀 Pattern pattern = Pattern.compile("^application*"); // 接收系统默认属性集合的名称 String name = null; // 接收是否找到系统默认属性集合 boolean flag = false; // 遍历属性集合 for (PropertySource&lt;?&gt; source : propertySources) &#123; // 正则匹配 if (pattern.matcher(source.getName()).matches()) &#123; // 接收名称 name = source.getName(); // 变更标识 flag = true; break; &#125; &#125; if (flag) &#123; // 找到则将自定义属性添加到该属性前 propertySources.addBefore(name, constants); &#125; else &#123; // 未找到则默认添加到第一位 propertySources.addFirst(constants); &#125; log.info("从数据库中加载属性配置文件结束"); &#125;&#125; 里面的SysConfigService及不打了，直接调用了Jpa的Repository而已。 @PostConstruct注解正是为解决容器启动后干啥而生，与其相配的是@PreDestroy容器销毁前干点啥。被@PostConstruct修饰的方法会在服务器加载Servlet的时候运行，并且只会被服务器执行一次。PostConstruct在构造函数之后执行，init（）方法之前执行。PreDestroy（）方法在destroy（）方法知性之后执行另外，spring中Constructor、@Autowired、@PostConstruct的顺序其实从依赖注入的字面意思就可以知道，要将对象p注入到对象a，那么首先就必须得生成对象a和对象p，才能执行注入。所以，如果一个类A中有个成员变量p被@Autowried注解，那么@Autowired注入是发生在A的构造方法执行完之后的。如果想在生成对象时完成某些初始化操作，而偏偏这些初始化操作又依赖于依赖注入，那么久无法在构造函数中实现。为此，可以使用@PostConstruct注解一个方法来完成初始化，@PostConstruct注解的方法将会在依赖注入完成后被自动调用。 定义属性刷新监听器1234567891011121314151617181920212223242526272829import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.context.scope.refresh.RefreshScopeRefreshedEvent;import org.springframework.context.annotation.Configuration;import org.springframework.context.event.EventListener;import lombok.extern.slf4j.Slf4j;/** * 自定义属性刷新监听器 * 当调用/actuator/refresh接口时会调用onRefresh方法 * */@Slf4j@Configurationpublic class PropertiesRefreshEventListener &#123; @Autowired private SystemConfig systemConfig; /** * 属性刷新事件监听方法 * 当此方法被调用时，表示/actuator/refresh方法被调用 * @param event */ @EventListener(RefreshScopeRefreshedEvent.class) public void onRefresh(RefreshScopeRefreshedEvent event) &#123; log.info("重新从数据库装载属性"); systemConfig.initDbPropertySourceUsage(); &#125;&#125; 启动配置热更新12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 短信发送接口（采用redis channel 实现 pub/sub 模式） * @param ipInfo 客户端ip信息 * @param appInfo 请求应用信息 * @param msgInfo 短信发送信息 * @return */@RefreshScope@PostMapping(value=&quot;/send&quot;)public RtnResult&lt;String&gt; sendSmsCodeChannel(IpInfo ipInfo, AppInfo appInfo, @Validated @RequestBody MsgInfo msgInfo, @Value(&quot;$&#123;smsCode.limitCount&#125;&quot;) Long smsLimitCount) &#123; log.info(&quot;应用【&#123;&#125;】IP地址【&#123;&#125;】采用Redis Channel方式请求短信发送接口，请求参数为【&#123;&#125;】&quot;, appInfo.getAppId(),ipInfo.getIpAddress(), msgInfo); // 判断短信发送次数是否超限（每应用每天每手机号） if(checkSmsCountOver(appInfo, msgInfo,smsLimitCount)) &#123; return RtnResult.error(SmsCodeMsg.SMS_COUNT_OVER.fillArgs(msgInfo.getMobile())); &#125; long start = System.currentTimeMillis(); // 组装发送队列条件 AsyncSmsInfo asyncSmsInfo = new AsyncSmsInfo(); asyncSmsInfo.setAppId(appInfo.getAppId()); asyncSmsInfo.setAppName(appInfo.getAppName()); asyncSmsInfo.setMobileSign(appInfo.getMobileSign()); asyncSmsInfo.setSmsCodeExpire(appInfo.getSmsCodeExpire()); asyncSmsInfo.setSmsCodeLength(appInfo.getSmsCodeLength()); asyncSmsInfo.setMobile(msgInfo.getMobile()); asyncSmsInfo.setContent(msgInfo.getContent()); asyncSmsInfo.setIpAddress(ipInfo.getIpAddress()); asyncSmsInfo.setInvokeTime(new Date()); try &#123; // 异步发送短信，将信息推送到Redis消息服务队列 publisherService.pushSms(asyncSmsInfo); &#125; catch (BizException e) &#123; return RtnResult.error(SmsCodeMsg.SMS_PUBLISH_ERROR); &#125; long end = System.currentTimeMillis(); log.info(&quot;应用【&#123;&#125;】IP地址【&#123;&#125;】采用Redis Channel方式请求短信发送接口，请求参数为【&#123;&#125;】完成，执行时间为【&#123;&#125;】ms&quot;, appInfo.getAppId(),ipInfo.getIpAddress(), msgInfo, end-start); return RtnResult.success(StringUtils.EMPTY);&#125; 文中提到的redis channel发送消息模式不是重点，不在讲解使用的是redisTemplate的convertAndSend方法，有需要时自行查阅。 参考@PostConstructSpringCloud配置热更新@RefreshScope,以及没有出现/refresh的动态刷新地址,访问404的解决办法]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jenkins上使用shell脚本nohup部署jar服务到remote服务器]]></title>
    <url>%2F2019%2F06%2F03%2Fjenkins%E4%B8%8A%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%ACnohup%E9%83%A8%E7%BD%B2jar%E6%9C%8D%E5%8A%A1%E5%88%B0remote%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[jenkins上使用shell用nohup java -jar部署服务到远程服务器遇到的坑 简书地址 先贴一下，我的jenkins里最后核心配置12345678#停止服务，备份jarssh -p 22 root@0.0.0.0 &apos;bash -s &apos; &lt; /opt/auto-deploy-scripts/remove_jar.sh /opt/jar/ alk-wxapi-test.jar#copy jarscp -P22 /mnt/jenkins/workspace/alk_api_test_auto_deploy/target/uberjar/alk-wxapi-test.jar root@0.0.0.0:/opt/jar/#重启服务ssh -p 22 root@0.0.0.0 &apos;bash -s&apos; &lt; /opt/auto-deploy-scripts/start_jar.sh /usr/local/jdk1.8.0_212 /opt/jar/ alk-wxapi-test.jar remove_jar.sh脚本：123456789101112131415161718192021222324252627282930313233343536373839404142#!/bin/bash#获取第一个参数,jar包路径,先备份,再发布jar_path=$1#!编译好的jar包名称jar_name=$2file=$jar_path$jar_namebak_file=`date +%Y%m%d%H%M%S`.$jar_namebak_path=&quot;bak/&quot;if [ $jar_name == &quot;&quot; ] ;thenecho &quot; jar name is null&quot;exit 5elseecho &quot;================== service stop start=======================&quot;pid=`ps -aux | grep $jar_name | grep -v bash |grep -v grep | awk &apos;&#123;print $2&#125;&apos;`if [ -n &quot;$&#123;pid&#125;&quot; ]then#!kill -9 强制终止 echo &quot;kill -9 的pid:&quot; $pid kill -9 $pidfiecho &quot;================== service stop end =======================&quot;echo &quot;service stop successed!&quot;echo &quot;================== jar backup start =======================&quot;#!将现有的jar备份后，将新的jar包替换cd $jar_pathecho &quot;file origin is: $file&quot;echo &quot;backup jar is: $jar_path$bak_path&quot;if [ -f &quot;$file&quot; ]thenrm -rf $jar_path$bak_path/*mv $jar_name $bak_filecp $bak_file $jar_path$bak_pathrm -rf $bak_filefiecho &quot;================== jar backup end =======================&quot;fi start_jar.sh脚本内容：12345678910111213141516171819202122232425#!启动应用#!stop.sh#!/bin/bashecho &quot;================== startup start =======================&quot;#获取第1个参数，jdk的安装路径jdk_path=$1#获取第2个参数,jar包路径,先备份,再发布jar_path=$2#第三个参数，编译好的jar包名称jar_name=$3file=$jar_path$jar_name#远程执行该脚本时改变了环境变量，找不到java的环境变量，提示：nohup: failed to run command ‘java’: No such file or directory#所以需要加上以下java的环境变量，其中JAVA_HOME的值，可以通过执行命令echo $JAVA_HOME得到，每个人的java环境变量设置不一样#该问题参考自：https://stackoverflow.com/questions/20791846/zookeeper-not-starting-nohup-errorexport JAVA_HOME=$&#123;jdk_path&#125;export PATH=$JAVA_HOME/bin:$PATHecho &quot;授予当前用户权限&quot;#chmod 777 $fileecho &quot;执行.....&quot;cd $jar_pathnohup java -jar $file &gt; $&#123;jar_path&#125;/log/nohup.log 2&gt;&amp;1 &amp;echo &quot;启动jar的命令: nohup java -jar $file &gt; $&#123;jar_path&#125;log/nohup.log 2&gt;&amp;1 &amp; &quot;echo &quot;================== startup end =======================&quot; remove_jar.sh和start_jar.sh在jenkins服务器上，需要将这两个shell在0.0.0.0（不能暴露）的远端去执行没错，客官您一眼就看出来了，觉得简单的不值一提吧，先别着急，对搜这个问题的小菜鸡来说这里面也是大有文章，听我一一道来。 1、第一个问题：ps -ef|grep xxx.jar查到多余的pid现象：在0.0.0.0上行ps -ef | grep alk-wxapi-test.jar | grep -v grep | awk &#39;{print $2}&#39;只能查到一个pid，但是把这句话放到shell脚本里，在本地使用命令上远端执行，就会找到3个pid，而且kill 时提示失败的错误。现在已经知道原因了，但是当时确实是个问题。已经解决不方便复现了，因此就描述一下就行了。原因：shell里的这个命令也是通过bash在远程执行的，所以找到的别的无关紧要的pid其实是bash，因此在grep是除了排除grep本身(grep -v grep)外还要排除bash（grep -v bash）最后命令是：1pid=`ps -aux | grep $jar_name | grep -v bash |grep -v grep | awk &apos;&#123;print $2&#125;&apos;` 2、远程执行脚本，里面有nohup java -jar,发生错误：nohup: failed to run command ‘java’: No such file or directory这是因为nohup时java环境变量没有读到，处理方式就是在nohup执行前加入12export JAVA_HOME=/usr/local/java/jdk1.8.0_151export PATH=$JAVA_HOME/bin:$PATH 3、其他思路 将jar的服务配置成服务器的一个service，使用systemctl停止、启动等。 使用docker部署服务。 2019-12-11 补充4、第二条说jdk的路径因为每个服务企业都不一样，所以需要手动传改，这一点已经在脚本上做了修改，启动脚本上携带的第一个参数就是jdk的安装路径 这两个也都是比较好的思路，以后肯定有机会体验的，本篇到此。 参考:ps -ef |grep -v 在shell sh 脚本中貌似无效？linux下搭建zookeeper集群遇到的坑nohup: cannot run command异常解决Zookeeper not starting, nohup error]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>java</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clojure java interop,依赖冲突解决]]></title>
    <url>%2F2019%2F06%2F02%2F2019-06-02-clojure-java-interop-extend%2F</url>
    <content type="text"><![CDATA[clojure中调用java,解决jar包依赖冲突 简书地址 今天在clojure中使用百度OCR的java api，但是发现引入java的sdk后，项目中配置的logback的配置与sdk里的slf4j冲突，并且不巧的是slf4j冲掉了原有的logback的配置，这还了得，只能修改后再使用啦。1、先以一个包的log配置和现状来看看现状。logback配置1&lt;logger name=&quot;jdbc.audit&quot; level=&quot;warn&quot;/&gt; jdbc.audit的级别是warn，原来启动项目时自然是不会打印jdbc.audit的日志的，引入第三方sdk然后启动repl，log中有如下内容：1234SLF4J: Class path contains multiple SLF4J bindings.SLF4J: Found binding in [jar:file:/Users/mahaiqiang/.m2/repository/org/slf4j/slf4j-simple/1.7.25/slf4j-simple-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: Found binding in [jar:file:/Users/mahaiqiang/.m2/repository/ch/qos/logback/logback-classic/1.1.3/logback-classic-1.1.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation. 提示冲突，再start项目打出一堆无用的log，现状演示完毕。2、修改jar内容参考的JAVA中jar包反编译再重新生成jar文件完整流程，先看看SDK的pom里引用的log依赖，证实一下： 另存为pom文件，删除掉这个dependency，然后将pom复制到这个jar所在的目录 然后执行以下操作123456//该命令创建pom文件与原jar包路径一样的文件夹(即class文件在jar包中的包名)mkdir -p META-INF/maven/com.baidu.aip/java-sdk//从当前目录拷贝一份修改后的pom.xml文件到java-sdk文件夹下cp pom.xml META-INF/maven/com.baidu.aip/java-sdk//将文件pom.xml添加/更新到现有的jar文件java-sdk-4.11.0.jar中jar uf java-sdk-4.11.0.jar META-INF/maven/com.baidu.aip/java-sdk/pom.xml 再看jar的内容然后启动项目：发现还是提示冲突，与之前一样，于是手动删除slf4j的slf4j-simple的jar然后再启动，还是一样，搜了一下slf4j果断该掉，再试一把呗，果然干净了。 以后怎么出来，怎么解决。再续吧，先干活要紧。2、使用SDK一般搜索clojure java interop就会有结果，我主要看了https://clojure.org/reference/java_interop和 This was a good chance to get familiar with a few of the interop features:Importing with (import java.io.FileReader)Instantiating an object, where new FileReader(path) becomes (FileReader. path)Accessing a class attribute/method, where CSVFormat.DEFAULT becomes CSVFormat/DEFAULT, andCalling an instance method, where record.get(“greeting”) becomes (.get record “greeting”).I particularly like that the Clojure notation clearly distinguishes class attributes/methods from instance methods eg. CSVFormat/DEFAULT vs. (.get record “greeting”).I’ll still be reaching for Python when a CSV file comes my way, but I was pleasantly surprised at how neat the Clojure version of this code ended up. 这段启示使用的,在repl里的代码如下：123456789101112(import com.baidu.aip.ocr.AipOcr)=&gt; com.baidu.aip.ocr.AipOcr(def ocr-client (AipOcr. &quot;16321634&quot; &quot;ppiRhvR7VQLqhaiMH7svO7G9&quot; &quot;my-secret&quot;))=&gt; #&apos;user/ocr-client(.receipt ocr-client &quot;upload/files/81558580941_.pic_1.jpg&quot; (new java.util.HashMap))=&gt;#object[org.json.JSONObject 0x7a4e1225 &quot;&#123;\&quot;log_id\&quot;:7285098450024979673,\&quot;words_result\&quot;:[&#123;\&quot;words\&quot;:\&quot;山东省耳鼻喉医院鼻变态反应-嗅觉门诊\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:29,\&quot;left\&quot;:232,\&quot;width\&quot;:606,\&quot;height\&quot;:63&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;变应原点刺试验报告单\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:104,\&quot;left\&quot;:318,\&quot;width\&quot;:419,\&quot;height\&quot;:45&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;姓名:\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:218,\&quot;left\&quot;:63,\&quot;width\&quot;:58,\&quot;height\&quot;:25&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;性别:年龄:岁电话\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:212,\&quot;left\&quot;:205,\&quot;width\&quot;:287,\&quot;height\&quot;:30&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;检查日期:\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:207,\&quot;left\&quot;:697,\&quot;width\&quot;:103,\&quot;height\&quot;:25&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;年月日\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:199,\&quot;left\&quot;:876,\&quot;width\&quot;:120,\&quot;height\&quot;:29&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;名称\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:302,\&quot;left\&quot;:106,\&quot;width\&quot;:40,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;标本风团直径结果\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:296,\&quot;left\&quot;:220,\&quot;width\&quot;:268,\&quot;height\&quot;:26&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;名称\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:295,\&quot;left\&quot;:572,\&quot;width\&quot;:40,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;标本风团直径结果\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:286,\&quot;left\&quot;:694,\&quot;width\&quot;:276,\&quot;height\&quot;:29&#125;&#125;,&#123;\&quot;words\&quot;:\&quot; (mm)\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:328,\&quot;left\&quot;:330,\&quot;width\&quot;:55,\&quot;height\&quot;:17&#125;&#125;,&#123;\&quot;words\&quot;:\&quot; mm)\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:321,\&quot;left\&quot;:806,\&quot;width\&quot;:43,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;9\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:370,\&quot;left\&quot;:586,\&quot;width\&quot;:12,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;粉尘螨\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:408,\&quot;left\&quot;:98,\&quot;width\&quot;:62,\&quot;height\&quot;:22&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;大籽蒿花粉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:401,\&quot;left\&quot;:543,\&quot;width\&quot;:100,\&quot;height\&quot;:23&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;2\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:477,\&quot;left\&quot;:126,\&quot;width\&quot;:12,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;10\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:470,\&quot;left\&quot;:582,\&quot;width\&quot;:23,\&quot;height\&quot;:16&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;屋尘螨\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:509,\&quot;left\&quot;:102,\&quot;width\&quot;:60,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;杨树花粉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:503,\&quot;left\&quot;:553,\&quot;width\&quot;:80,\&quot;height\&quot;:22&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;狗毛\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:607,\&quot;left\&quot;:113,\&quot;width\&quot;:42,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;柳树花粉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:603,\&quot;left\&quot;:554,\&quot;width\&quot;:79,\&quot;height\&quot;:23&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;12\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:670,\&quot;left\&quot;:583,\&quot;width\&quot;:22,\&quot;height\&quot;:17&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;猫毛\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:706,\&quot;left\&quot;:116,\&quot;width\&quot;:40,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;梧桐花粉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:702,\&quot;left\&quot;:554,\&quot;width\&quot;:79,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;5\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:773,\&quot;left\&quot;:131,\&quot;width\&quot;:13,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;13\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:768,\&quot;left\&quot;:585,\&quot;width\&quot;:21,\&quot;height\&quot;:16&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;鸭毛绒\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:804,\&quot;left\&quot;:106,\&quot;width\&quot;:62,\&quot;height\&quot;:22&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;产黄青霉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:801,\&quot;left\&quot;:554,\&quot;width\&quot;:81,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;14\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:868,\&quot;left\&quot;:586,\&quot;width\&quot;:22,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;葎草\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:903,\&quot;left\&quot;:119,\&quot;width\&quot;:40,\&quot;height\&quot;:19&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;链格孢霉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:900,\&quot;left\&quot;:557,\&quot;width\&quot;:80,\&quot;height\&quot;:23&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;15\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:955,\&quot;left\&quot;:587,\&quot;width\&quot;:21,\&quot;height\&quot;:16&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;藜属花粉\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:990,\&quot;left\&quot;:98,\&quot;width\&quot;:83,\&quot;height\&quot;:24&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;阴性对照\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:987,\&quot;left\&quot;:558,\&quot;width\&quot;:79,\&quot;height\&quot;:23&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;8\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1058,\&quot;left\&quot;:133,\&quot;width\&quot;:14,\&quot;height\&quot;:14&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;16\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1053,\&quot;left\&quot;:588,\&quot;width\&quot;:22,\&quot;height\&quot;:16&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;豚草\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1088,\&quot;left\&quot;:119,\&quot;width\&quot;:42,\&quot;height\&quot;:23&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;阳性对照\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1085,\&quot;left\&quot;:558,\&quot;width\&quot;:80,\&quot;height\&quot;:21&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;注:1、皮试前应停用口服抗组胺药物3天\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1178,\&quot;left\&quot;:46,\&quot;width\&quot;:372,\&quot;height\&quot;:41&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;2、有严重皮肤病和皮肤溃烂者不得做皮肤试验\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1217,\&quot;left\&quot;:121,\&quot;width\&quot;:405,\&quot;height\&quot;:29&#125;&#125;,&#123;\&quot;words\&quot;:\&quot;3、以上结果不做证明用\&quot;,\&quot;location\&quot;:&#123;\&quot;top\&quot;:1248,\&quot;left\&quot;:120,\&quot;width\&quot;:214,\&quot;height\&quot;:40&#125;&#125;],\&quot;words_result_num\&quot;:41&#125;&quot;] 再者，可以使用使用 lein 來管理你本地的 maven repo来讲jar做成本地资源，导入到maven仓库，不再多写了。 3、进阶上面的办法显然是比较low的，不利于持续化，更高阶的方式是在:dependencies中使用:exclusions关键字，忽略某些依赖，比如上面的sdk应该这么用：12[com.baidu.aip/java-sdk &quot;4.11.0&quot; :exclusions [org.slf4j/slf4j-simple]] 4、关于dependencies的其他在命令行里执行：1234#查看依赖关系lein deps :tree#加载依赖lein deps 其他更多请参照：https://cljdoc.org/d/leiningen/leiningen/2.9.1/api/leiningen.deps 5、clojure里使用java123456789101112131415;;md5加密(defn get-str-md5 [s] (apply str (map (partial format &quot;%02x&quot;) (.digest (doto (java.security.MessageDigest/getInstance &quot;MD5&quot;) .reset (.update (.getBytes s)))))));;修改时间格式(defn format-date-time [timestamp] (-&gt; &quot;yyyyMMddHHmmss&quot; (java.text.SimpleDateFormat.) (.format timestamp)));;获取UUID(defn generate-db-id [] (clojure.string/replace (str (java.util.UUID/randomUUID)) &quot;-&quot; &quot;&quot;)) 更多clojure和java的交互使用参看：https://clojure.org/reference/java_interop]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海尔创客汇笔记----安卓端编译和运行]]></title>
    <url>%2F2019%2F05%2F24%2F%E6%B5%B7%E5%B0%94%E5%88%9B%E5%AE%A2%E6%B1%87%E7%AC%94%E8%AE%B0----%E5%AE%89%E5%8D%93%E7%AB%AF%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[创客汇app在android studio里配置和编译运行，及安卓投屏工具推荐 简书地址 开发环境准备 下载安装android studio 启动运行 配置代理如果能翻墙最好了，因为一些资源都需要爬墙，实在没有吗，只能选择不代理。 选择标准安装，下一步，等待下载 import到Portal的android目录，导入项目 build完成以后在命令窗口启动打包jsbundle打包成jsbundle文件的方式可以参照另一篇-海尔创客汇笔记—-安卓生产环境打包配置。主要是下面这个命令打包IOS：1&quot;bundle-ios&quot;: &quot;react-native bundle --entry-file index.js --platform ios --dev false --bundle-output ./ios/main.jsbundle --assets-dest ./ios&quot;, 打包安卓：1&quot;bundle-android&quot;: &quot;react-native bundle --entry-file index.js --bundle-output ./android/app/src/main/assets/index.android.bundle --platform android --assets-dest ./android/app/src/main/res/ --dev false&quot;, 该项目有个没有配置好的地方，会导致生成.html文件，需要删除后，再进行后面的操作。 启动项目 yarn 123456789101112131415161718192021Portal git:(master) yarnyarn install v1.15.2[1/4] 🔍 Resolving packages...[2/4] 🚚 Fetching packages...[3/4] 🔗 Linking dependencies...warning &quot; &gt; react-native-doc-viewer@2.7.8&quot; has incorrect peer dependency &quot;react@^16.3.0-alpha.1&quot;.warning &quot; &gt; react-native-doc-viewer@2.7.8&quot; has incorrect peer dependency &quot;react-native@0.54.3&quot;.warning &quot; &gt; react-native-fs@2.9.12&quot; has incorrect peer dependency &quot;react@^16.2.0&quot;.warning &quot; &gt; react-native-fs@2.9.12&quot; has incorrect peer dependency &quot;react-native@^0.51.0&quot;.warning &quot; &gt; react-native-fs@2.9.12&quot; has unmet peer dependency &quot;prop-types@15.6.0&quot;.warning &quot; &gt; react-native-fs@2.9.12&quot; has unmet peer dependency &quot;create-react-class@^15.6.2&quot;.warning &quot; &gt; react-native-pdf@5.0.8&quot; has incorrect peer dependency &quot;rn-fetch-blob@^0.10.13&quot;.warning &quot; &gt; react-native-svg@6.5.2&quot; has unmet peer dependency &quot;prop-types@^15.5.7&quot;.warning &quot; &gt; react-native-svg-uri@1.2.3&quot; has incorrect peer dependency &quot;react-native-svg@^5.3.0&quot;.warning &quot; &gt; babel-jest@22.0.4&quot; has unmet peer dependency &quot;babel-core@^6.0.0 || ^7.0.0-0&quot;.[4/4] 🔨 Building fresh packages...warning Your current version of Yarn is out of date. The latest version is &quot;1.16.0&quot;, while you&apos;re on &quot;1.15.2&quot;.info To upgrade, run the following command:$ curl --compressed -o- -L https://yarnpkg.com/install.sh | bash✨ Done in 169.93s.➜ Portal git:(master) 启动js 运行app因为项目加入了IM的一些东西导致不能用模拟器运行，真机连接后选择USB调试，然后运行项目选择不使用instant查看日志： 配置JS调试模式 配置端口映射，让手机端连接到PC的js server上首先，电脑要有ADB，作为一名Android终端开发，这个是必备的。但是不巧我是客串的，所以手动安装了一下，MAC上通过homebrew安装很简单，一句命令：1brew cask install android-platform-tools 手动安装配置classpath的可以参考在 MAC OS X 安装 ADB (Android调试桥)。安装成功，并且真机设置好了开发者模式，允许调试的话，可以用以下命令看到设备：1234➜ ~ adb devicesList of devices attachedc752c893 device➜ ~ 有了adb以后，用下面的命令设置映射关系,将本地的8081映射到client的80811➜ ~ adb reverse tcp:8081 tcp:8081 如果adb没有配置到classpath里，可以这样12➜ ~ cd ~/Library/Android/sdk/platform-tools/➜ ~ ./adb reverse tcp:8081 tcp:8081 更多adb命令可以参考Android常用的adb命令总结 配置到以上映射，一般真机上会自动启动应用，启动后摇一摇，弹出菜单，查看最新的修改。 可以先来个reload试试。可以看到手机上开始reload 再看看服务端： 开始调试在刚才手机摇一摇出来的菜单中选择Debug JS Remotely，应用重启，同时看到server端启动的Dev Tools默认的浏览器也打开了一个新的tab，如下： 默认不会打开开发者模式，需要手动打开。我们清除一下默认的log，加载下首页，看到如下效果： 调试配置成功。 有时候一边撸代码，改两行还要拿起手机看看效果，确实不便，于是有了安卓手机投屏这种神一样的工具。也许工具很多，不过我这里就用过一种vysor，我用了谷歌浏览器的vysor插件。手机USB调试设置好以后会自己检测同时第一次会提示手机安装该软件，安装完成后打开，效果如下，与手机同步。 效果还是不错的，就是没有[摇一摇]这个功能，美中不足亦。 模拟器操作如果在模拟器上调试react native代码，也可以有摇一摇，或者配置hot loading这些，如下： shift + r 连续2 次 模拟器reload 界面 Command⌘ + M快捷键来快速打开Developer Menu。也可以通过模拟器上的菜单键来打开。]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro 学习之table使用]]></title>
    <url>%2F2019%2F04%2F24%2FAnt%20Design%20Pro%20%E5%AD%A6%E4%B9%A0%E4%B9%8Btable%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[阿里粑粑开源的管理框架Ant Design Pro使用记录之列表的灵活使用。 简书地址 在table的行render时常用的操作1、时间格式化，指定时区1234567891011 &#123;​ title: &apos;更新时间&apos;,​ dataIndex: &apos;updateTime&apos;,​ sorter: true,​ render: val =&gt; &lt;span&gt;&#123;moment(val).utc().format(&apos;YYYY-MM-DD HH:mm:ss&apos;)&#125;&lt;/span&gt;,​ &#125;, 2、列表上显示图片12345&#123; title: &apos;肺功能报告&apos;, dataIndex: &apos;url&apos;, render: text =&gt; &lt;img alt=&quot;商品图片&quot; style=&#123;&#123; width: 100, height: 50 &#125;&#125; src=&#123;text&#125; /&gt;,&#125;, 这个图片不能在当前页放大，或者直接在浏览器访问。如果需要点击后在当前页面放大，这样的效果可以这么干，先撸一个imageView组件放在src/pages/Common下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Spin, Modal &#125; from &apos;antd&apos;;const defaultStyle = &#123; borderRadius: 5, borderWidth: 1, borderStyle: &apos;solid&apos;, borderColor: &apos;#d9d9d9&apos;, width: 70, height: 70, padding: 5, cursor: &apos;pointer&apos;, display: &apos;inline-flex&apos;, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;,&#125;;class ImageView extends PureComponent &#123; state = &#123; loading: true, visible: false, imgWidth: 0, imgHeight: 0, &#125;; componentDidMount() &#123; this.init(); &#125; componentWillReceiveProps(nextProps) &#123; const &#123; url &#125; = this.props; if (url !== nextProps.url) &#123; this.init(); &#125; &#125; init = () =&gt; &#123; const &#123; url &#125; = this.props; if (url) &#123; this.setState(&#123; loading: true &#125;); const image = new Image(); image.src = url; if (image.complete) &#123; const size = this.getImageSize(image.width, image.height); this.setState(&#123; loading: false, imgWidth: size.width, imgHeight: size.height &#125;); &#125; else &#123; image.onload = () =&gt; &#123; const size = this.getImageSize(image.width, image.height); this.setState(&#123; loading: false, imgWidth: size.width, imgHeight: size.height &#125;); &#125;; &#125; &#125; &#125;; getImageSize = (originImgWidth, originImgHeight) =&gt; &#123; const &#123; width, height &#125; = this.props; const divWidth = (width || defaultStyle.width) - 2 * defaultStyle.padding; const divHeight = (height || defaultStyle.height) - 2 * defaultStyle.padding; const ratio = this.getRatio(originImgWidth, originImgHeight); const imgWidth = originImgWidth &gt; originImgHeight ? divWidth : divWidth * ratio; const imgHeight = originImgHeight &gt; originImgWidth ? divHeight : divHeight * ratio; return &#123; width: imgWidth, height: imgHeight &#125;; &#125;; getRatio = (width, height) =&gt; (width &lt; height ? width / height : height / width); render() &#123; const &#123; url, style &#125; = this.props; const &#123; loading, visible, imgWidth, imgHeight &#125; = this.state; return ( &lt;span&gt; &#123;url ? ( &lt;span style=&#123;&#123; ...defaultStyle, ...style &#125;&#125;&gt; &#123;loading ? ( &lt;Spin /&gt; ) : ( &lt;img style=&#123;&#123; width: imgWidth, height: imgHeight &#125;&#125; alt=&quot;点击预览图片&quot; src=&#123;url&#125; onClick=&#123;() =&gt; &#123; this.setState(&#123; visible: true &#125;); &#125;&#125; /&gt; )&#125; &lt;Modal style=&#123;&#123; top: 20 &#125;&#125; visible=&#123;visible&#125; footer=&#123;null&#125; onCancel=&#123;() =&gt; &#123; this.setState(&#123; visible: false &#125;); &#125;&#125; &gt; &lt;img alt=&quot;&quot; style=&#123;&#123; width: &apos;100%&apos; &#125;&#125; src=&#123;url&#125; /&gt; &lt;/Modal&gt; &lt;/span&gt; ) : ( &apos;无&apos; )&#125; &lt;/span&gt; ); &#125;&#125;export default ImageView; 然后table上这么用123456&#123; title: &apos;图片&apos;, dataIndex: &apos;itemImage&apos;, key: &apos;itemImage&apos;, render: (text, record) =&gt; &lt;ImageView alt=&#123;record.title&#125; url=&#123;text&#125; /&gt;,&#125;, 3、长文本使用省略号 123456789&#123; title: &apos;接收详情&apos;, dataIndex: &apos;receiveDesc&apos;, render: value =&gt; ( &lt;Ellipsis length=&#123;5&#125; tooltip&gt; &#123;value&#125; &lt;/Ellipsis&gt; ),&#125;, 用到的Ellipsis是官网在components提供的通用组件。 4、可折叠table1234567891011121314151617handleTableExpand = record =&gt; &#123; const toTags = items =&gt; items.map((value, index) =&gt; &lt;Tag key=&#123;index&#125;&gt;&#123;value&#125;&lt;/Tag&gt;); return ( &lt;div&gt; &lt;DescriptionList size=&quot;small&quot; col=&#123;1&#125;&gt; &lt;Description term=&quot;资源IDS&quot;&gt;&#123;toTags(getResources(record.resourceIds))&#125;&lt;/Description&gt; &lt;/DescriptionList&gt; &lt;DescriptionList style=&#123;&#123; marginTop: 15 &#125;&#125; size=&quot;small&quot;&gt; &lt;Description term=&quot;短信验证码长度&quot;&gt;&#123;record.smsCodeLength&#125;&lt;/Description&gt; &lt;Description term=&quot;短信验证码有效期&quot;&gt; &#123;record.smsCodeLength ? `$&#123;record.smsCodeExpire&#125;分钟` : &apos;&apos;&#125; &lt;/Description&gt; &lt;Description term=&quot;短信验证码签名&quot;&gt;&#123;record.smsCodeSign&#125;&lt;/Description&gt; &lt;/DescriptionList&gt; &lt;/div&gt; );&#125;; 然后在table上指定expandedRowRender={this.handleTableExpand}即可。 5、table显示总条数 123456789101112131415161718192021222324252627 state: &#123; query: &#123; ...defaultQuery &#125;, list: &#123; data: [], pagination: &#123;&#125;, &#125;, exporting: false, &#125;, effects: &#123; *fetch(&#123; payload &#125;, &#123; call, put, select &#125;) &#123; yield put(&#123; type: &apos;query&apos;, payload &#125;); const query = yield select(state =&gt; state.smsLog.query); const &#123; data &#125; = yield call(page, query); yield put(&#123; type: &apos;list&apos;, payload: &#123; data: data.content, pagination: &#123; current: data.number + 1, pageSize: data.size, total: Number(data.totalElements), &#125;, &#125;, &#125;); &#125;,&#125; 渲染时指定pagination的包括了total字段，所以就会显示出总条数。1234567&lt;PageTable columns=&#123;this.columns&#125; loading=&#123;loading&#125; dataSource=&#123;list.data&#125; pagination=&#123;list.pagination&#125; onChange=&#123;this.handleTableChange&#125; /&gt; list就是从接口获取的数据， 6、表头支持筛选123456789&#123; title: &apos;人员状态&apos;, dataIndex: &apos;jobStatus&apos;, render:(text)=&gt;&#123; const filters = options.jobStatus.filter(s =&gt; s.value === text); return filters.length ? filters[0].text : &apos;&apos;; &#125;, filters: options.jobStatus,&#125; 页面加载时加载个数据字典的值12345componentDidMount() &#123; this.props.dispatch(&#123;type: &apos;rwUserOption/init&apos;&#125;).then(() =&gt; &#123; this.props.dispatch(&#123;type: &apos;rwUserList/reload&apos;&#125;); &#125;);&#125; 请求字典数据：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import dict from &apos;../../services/api-dict&apos;const optionKeys = [ &quot;RWGH-USER-XIAOWEI&quot;, &quot;RWGH-USER-STATUS&quot;, &apos;RWGH-TRAIN-ATTENDANCE&apos;];export default &#123; namespace: &apos;rwUserOption&apos;, state: &#123; sex:[ &#123;text: &apos;男&apos;, value: &apos;0&apos;&#125;, &#123;text: &apos;女&apos;, value: &apos;1&apos;&#125; ], //小微 xiaowei: [], //工作状态 jobStatus: [], attendances: [] &#125;, effects: &#123; * init(&#123;payload&#125;, &#123;put, call&#125;) &#123; const [xiaowei, jobStatus, attendances] = yield call(dict.many, optionKeys); const mapper = (items) =&gt; &#123; return items.map(item =&gt; &#123; const &#123;dictValueName, dictValueCode&#125; = item; return &#123;text: dictValueName, value: dictValueCode&#125;; &#125;) &#125;; yield put(&#123;type: &apos;changeXiaoWei&apos;, payload: mapper(xiaowei)&#125;); yield put(&#123;type: &apos;changeJobStatus&apos;, payload: mapper(jobStatus)&#125;); yield put(&#123;type: &apos;changeAttendances&apos;, payload: mapper(attendances)&#125;); &#125; &#125;, reducers: &#123; changeXiaoWei(state, &#123;payload: xiaowei&#125;) &#123; return &#123;...state, xiaowei&#125; &#125;, changeJobStatus(state, &#123;payload: jobStatus&#125;) &#123; return &#123;...state, jobStatus&#125; &#125;, changeAttendances(state, &#123;payload: attendances&#125;)&#123; return &#123;...state, attendances&#125; &#125; &#125;&#125; dict.many是这样定义的：12345678910111213141516171819202122import req from &apos;./api-base&apos;;const dict = &#123; one: (indexCode, cache = true) =&gt; &#123; return new Promise(resolve =&gt; &#123; const dict = sessionStorage.getItem(indexCode); if (cache &amp;&amp; dict) &#123; resolve(dict); &#125; else &#123; req.get(&quot;/questionnaire/admin/sys/dict/values&quot;, &#123;indexCode&#125;).then(data =&gt; &#123; sessionStorage.setItem(dict, data.data); resolve(data.data) &#125;) &#125; &#125;); &#125;, many: (indexCodes, cache = true) =&gt; &#123; return Promise.all(indexCodes.map(code =&gt; dict.one(code, cache))); &#125;&#125;export default dict; 其中人员状态的数据结构如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&#123; &quot;code&quot;: 0, &quot;message&quot;: &quot;操作成功&quot;, &quot;data&quot;: [ &#123; &quot;dictValueId&quot;: 162, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;0&quot;, &quot;dictValueName&quot;: &quot;在职&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 0 &#125;, &#123; &quot;dictValueId&quot;: 163, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;1&quot;, &quot;dictValueName&quot;: &quot;产假&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 1 &#125;, &#123; &quot;dictValueId&quot;: 164, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;2&quot;, &quot;dictValueName&quot;: &quot;离职&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 2 &#125;, &#123; &quot;dictValueId&quot;: 165, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;3&quot;, &quot;dictValueName&quot;: &quot;退休&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 3 &#125;, &#123; &quot;dictValueId&quot;: 167, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;4&quot;, &quot;dictValueName&quot;: &quot;转岗&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 4 &#125;, &#123; &quot;dictValueId&quot;: 168, &quot;dictIndexId&quot;: 148, &quot;dictValueCode&quot;: &quot;5&quot;, &quot;dictValueName&quot;: &quot;病假&quot;, &quot;deleteFlag&quot;: &quot;0&quot;, &quot;dictValueSort&quot;: 5 &#125; ]&#125; 这个筛选是多选的，选中后点击确定会触发查询，参数会xiaoweis=XSJDXW%2CXHYXW像这样拼接到url里。 7、结果转enum显示文本，如订单状态等。1234const sendResultDom = &#123; success: &lt;Badge status=&quot;success&quot; text=&quot;成功&quot; /&gt;, error: &lt;Badge status=&quot;error&quot; text=&quot;失败&quot; /&gt;,&#125;; 12345&#123; title: &apos;发送结果&apos;, dataIndex: &apos;sendResult&apos;, render: test =&gt; (test === &apos;0&apos; ? sendResultDom.success : sendResultDom.error),&#125;, 这种适合于这个对应值比较稳定变动较小的情况，如果是经常修改或者适配新增，又不改代码的话，就需要以数据字典的形式提供给页面字典数据，然后用组件去适配显示内容。 比如数据字典的sysDict/value/code/list?indexCode=sms_receive_result数据结构如下:123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;code&quot;: 0, &quot;message&quot;: &quot;操作成功&quot;, &quot;data&quot;: [ &#123; &quot;id&quot;: &quot;88685502718279680&quot;, &quot;isDelete&quot;: false, &quot;createTime&quot;: 1553756821000, &quot;updateTime&quot;: 1553756821000, &quot;parentId&quot;: &quot;88685399781670912&quot;, &quot;name&quot;: &quot;成功&quot;, &quot;code&quot;: &quot;0&quot;, &quot;sort&quot;: 0, &quot;type&quot;: 1, &quot;remark&quot;: &quot;&quot; &#125;, &#123; &quot;id&quot;: &quot;88685542446727168&quot;, &quot;isDelete&quot;: false, &quot;createTime&quot;: 1553756830000, &quot;updateTime&quot;: 1553756830000, &quot;parentId&quot;: &quot;88685399781670912&quot;, &quot;name&quot;: &quot;失败&quot;, &quot;code&quot;: &quot;1&quot;, &quot;sort&quot;: 1, &quot;type&quot;: 1, &quot;remark&quot;: &quot;&quot; &#125;, &#123; &quot;id&quot;: &quot;88685595827634176&quot;, &quot;isDelete&quot;: false, &quot;createTime&quot;: 1553756843000, &quot;updateTime&quot;: 1553756843000, &quot;parentId&quot;: &quot;88685399781670912&quot;, &quot;name&quot;: &quot;等待&quot;, &quot;code&quot;: &quot;-1&quot;, &quot;sort&quot;: 2, &quot;type&quot;: 1, &quot;remark&quot;: &quot;&quot; &#125; ]&#125; 然后写一个DictValue的组件：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/* eslint-disable */import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Spin, Select &#125; from &apos;antd&apos;;import _ from &apos;lodash&apos;;import memoizeOne from &apos;memoize-one&apos;;import &#123; valueListByIndexCode &#125; from &apos;@/services/dict&apos;;const dictCache = &#123;&#125;;const filterValue = (dicts, value) =&gt; _.find(dicts, d =&gt; d.code === value);const memoizeGetValue = memoizeOne(filterValue);async function getIndexValues(index) &#123; const values = dictCache[index]; if (values) return values; const &#123; data &#125; = await valueListByIndexCode(&#123; indexCode: index &#125;); const newValues = data.map(d =&gt; (&#123; name: d.name, code: d.code, remark: d.remark &#125;)); dictCache[index] = newValues; return newValues;&#125;export async function getValue(index, value) &#123; const indexValues = await getIndexValues(index); return memoizeGetValue(indexValues, value);&#125;async function getValueName(index, value) &#123; const indexValue = await getValue(index, value); return indexValue ? indexValue.name : value;&#125;export class DictValue extends PureComponent &#123; state = &#123; loading: false, text: &apos;&apos;, &#125;; componentDidMount() &#123; const &#123; index, value &#125; = this.props; this.loadDate(index, value); &#125; componentWillReceiveProps(nextProps) &#123; const &#123; index, value &#125; = nextProps; const &#123; props &#125; = this; if (props.index !== index || props.value !== value) &#123; this.loadDate(index, value); &#125; &#125; loadDate = (index, value) =&gt; &#123; if (!value) &#123; this.setState(&#123; text: &apos;&apos;, loading: false &#125;); return; &#125; this.setState(&#123; loading: true &#125;); getValueName(index, value).then(text =&gt; &#123; this.setState(&#123; text, loading: false &#125;); &#125;); &#125;; render() &#123; const &#123; loading, text &#125; = this.state; return &lt;span&gt;&#123;loading ? &lt;Spin size=&quot;small&quot; /&gt; : `$&#123;text&#125;`&#125;&lt;/span&gt;; &#125;&#125;const &#123; Option &#125; = Select;export class DictSelect extends PureComponent &#123; state = &#123; data: [], &#125;; componentDidMount() &#123; const &#123; index &#125; = this.props; getIndexValues(index).then(data =&gt; &#123; this.setState(&#123; data &#125;); &#125;); &#125; render() &#123; const &#123; props &#125; = this; const &#123; data &#125; = this.state; return ( &lt;Select placeholder=&quot;请选择&quot; &#123;...props&#125;&gt; &#123;data.map(item =&gt; ( &lt;Option key=&#123;item.code&#125; value=&#123;item.code&#125;&gt; &#123;item.name&#125; &lt;/Option&gt; ))&#125; &lt;/Select&gt; ); &#125;&#125; 其中valueListByIndexCode就是获取到上面结构数据的api，不用特殊说明了。这个类包含了两个方法，一个是DictValue，用来从key获取value，一个是DictSelect提供一下该字典值得下拉选项。DictValue的用法:12345&#123; title: &apos;接收结果&apos;, dataIndex: &apos;receiveResult&apos;, render: value =&gt; &lt;DictValue index=&quot;sms_receive_result&quot; value=&#123;value&#125; /&gt;,&#125;, DictSelect的用法:12345678&lt;FormItem label=&quot;接收结果&quot;&gt; &lt;DictSelect allowClear index=&quot;sms_receive_result&quot; value=&#123;query.receiveResult&#125; onChange=&#123;receiveResult =&gt; this.handleSearch(&#123; receiveResult &#125;)&#125; /&gt;&lt;/FormItem&gt; 8、等待。。。 官方API]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro 使用点点滴滴]]></title>
    <url>%2F2019%2F04%2F09%2FAnt%20Design%20Pro%20%E4%BD%BF%E7%94%A8%E7%82%B9%E7%82%B9%E6%BB%B4%E6%BB%B4%2F</url>
    <content type="text"><![CDATA[阿里粑粑开源的管理框架Ant Design Pro使用记录之mock。 简书地址 1、有用的Mockantd pro在本地开发环境下start时就提供了mock环境了，在根目录的mock里可以定义自己需要mock的方法和出入参数，非常的方便。 2019-06-03补充：在我的尝试之前推荐下json-server，我下面没有使用，但是在别的地方用过，确实还是很方便的。 接下来介绍下我怎么之前怎么用的：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889import Mock from &apos;mockjs&apos;;const &#123; Random &#125; = Mock;const userListLength = Random.integer(10, 100);const userList = [];// 生成表格mock数据for (let i = 0; i &lt; userListLength; i += 1) &#123; userList.push(&#123; id: i, love: Math.random(0, 1) &gt; 0.5, taxNo: Random.integer(4e14, 5e14), taxtype: i % 3 === 0 ? &apos;small&apos; : i % 2 === 0 ? &apos;personal&apos; : &apos;normal&apos;, name: `深圳市丝悦化妆品有限公司$&#123;i + 1&#125;`, no: i % 2 === 0 ? `B$&#123;i&#125;` : `T$&#123;i&#125;`, taxZone: Math.random(0, 1) &gt; 0.5 ? &apos;广东&apos; : &apos;深圳&apos;, key: Math.random(0, 1) &gt; 0.5, sysVerify: Math.random(0, 1) &gt; 0.5, taxManager: &apos;lane&apos;, accountManager: &apos;lane&apos;, date: Random.datetime(&apos;yyyy-MM-dd HH:mm:ss&apos;), &#125;)&#125;export default &#123; [`POST /api/biz/md/bizMdClient/search`](req, res, u, b) &#123; // 分页查询处理 const body = (b &amp;&amp; b.body) || req.body; const &#123; skip, limit &#125; = body; const start = skip * limit; // 数据开始索引 const end = start + (limit * 1); // 数据结束索引 const dataSource = userList.slice(start, end); // 要返回的数据 const result = &#123; code: 200, data: dataSource, // 分页信息 pageinfo: &#123; &quot;total&quot;: userList.length, &quot;pageindex&quot;: skip, &quot;pagesize&quot;: limit, &#125; &#125;; if (res &amp;&amp; res.json) &#123; res.json(result); &#125; else &#123; return result; &#125; &#125;, [`POST /api/biz/md/bizMdClient/love`](req, res) &#123; const &#123; client &#125; = req.body for (let i = 0, length = userList.length; i &lt; length; i += 1) &#123; if (client.id === userList[i].id) &#123; userList[i].love = !userList[i].love; break; &#125; &#125; res.send(&#123; code: 200 &#125;).end() &#125;, [`POST /api/biz/md/bizMdClient/queryFilterOptions`](req, res) &#123; const dataSource = [ &#123; title: &apos;全部&apos;, &#125;, &#123; title: &apos;一般&apos;, &#125;, &#123; title: &apos;小规模&apos;, &#125;, &#123; title: &apos;税务待分配&apos;, &#125;, &#123; title: &apos;账务待分配&apos;, &#125;, &#123; title: &apos;我的关注&apos;, &#125;, ]; const result = &#123; code: 200, data: dataSource, &#125;; if (res &amp;&amp; res.json) &#123; res.json(result); &#125; else &#123; return result; &#125; &#125;&#125; 上面的mock是基于本地npm start 时启动的mock服务说的，但是代码撸完了，总要在服务器上提供服务，不能再本地自己玩吧，也就是说npm build后，生成的dist的目录的文件要在服务器上跑的，一般是用nginx作为服务器。测试mock就没有了，这时候怎么办，有两种办法解决，其实就算是本地我个人也比较推荐下面这种方式。将一个json格式的文本复制到比如test.json中，内容如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&#123; &quot;list&quot;: [ &#123; &quot;callNo&quot;: &quot;11101&quot;, &quot;desc&quot;: &quot;20ml&quot;, &quot;name&quot;: &quot;1号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 1, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11102&quot;, &quot;desc&quot;: &quot;20ml&quot;, &quot;name&quot;: &quot;2号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 2, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11103&quot;, &quot;desc&quot;: &quot;30ml&quot;, &quot;name&quot;: &quot;3号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 3, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11104&quot;, &quot;desc&quot;: &quot;30ml&quot;, &quot;name&quot;: &quot;4号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 4, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11105&quot;, &quot;desc&quot;: &quot;40ml&quot;, &quot;name&quot;: &quot;5号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 5, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11106&quot;, &quot;desc&quot;: &quot;40ml&quot;, &quot;name&quot;: &quot;6号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 6, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;111017&quot;, &quot;desc&quot;: &quot;60ml&quot;, &quot;name&quot;: &quot;7号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 7, &quot;fenZhen&quot;: &quot;是&quot; &#125;, &#123; &quot;callNo&quot;: &quot;11108&quot;, &quot;desc&quot;: &quot;60ml&quot;, &quot;name&quot;: &quot;8号脱敏针&quot;, &quot;updatedAt&quot;: &quot;2019-04-12T14:00:00.000Z&quot;, &quot;pingHao&quot;: 8, &quot;fenZhen&quot;: &quot;是&quot; &#125; ], &quot;pagination&quot;: &#123; &quot;total&quot;: 8, &quot;pageSize&quot;: 10, &quot;current&quot;: 1 &#125;&#125; 然后把这个文件上传到任何一个有网就可以下载的服务器上，比如七牛啊，百度啊，什么的提供存储的地方，比如我的 models里还是一样的调用services的js文件里提供的接口1234567*fetchTuoMinZhen(&#123; payload &#125;, &#123; call, put &#125;) &#123; const response = yield call(queryTuoMinZhen, payload); yield put(&#123; type: &apos;save&apos;, payload: response, &#125;);&#125;, 重点来了，本来services里的接口是这样的:123export async function queryTuoMinZhen(params) &#123; return request(`/api/tuominzhen?$&#123;stringify(params)&#125;`);&#125; 也安装mock-server专门提供服务，具体可以google试试。 2、在table的行render时常用的操作1、时间格式化，指定时区1234567891011 &#123;​ title: &apos;更新时间&apos;,​ dataIndex: &apos;updateTime&apos;,​ sorter: true,​ render: val =&gt; &lt;span&gt;&#123;moment(val).utc().format(&apos;YYYY-MM-DD HH:mm:ss&apos;)&#125;&lt;/span&gt;,​ &#125;, 2、显示图片3、长文本使用省略号4、可折叠table5、显示总条数6、表头支持筛选和排序 3、修改antd默认的样式在自定义的class中加入:global关键字的样式:12 怎么修改antd默认样式及遇到的问题 推荐网站Ant Design Pro总结篇经典 – Ant Design Pro 学习笔记package.json配置文件]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro学习之组件化]]></title>
    <url>%2F2019%2F03%2F28%2FAnt%20Design%20Pro%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96%2F</url>
    <content type="text"><![CDATA[阿里粑粑开源的管理框架Ant Design Pro使用记录之规范学习，组件化。 简书地址同事写了一个我目前看着比较正规化的组件式页面，在此作为学习标准贴一下，先看个效果图： 这是一个oauth的client管理的页面，主要代码如下：api列表数据结构1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; &quot;code&quot;: 0, &quot;message&quot;: &quot;操作成功&quot;, &quot;data&quot;: &#123; &quot;content&quot;: [ &#123; &quot;clientId&quot;: &quot;usercenter-manage&quot;, &quot;clientName&quot;: &quot;测试app&quot;, &quot;resourceIds&quot;: &quot;usercenter/manage,smscenter/api&quot;, &quot;clientSecret&quot;: &quot;&quot;, &quot;scope&quot;: &quot;read,write,trust&quot;, &quot;authorizedGrantTypes&quot;: &quot;password,refresh_token&quot;, &quot;webServerRedirectUri&quot;: null, &quot;authorities&quot;: null, &quot;accessTokenValidity&quot;: 7200, &quot;refreshTokenValidity&quot;: null, &quot;additionalInformation&quot;: null, &quot;autoapprove&quot;: null, &quot;smsCodeLength&quot;: 4, &quot;smsCodeExpire&quot;: 10, &quot;smsCodeSign&quot;: &quot;【xxxxxx】&quot;, &quot;platformCode&quot;: null, &quot;updateTime&quot;: &quot;2019-03-25T14:27:26.000+0000&quot;, &quot;createTime&quot;: null &#125; ], &quot;pageable&quot;: &#123; &quot;sort&quot;: &#123; &quot;sorted&quot;: true, &quot;unsorted&quot;: false, &quot;empty&quot;: false &#125;, &quot;offset&quot;: 0, &quot;pageSize&quot;: 10, &quot;pageNumber&quot;: 0, &quot;paged&quot;: true, &quot;unpaged&quot;: false &#125;, &quot;totalPages&quot;: 1, &quot;totalElements&quot;: 9, &quot;last&quot;: true, &quot;size&quot;: 10, &quot;number&quot;: 0, &quot;first&quot;: true, &quot;numberOfElements&quot;: 9, &quot;sort&quot;: &#123; &quot;sorted&quot;: true, &quot;unsorted&quot;: false, &quot;empty&quot;: false &#125;, &quot;empty&quot;: false &#125;&#125; 组件化嘛，文件自然比较多，打个标识 1、ClientList：页面渲染js123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; connect &#125; from &apos;dva&apos;;import &#123; Popconfirm, Card, Table, Button, Divider, Tag, message &#125; from &apos;antd&apos;;import PageHeaderWrapper from &apos;@/components/PageHeaderWrapper&apos;;import DescriptionList from &apos;@/components/DescriptionList&apos;;import ClientForm from &apos;./ClientForm&apos;;import &#123; humanizeTime, getOAuthTypeNames &#125; from &apos;./ClientUtil&apos;;import styles from &apos;../Common/TableList.less&apos;;const &#123; Description &#125; = DescriptionList;@connect((&#123; client, loading &#125;) =&gt; (&#123; client, loading: loading.effects[&apos;client/fetch&apos;], submitting: loading.effects[&apos;client/update&apos;],&#125;))class ClientList extends PureComponent &#123; columns = [ &#123; title: &apos;应用ID&apos;, dataIndex: &apos;clientId&apos;, &#125;, &#123; title: &apos;应用名称&apos;, dataIndex: &apos;clientName&apos;, &#125;, &#123; title: ( &lt;span&gt; Token &lt;br /&gt; 有效期 &lt;/span&gt; ), dataIndex: &apos;accessTokenValidity&apos;, render: value =&gt; humanizeTime(value), &#125;, &#123; title: ( &lt;span&gt; RefreshToken &lt;br /&gt; 有效期 &lt;/span&gt; ), dataIndex: &apos;refreshTokenValidity&apos;, render: value =&gt; humanizeTime(value), &#125;, &#123; title: &apos;操作&apos;, dataIndex: &apos;action&apos;, render: (text, record) =&gt; ( &lt;span&gt; &lt;a onClick=&#123;() =&gt; &#123; this.handleOpenForm(record); &#125;&#125; &gt; 编辑 &lt;/a&gt; &lt;Divider type=&quot;vertical&quot; /&gt; &lt;Popconfirm title=&quot;确认删除？&quot; onConfirm=&#123;() =&gt; &#123; this.handleRemove(record); &#125;&#125; okText=&quot;确认&quot; cancelText=&quot;取消&quot; &gt; &lt;a href=&quot;#&quot;&gt;删除&lt;/a&gt; &lt;/Popconfirm&gt; &lt;/span&gt; ), &#125;, ]; componentDidMount() &#123; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/fetch&apos; &#125;); &#125; handleTableChange = pagination =&gt; &#123; const &#123; current, pageSize &#125; = pagination; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/fetch&apos;, payload: &#123; page: current - 1, size: pageSize &#125; &#125;); &#125;; handleTableExpand = record =&gt; &#123; const toTags = items =&gt; items.map((value, index) =&gt; &lt;Tag key=&#123;index&#125;&gt;&#123;value&#125;&lt;/Tag&gt;); return ( &lt;div&gt; &lt;DescriptionList size=&quot;small&quot;&gt; &lt;Description term=&quot;授权模式&quot;&gt; &#123;toTags(getOAuthTypeNames(record.authorizedGrantTypes))&#125; &lt;/Description&gt; &lt;Description term=&quot;平台编码&quot;&gt;&#123;record.platformCode&#125;&lt;/Description&gt; &lt;Description term=&quot;资源IDS&quot;&gt;&#123;record.resourceIds&#125;&lt;/Description&gt; &lt;/DescriptionList&gt; &lt;DescriptionList style=&#123;&#123; marginTop: 15 &#125;&#125; size=&quot;small&quot;&gt; &lt;Description term=&quot;短信验证码长度&quot;&gt;&#123;record.smsCodeLength&#125;&lt;/Description&gt; &lt;Description term=&quot;短信验证码有效期&quot;&gt; &#123;record.smsCodeLength ? `$&#123;record.smsCodeLength&#125;分钟` : &apos;&apos;&#125; &lt;/Description&gt; &lt;Description term=&quot;短信验证码签名&quot;&gt;&#123;record.smsCodeSign&#125;&lt;/Description&gt; &lt;/DescriptionList&gt; &lt;/div&gt; ); &#125;; handleOpenForm = formData =&gt; &#123; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/openForm&apos;, payload: formData &#125;); &#125;; handleCloseForm = () =&gt; &#123; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/closeForm&apos; &#125;); &#125;; handleAdd = values =&gt; &#123; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/update&apos;, payload: values &#125;).then(() =&gt; &#123; message.success(&apos;操作成功&apos;); &#125;); &#125;; handleRemove = record =&gt; &#123; const &#123; dispatch &#125; = this.props; dispatch(&#123; type: &apos;client/remove&apos;, payload: record.clientId &#125;).then(() =&gt; &#123; message.success(&apos;删除成功&apos;); &#125;); &#125;; render() &#123; const &#123; client: &#123; list, form &#125;, loading, submitting, &#125; = this.props; const paginationProps = &#123; showSizeChanger: true, showQuickJumper: true, ...list.pagination, &#125;; return ( &lt;PageHeaderWrapper title=&quot;应用列表&quot;&gt; &lt;Card bordered=&#123;false&#125;&gt; &lt;div className=&#123;styles.tableList&#125;&gt; &lt;div className=&#123;styles.tableListForm&#125; /&gt; &lt;div className=&#123;styles.tableListOperator&#125;&gt; &lt;Button icon=&quot;plus&quot; type=&quot;primary&quot; onClick=&#123;this.handleOpenForm&#125;&gt; 新建 &lt;/Button&gt; &lt;/div&gt; &lt;Table rowKey=&quot;clientId&quot; size=&quot;middle&quot; columns=&#123;this.columns&#125; loading=&#123;loading&#125; dataSource=&#123;list.data&#125; pagination=&#123;paginationProps&#125; onChange=&#123;this.handleTableChange&#125; expandedRowRender=&#123;this.handleTableExpand&#125; /&gt; &lt;/div&gt; &lt;/Card&gt; &lt;ClientForm data=&#123;form.data&#125; visible=&#123;form.visible&#125; submitting=&#123;submitting&#125; onClose=&#123;this.handleCloseForm&#125; onSave=&#123;this.handleAdd&#125; /&gt; &lt;/PageHeaderWrapper&gt; ); &#125;&#125;export default ClientList; 2、ClientForm：添加编辑单条数据的Form123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Modal, Form, Input, Tabs, InputNumber &#125; from &apos;antd&apos;;import SecretInput from &apos;./SecretInput&apos;;import PeriodInput from &apos;./PeriodInput&apos;;import GrantTypeInput from &apos;./GrantTypeInput&apos;;import SmsSignInput from &apos;./SmsSignInput&apos;;const &#123; Item: FormItem &#125; = Form;const &#123; TabPane &#125; = Tabs;@Form.create()class ClientForm extends PureComponent &#123; state = &#123; tabKey: &apos;1&apos;, &#125;; reset = () =&gt; &#123; const &#123; form &#125; = this.props; form.resetFields(); this.setState(&#123; tabKey: &apos;1&apos; &#125;); &#125;; render() &#123; const &#123; data, visible, submitting, onSave, onClose, form &#125; = this.props; const &#123; tabKey &#125; = this.state; const formItemLayout = &#123; labelCol: &#123; span: 5 &#125;, wrapperCol: &#123; span: 15 &#125;, &#125;; const title = data.clientId ? &apos;更新应用&apos; : &apos;添加应用&apos;; return ( &lt;Modal style=&#123;&#123; top: 10 &#125;&#125; width=&#123;800&#125; title=&#123;title&#125; visible=&#123;visible&#125; confirmLoading=&#123;submitting&#125; onCancel=&#123;() =&gt; &#123; this.reset(); onClose(); &#125;&#125; onOk=&#123;() =&gt; &#123; form.validateFields((err, values) =&gt; &#123; if (!err) onSave(values); else this.setState(&#123; tabKey: &apos;1&apos; &#125;); &#125;); &#125;&#125; &gt; &lt;Form&gt; &lt;Tabs tabPosition=&quot;left&quot; activeKey=&#123;tabKey&#125; onChange=&#123;activeKey =&gt; this.setState(&#123; tabKey: activeKey &#125;)&#125; &gt; &lt;TabPane tab=&quot;授权设置&quot; key=&quot;1&quot;&gt; &lt;FormItem label=&quot;应用ID&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;clientId&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;应用ID不能为空！&apos;, &#125;, ], initialValue: data.clientId, &#125;)(&lt;Input disabled=&#123;!!data.clientId&#125; /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;应用名称&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;clientName&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;应用名称不能为空！&apos;, &#125;, ], initialValue: data.clientName, &#125;)(&lt;Input /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;资源IDs&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;resourceIds&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;资源IDs不能为空！&apos;, &#125;, ], initialValue: data.resourceIds, &#125;)(&lt;Input /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;授权类型&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;authorizedGrantTypes&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;请选择授权类型！&apos;, &#125;, ], initialValue: data.authorizedGrantTypes, &#125;)(&lt;GrantTypeInput /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;Token有效期&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;accessTokenValidity&apos;, &#123; initialValue: _.defaultTo(data.accessTokenValidity, &apos;&apos;), &#125;)(&lt;PeriodInput /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;Refresh有效期&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;refreshTokenValidity&apos;, &#123; initialValue: _.defaultTo(data.refreshTokenValidity, &apos;&apos;), &#125;)(&lt;PeriodInput /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;秘钥&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;clientSecret&apos;, &#123; initialValue: _.defaultTo(data.clientSecret, &apos;&apos;), &#125;)(&lt;SecretInput /&gt;)&#125; &lt;/FormItem&gt; &lt;/TabPane&gt; &lt;TabPane tab=&quot;短信设置&quot; key=&quot;2&quot;&gt; &lt;FormItem label=&quot;验证码长度&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;smsCodeLength&apos;, &#123; initialValue: data.smsCodeLength, &#125;)(&lt;InputNumber min=&#123;1&#125; style=&#123;&#123; width: 300 &#125;&#125; /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;验证码有效期(分钟)&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;smsCodeExpire&apos;, &#123; initialValue: data.smsCodeExpire, &#125;)(&lt;InputNumber min=&#123;1&#125; style=&#123;&#123; width: 300 &#125;&#125; /&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;验证码签名&quot; &#123;...formItemLayout&#125;&gt; &#123;form.getFieldDecorator(&apos;smsCodeSign&apos;, &#123; initialValue: data.smsCodeSign, &#125;)(&lt;SmsSignInput /&gt;)&#125; &lt;/FormItem&gt; &lt;/TabPane&gt; &lt;/Tabs&gt; &lt;/Form&gt; &lt;/Modal&gt; ); &#125;&#125;export default ClientForm; 3、ClientUtil.js123456789101112131415161718192021222324252627import _ from &apos;lodash&apos;;import moment from &apos;moment&apos;;export const authTypes = [ &#123; name: &apos;授权码模式&apos;, value: &apos;authorization_code&apos; &#125;, &#123; name: &apos;简化模式&apos;, value: &apos;implicit&apos; &#125;, &#123; name: &apos;密码模式&apos;, value: &apos;password&apos; &#125;, &#123; name: &apos;客户端模式&apos;, value: &apos;client_credentials&apos; &#125;, &#123; name: &apos;刷新模式&apos;, value: &apos;refresh_token&apos; &#125;,];export function getOAuthTypeNames(str) &#123; if (!str) return []; const values = str.split(&apos;,&apos;); return values.map(value =&gt; _.find(authTypes, t =&gt; t.value === value).name);&#125;export function getResources(str) &#123; if (!str) return []; return str.split(&apos;,&apos;);&#125;export function humanizeTime(value) &#123; let timeText = &apos;&apos;; if (value) &#123; timeText = moment.duration(value, &apos;seconds&apos;).humanize(); &#125; else &#123; timeText = &apos;未设置&apos;; &#125; return timeText;&#125; 4、GrantTypeInput组件GrantTypeInput.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Select &#125; from &apos;antd&apos;;import &#123; authTypes &#125; from &apos;./ClientUtil&apos;;const &#123; Option &#125; = Select;class GrantTypeInput extends PureComponent &#123; state = &#123; value: [], &#125;; componentWillMount() &#123; const &#123; props &#125; = this; if (props.value) &#123; const value = props.value ? props.value.split(&apos;,&apos;) : []; this.setState(&#123; value &#125;); &#125; &#125; componentWillReceiveProps(nextProps) &#123; const &#123; props &#125; = this; if (props.value !== nextProps.value &amp;&amp; !nextProps.value) &#123; this.setState(&#123; value: [] &#125;); &#125; else &#123; const value = nextProps.value ? nextProps.value.split(&apos;,&apos;) : []; this.setState(&#123; value &#125;); &#125; &#125; handleSelectChange = value =&gt; &#123; const &#123; onChange &#125; = this.props; this.setState(&#123; value &#125;); if (onChange) onChange(value.join(&apos;,&apos;)); &#125;; render() &#123; const &#123; value &#125; = this.state; return ( &lt;Select style=&#123;&#123; width: &apos;100%&apos; &#125;&#125; mode=&quot;multiple&quot; value=&#123;value&#125; onChange=&#123;this.handleSelectChange&#125; &gt; &#123;authTypes.map((type, index) =&gt; ( &lt;Option key=&#123;index&#125; value=&#123;type.value&#125;&gt; &#123;type.name&#125; &lt;/Option&gt; ))&#125; &lt;/Select&gt; ); &#125;&#125;export default GrantTypeInput; 5、token有效期输入组件PeriodInput.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586import React, &#123; PureComponent &#125; from &apos;react&apos;;import moment from &apos;moment&apos;;import &#123; Input, Select &#125; from &apos;antd&apos;;const &#123; Option &#125; = Select;const getTime = (time, fromUnit, toUnit) =&gt; moment.duration(Number(time), fromUnit).as(toUnit);export const timeUnits = [ &#123; name: &apos;秒&apos;, value: &apos;seconds&apos; &#125;, &#123; name: &apos;分钟&apos;, value: &apos;minutes&apos; &#125;, &#123; name: &apos;小时&apos;, value: &apos;hours&apos; &#125;, &#123; name: &apos;天&apos;, value: &apos;days&apos; &#125;,];class PeriodInput extends PureComponent &#123; state = &#123; value: &apos;&apos;, unit: &apos;seconds&apos;, &#125;; componentWillMount() &#123; const &#123; props &#125; = this; if (props.value) &#123; this.setState(&#123; unit: &apos;seconds&apos;, value: props.value, &#125;); &#125; &#125; componentWillReceiveProps(nextProps) &#123; const &#123; props &#125; = this; if (props.value !== nextProps.value &amp;&amp; !nextProps.value) &#123; this.setState(&#123; unit: &apos;seconds&apos;, value: &apos;&apos;, &#125;); &#125; else &#123; this.setState(&#123; unit: &apos;seconds&apos;, value: nextProps.value, &#125;); &#125; &#125; handleSelectChange = unitValue =&gt; &#123; const &#123; unit, value &#125; = this.state; const newValue = value ? getTime(value, unit, unitValue) : &apos;&apos;; this.setState(&#123; unit: unitValue, value: newValue, &#125;); &#125;; onChangeValue = e =&gt; &#123; const &#123; value &#125; = e.target; const &#123; unit &#125; = this.state; const &#123; onChange &#125; = this.props; const seconds = getTime(value, unit, &apos;seconds&apos;); this.setState(&#123; value &#125;); if (onChange) onChange(seconds); &#125;; render() &#123; const &#123; unit, value &#125; = this.state; return ( &lt;Input value=&#123;value&#125; onChange=&#123;this.onChangeValue&#125; addonAfter=&#123; &lt;Select style=&#123;&#123; width: 80 &#125;&#125; value=&#123;unit&#125; onChange=&#123;this.handleSelectChange&#125;&gt; &#123;timeUnits.map(t =&gt; ( &lt;Option key=&#123;t.value&#125; value=&#123;t.value&#125;&gt; &#123;t.name&#125; &lt;/Option&gt; ))&#125; &lt;/Select&gt; &#125; /&gt; ); &#125;&#125;export default PeriodInput; 6、秘钥生成组件SecretInput.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Row, Col, Slider, Input &#125; from &apos;antd&apos;;import random from &apos;@/utils/random&apos;;const minValue = 10;const maxValue = 30;const defaultState = &#123; visible: false, value: &apos;&apos;, length: 10,&#125;;class SecretInput extends PureComponent &#123; state = &#123; ...defaultState &#125;; componentWillMount() &#123; const &#123; props &#125; = this; if (props.value) &#123; this.setState(&#123; value: props.value &#125;); &#125; &#125; componentWillReceiveProps(nextProps) &#123; const &#123; props &#125; = this; if (props.value !== nextProps.value &amp;&amp; !nextProps.value) &#123; this.setState(&#123; ...defaultState &#125;); &#125; else &#123; this.setState(&#123; value: nextProps.value &#125;); &#125; &#125; handleCreatePwd = () =&gt; &#123; const &#123; length &#125; = this.state; this.setState(&#123; visible: true &#125;); this.handleChangeLength(length); &#125;; handleChangeLength = length =&gt; &#123; const value = random.generate(length); this.setState(&#123; length &#125;); this.handleChangeValue(value); &#125;; handleChangeValue = value =&gt; &#123; const &#123; onChange &#125; = this.props; this.setState(&#123; value &#125;); if (onChange) onChange(value); &#125;; render() &#123; const &#123; visible, value, length &#125; = this.state; return ( &lt;div&gt; &lt;Row gutter=&#123;8&#125;&gt; &lt;Col span=&#123;20&#125;&gt; &lt;Input value=&#123;value&#125; onChange=&#123;this.handleChangeValue&#125; /&gt; &lt;/Col&gt; &lt;Col span=&#123;4&#125;&gt; &lt;a onClick=&#123;this.handleCreatePwd&#125;&gt;随机生成&lt;/a&gt; &lt;/Col&gt; &lt;/Row&gt; &#123;visible ? ( &lt;Row&gt; &lt;Col span=&#123;20&#125;&gt; &lt;Slider min=&#123;minValue&#125; max=&#123;maxValue&#125; value=&#123;length&#125; onChange=&#123;this.handleChangeLength&#125; /&gt; &lt;/Col&gt; &lt;/Row&gt; ) : null&#125; &lt;/div&gt; ); &#125;&#125;export default SecretInput; 7、短信签名：输入内容与数据库保存不一致，前端正则加减括号1234567891011121314151617181920212223242526272829303132333435363738394041424344import React, &#123; PureComponent &#125; from &apos;react&apos;;import &#123; Input &#125; from &apos;antd&apos;;const removeBrackets = value =&gt; (value ? value.replace(/[【】]/g, &apos;&apos;) : &apos;&apos;);const addBrackets = value =&gt; (value ? `【$&#123;value&#125;】` : &apos;&apos;);class SmsSignInput extends PureComponent &#123; state = &#123; value: &apos;&apos;, &#125;; componentWillMount() &#123; const &#123; props &#125; = this; if (props.value) this.setStateValue(props.value); &#125; componentWillReceiveProps(nextProps) &#123; const &#123; props &#125; = this; if (props.value !== nextProps.value &amp;&amp; !nextProps.value) &#123; this.setStateValue(&apos;&apos;); &#125; else &#123; this.setStateValue(nextProps.value); &#125; &#125; setStateValue = value =&gt; &#123; this.setState(&#123; value: removeBrackets(value) &#125;); &#125;; handleChangeValue = e =&gt; &#123; const &#123; value &#125; = e.target; const &#123; onChange &#125; = this.props; this.setState(&#123; value &#125;); if (onChange) onChange(addBrackets(value)); &#125;; render() &#123; const &#123; value &#125; = this.state; const &#123; props &#125; = this; return &lt;Input &#123;...props&#125; value=&#123;value&#125; onChange=&#123;this.handleChangeValue&#125; /&gt;; &#125;&#125;export default SmsSignInput;]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Data Jpa 使用备忘]]></title>
    <url>%2F2019%2F03%2F24%2FSpring%20Data%20Jpa%20%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98%2F</url>
    <content type="text"><![CDATA[好记性不如烂笔头,springboot+SpringDataJpa用了很久了,用到了应该记录一下。简书地址springboot+SpringDataJpa用了很久了，有些东西不用时间长了也还是会忘。好记性不如烂笔头，这话是有道理的，所以用到什么就简单记录下，还是有好处的。 1、Qquery不能使用limit关键字第一种方式：使用nativeQuery12@Query(&quot;SELECT * FROM t_misaka m WHERE m.id&gt;4 limit 0,2&quot;, nativeQuery=true) Page&lt;Misaka&gt; search(Pageable pageable); 第二种方式:使用Page实现1234Pageable pageable = new PageRequest(1, 2, Direction.ASC, &quot;name&quot;); Page&lt;Misaka&gt; misakaPage = misakaDao.search(pageable); List&lt;Misaka&gt; misakaList = misakaPage.getContent(); 查询接口12@Query(&quot;SELECT m FROM Misaka m WHERE m.id&gt;4&quot;) Page&lt;Misaka&gt; search(Pageable pageable); 注意：如果使用springboot2.x，上面的Pageable pageable = new PageRequest需要改成Pageable pageable = PageRequest.of();，里面参数一样。 2、Jpa Repository里用@Query的查询结果集自定义接受实体直接上查询代码：123456789101112@Query(&quot;SELECT d.smsDate AS smsDate , SUM(d.smsSendCount) AS smsSendCount , SUM(d.smsSendFailureCount) AS smsSendFailureCount &quot; + &quot; FROM DashboardSms d&quot; + &quot; WHERE d.smsDate between :startDate AND :endDate &quot; + &quot; GROUP BY d.smsDate &quot; + &quot; ORDER BY d.smsDate ASC &quot;)List&lt;SmsCountSum&gt; findAllBySmsDate(Date startDate, Date endDate);interface SmsCountSum &#123; Date getSmsDate(); Integer getSmsSendCount(); Integer getSmsSendFailureCount();&#125; 调用处：12345678List&lt;SlaveDashboardSmsRepository.SmsCountSum&gt; list = slaveDashboardSmsRepository.findAllBySmsDate(startDate, entDate);List&lt;DashboardXYVo&gt; smsChartData = list.stream().map(this::smsDataToVo).collect(Collectors.toList());private DashboardXYVo smsDataToVo(SlaveDashboardSmsRepository.SmsCountSum sms) &#123; DashboardXYVo vo = new DashboardXYVo(); vo.setX(DateUtil.date2str(sms.getSmsDate(), DateUtil.MONTH_DAY_FORMAT)); vo.setY(String.valueOf(sms.getSmsSendCount())); return vo;&#125; 3、使用Specification查询一个常写的例子：12345678910111213141516171819202122public static Specification&lt;DashboardAppSmsLogin&gt; build(Date startDate, Date endDate) &#123; return (root, criteriaQuery, builder) -&gt; &#123; Predicate predicate = builder.conjunction(); try &#123; if (startDate != null) &#123; Predicate graterStartTime = null; graterStartTime = builder.greaterThanOrEqualTo(root.get(&quot;smsDate&quot;), DateUtil.formateData(startDate, DateUtil.DATE_FORMAT)); predicate = builder.and(predicate, graterStartTime); &#125; if (endDate != null) &#123; Predicate lessEndTime = builder.lessThanOrEqualTo(root.get(&quot;smsDate&quot;), DateUtil.formateData(endDate, DateUtil.DATE_FORMAT)); predicate = builder.and(predicate, lessEndTime); &#125; &#125; catch (ParseException e) &#123; e.printStackTrace(); &#125; criteriaQuery.orderBy(builder.desc(root.get(&quot;appName&quot;))); return predicate; &#125;;&#125; 使用：123Date yesterday = DateUtil.pastDate(new Date, 1);Specification&lt;DashboardAppSmsLogin&gt; spec = DashboardAppSmsSpecs.build(yesterday, new Date);List&lt;DashboardAppSmsLogin&gt; appSmsLogin = slaveDashboardAppSmsLoginRepository.findAll(spec); 封装一层条件查的例子：包括equal、like、大于等于、小于等于、时间等条件。12345678910111213141516171819202122232425262728293031323334353637383940/** * 登录成功构建 * @param query * @return */public static Specification&lt;UserLoginLog&gt; loginBuild(UserLoginLogQuery query) &#123; return (root, criteriaQuery, builder) -&gt; buildPredicate(root, builder, query);&#125;/** * 登录失败构建 * @param query * @return */public static Specification&lt;UserLoginFailureLog&gt; loginFailureBuild(UserLoginLogQuery query) &#123; return (root, criteriaQuery, builder) -&gt; buildPredicate(root, builder, query);&#125;private static Predicate buildPredicate(Root root, CriteriaBuilder builder, UserLoginLogQuery query)&#123; Predicate predicate = builder.conjunction(); if (!StringUtils.isEmpty(query.getAppId())) &#123; Predicate equalMenuValue = builder.equal(root.get(&quot;appId&quot;), query.getAppId()); predicate = builder.and(predicate, equalMenuValue); &#125; if (!StringUtils.isEmpty(query.getMobile())) &#123; String likeMobile = &quot;%&quot; + query.getMobile() + &quot;%&quot;; Predicate equalMenuValue = builder.like(root.get(&quot;mobile&quot;), likeMobile); predicate = builder.and(predicate, equalMenuValue); &#125; if (query.getStartLoginTime() != null) &#123; Predicate graterStartTime = builder.greaterThanOrEqualTo(root.get(&quot;loginTime&quot;), query.getStartLoginTime()); predicate = builder.and(predicate, graterStartTime); &#125; if (query.getEndLoginTime() != null) &#123; Predicate lessEndTime = builder.lessThanOrEqualTo(root.get(&quot;loginTime&quot;), query.getEndLoginTime()); predicate = builder.and(predicate, lessEndTime); &#125; return predicate;&#125; 调用就一样了。 4、用@Modifying进行更新操作123@Modifying@Query(&quot;update YhTask t set t.deleteFlag = &apos;1&apos; where t.taskId = :taskId&quot;)int logicDeleteTask(@Param(&quot;taskId&quot;) String taskId); 5、JPA的Query里进行条件为空容错，时间格式化1234567891011@Query(&quot;select u from YhUser u &quot; + &quot;where u.deleteFlag = &apos;0&apos; and u.leaderFlag = &apos;0&apos; &quot; + &quot;and u.fullName like concat(&apos;%&apos;,:createUserName,&apos;%&apos;) &quot; + &quot;and (:platformId is null or :platformId is not null and u.platformId = :platformId) &quot; + &quot;and (:areaId is null or :areaId is not null and u.areaId = :areaId) &quot; + &quot; and DATE_FORMAT(s.firstLoginTime,&apos;%Y-%m-%d&apos;)&gt;=str_to_date(:startTime,&apos;%Y-%m-%d&apos;) &quot; + &quot; and DATE_FORMAT(s.firstLoginTime,&apos;%Y-%m-%d&apos;)&lt;=str_to_date(:endTime,&apos;%Y-%m-%d&apos;)&quot; + &quot;and u.haierUserId not in (&quot; + &quot;select t.createUserId from YhTask t where t.deleteFlag = &apos;0&apos; &quot; + &quot;and t.createTime between :startTime and :endTime)&quot;) List&lt;YhUser&gt; findUnsubmitedUserByTime(@Param(&quot;createUserName&quot;) String createUserName, @Param(&quot;platformId&quot;) String platformId, @Param(&quot;areaId&quot;) String areaId, @Param(&quot;startTime&quot;) Date startTime, @Param(&quot;endTime&quot;) Date endTime); 6、多表级联的情况，条件查询示例比如，部门实体：12345678910111213141516171819@Data@Entity@Table(name = &quot;t_user&quot;)public class User implements Serializable &#123; private static final long serialVersionUID = 3046056270962780761L; /** * 用户id */ @Id @GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;) @GeneratedValue(generator = &quot;idGenerator&quot;) private String userId; @ManyToOne @JoinColumn(name = &quot;dept_id&quot;) @NotFound(action = NotFoundAction.IGNORE) private Department department; 部门实体：123456789101112131415161718192021222324252627@Data@Entity@Table(name = &quot;t_department&quot;)public class Department implements Serializable &#123; private static final long serialVersionUID = 5415593855586815943L; @Id @GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;) @GeneratedValue(generator = &quot;idGenerator&quot;) @Column(name = &quot;dept_id&quot;) private String deptId; /** * 部门们称 */ private String deptName; /** * 部门代码 */ private String deptCode; /** * 父节点 */ private String parentId; 根据多个部门id查询用户列表12List&lt;String&gt; allDeptIds = findDeptIds(deptId);Page&lt;HaierUser&gt; users = haierUserRepository.findByDepartment_DeptIdIn(allDeptIds, pageable); findByDepartment_DeptIdIn方法呢？12345678/** * 通过部门ID查询用户 * * @param deptIds * @param pageable * @return */ Page&lt;HaierUser&gt; findByDepartment_DeptIdIn(List&lt;String&gt; deptIds, Pageable pageable); 中间一个下划线链接，就是这么简单。 7、创建时间和更新时间自动处理12345678910111213141516171819@Entity @Table(name=&quot;t_login_log&quot;) @Datapublic class LoginLog &#123; @Id @GenericGenerator(name=&quot;UUIDGENERATE&quot;,strategy=&quot;uuid2&quot;) @GeneratedValue(generator=&quot;UUIDGENERATE&quot;) @Column(name=&quot;id&quot;,length=36) private String id; @Column(name=&quot;create_time, updatable = false) @Temporal(TemporalType.TIMESTAMP) @org.hibernate.annotations.CreationTimestamp private Date createTime; @Column(name=&quot;update_time&quot;) @Temporal(TemporalType.TIMESTAMP) @org.hibernate.annotations.UpdateTimestamp private Date updateTime; 8、实体上常用的一些注解时间格式化123@JsonFormat(pattern = DateUtil.TIME_FORMAT, timezone = &quot;GMT+8&quot;)@Column(updatable = false)private Date createTime; 在json结构中忽略12345/** * 删除标志，1：删除，0：未删除 */@JsonIgnoreprivate Boolean deleteFlag = false; 插入/更新时自动赋值123456789 @PrePersist public void PrePersist() &#123; this.createTime = new Date(); &#125;@PreUpdate public void PreUpdate() &#123; this.updateTime = new Date(); &#125; @Temporal(TemporalType.DATE)在页面端取值：2016–09–28@Temporal(TemporalType.TIME)在页面端取值：15:50:30@Temporal(TemporalType.TIMESTAMP)在页面端取值：2016-09-28 15:52:32:000 9、自定义Repository实现查询12345678910111213141516171819202122232425262728293031323334353637import org.springframework.stereotype.Repository;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.Query;import java.util.List;/** * 推送类型统计 */@Repositorypublic class MessageStatisticRepository &#123; @PersistenceContext private EntityManager entityManager; /** * 统计每个推送类型的推送消息数量 * @param userId * @param search * @return */ public List&lt;Object[]&gt; findMessageTypeCont(String userId, String search)&#123; String sql = &quot;SELECT t.id,t.title,t.icon,p.num FROM t_message_type AS t INNER JOIN &quot; + &quot;(&quot; + &quot;SELECT type,COUNT(*) AS num FROM t_message_push &quot; + &quot;WHERE (title LIKE :search OR content LIKE :search) AND state &lt;&gt; 3 AND receive_user_id=:userId &quot; + &quot;GROUP BY type&quot; + &quot;) AS p &quot; + &quot; on t.id = p.type WHERE t.delete_flag=0 ORDER BY t.order ASC&quot;; Query query = entityManager.createNativeQuery(sql); query.setParameter(&quot;search&quot;, &apos;%&apos; +search + &apos;%&apos;); query.setParameter(&quot;userId&quot;, userId); return query.getResultList(); &#125;&#125; 获取到的结果是List的Object数组，里面的值需要解析Object获取。 1234567891011public static MessageTypeVo toMessageTypeVo(Object[] data)&#123; MessageTypeVo messageType = new MessageTypeVo(); messageType.setId((String) data[0]); messageType.setTitle((String) data[1]); messageType.setIcon((String) data[2]); messageType.setCount((BigInteger) data[3]); return messageType;&#125;List&lt;Object[]&gt; rows = messageStatisticRepository.findMessageTypeCont(userId, keywords);List&lt;MessageTypeVo&gt; messageTypes = rows.stream().map(MessageTypeVo::toMessageTypeVo).collect(Collectors.toList()); 上面的查询如果不返回Object，也可以设置返回成map，只需要在查询前设置ResultTransformer即可:12query.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);List&lt;Map&lt;String, Object&gt;&gt; resultLit = query.getResultList(); 10、多表级联查询自定义返回结果首先定义一个结果集的接口类，12345678public interface HotelSummary &#123; City getCity(); String getName(); Double getAverageRating(); default Integer getAverageRatingRounded() &#123; return getAverageRating() == null ? null : (int) Math.round(getAverageRating()); &#125;&#125; 查询的方法返回类型设置为新创建的接口1234567@Query(&quot;select h.city as city, h.name as name, avg(r.rating) as averageRating &quot; - &quot;from Hotel h left outer join h.reviews r where h.city = ?1 group by h&quot;)Page&lt;HotelSummary&gt; findByCity(City city, Pageable pageable);@Query(&quot;select h.name as name, avg(r.rating) as averageRating &quot; - &quot;from Hotel h left outer join h.reviews r group by h&quot;)Page&lt;HotelSummary&gt; findByCity(Pageable pageable); 使用1234Page&lt;HotelSummary&gt; hotels = this.hotelRepository.findByCity(new PageRequest(0, 10, Direction.ASC, &quot;name&quot;));for(HotelSummary summay:hotels) &#123; System.out.println(&quot;Name&quot; +summay.getName());&#125; 碰到的错误版本问题1、问题和现状配置一个Hibernate的OneToMany的映射，想要达到级联保存和级联查询，查主体时将对应的many的列表页查出来，但是在如下的配置后，主表：1234567891011121314@Data@Entity@Table(name = &quot;t_patient&quot;)public class Patient &#123; @Id @GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;) @GeneratedValue(generator = &quot;idGenerator&quot;) @Column(name = &quot;patient_id&quot;, length = 40) private String patientId; @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER) @JoinColumn(name = &quot;patient_id&quot;) private List&lt;PatientAllergicHistory&gt; patientAllergicHistory = new LinkedList&lt;&gt;();&#125; 子表：1234567891011121314@Data@Entity@Table(name = &quot;t_patient_allergic_history&quot;)public class PatientAllergicHistory &#123; @Id @GenericGenerator(name = &quot;idGenerator&quot;, strategy = &quot;uuid&quot;) @GeneratedValue(generator = &quot;idGenerator&quot;) @Column(name = &quot;id&quot;) private Long id; /** 患者id */ @Column(name = &quot;patient_id&quot;) private String patientId;&#125; 查询时抛出异常1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: failed to lazily initialize a collection of role: com.hczt.xhminiapp.db.entity.Patient.patientContacts, could not initialize proxy - no Session; nested exception is com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: com.hczt.xhminiapp.db.entity.Patient.patientContacts, could not initialize proxy - no Session (through reference chain: com.hczt.xhminiapp.common.bean.RtnResult[&quot;data&quot;]-&gt;com.hczt.xhminiapp.db.entity.Patient[&quot;patientContacts&quot;]) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:296) at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:103) at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:290) at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:180) at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:119) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:834) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)Caused by: com.fasterxml.jackson.databind.JsonMappingException: failed to lazily initialize a collection of role: com.hczt.xhminiapp.db.entity.Patient.patientContacts, could not initialize proxy - no Session (through reference chain: com.hczt.xhminiapp.common.bean.RtnResult[&quot;data&quot;]-&gt;com.hczt.xhminiapp.db.entity.Patient[&quot;patientContacts&quot;]) at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:394) at com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:353) at com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(StdSerializer.java:316) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:727) at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:155) at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480) at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319) at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1396) at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:913) at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:287) ... 47 common frames omittedCaused by: org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role: com.hczt.xhminiapp.db.entity.Patient.patientContacts, could not initialize proxy - no Session at org.hibernate.collection.internal.AbstractPersistentCollection.throwLazyInitializationException(AbstractPersistentCollection.java:597) at org.hibernate.collection.internal.AbstractPersistentCollection.withTemporarySessionIfNeeded(AbstractPersistentCollection.java:216) at org.hibernate.collection.internal.AbstractPersistentCollection.readSize(AbstractPersistentCollection.java:160) at org.hibernate.collection.internal.PersistentBag.size(PersistentBag.java:287) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:97) at com.fasterxml.jackson.databind.ser.std.CollectionSerializer.serialize(CollectionSerializer.java:25) at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727) at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:719) ... 56 common frames omitted 2、原因和解决该异常在https://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags上找到了答案（staticOverFlow还是很强大的）。 I think a newer version of hibernate (supporting JPA 2.0) should handle this. But otherwise you can work it around by annotating the collection fields with: @LazyCollection(LazyCollectionOption.FALSE),Remember to remove the fetchType attribute from the @*ToMany annotation.1234@OneToMany(cascade = CascadeType.ALL)@LazyCollection(LazyCollectionOption.FALSE)@JoinColumn(name = &quot;patient_id&quot;)private List&lt;PatientAllergicHistory&gt; patientAllergicHistory = new LinkedList&lt;&gt;(); 正常的控制台日志应该是这样的，主查询完了以后，开启子查询1234510:26:29.920 [http-nio-8085-exec-10] INFO p6spy - 10:26:29|1|SELECT 1 FROM DUAL10:26:29.932 [http-nio-8085-exec-10] INFO p6spy - 10:26:29|4|select patient0_.patient_id as patient_1_3_0_, patient0_.create_time as create_t2_3_0_, patient0_.deleted as deleted3_3_0_, patient0_.first_diagnose_date as first_di4_3_0_, patient0_.first_injection_date as first_in5_3_0_, patient0_.gender as gender6_3_0_, patient0_.height as height7_3_0_, patient0_.mobile as mobile8_3_0_, patient0_.name as name9_3_0_, patient0_.nick_name as nick_na10_3_0_, patient0_.openid as openid11_3_0_, patient0_.passive_smoking as passive15_3_0_, patient0_.self_smoking as self_sm12_3_0_, patient0_.unionid as unionid13_3_0_, patient0_.weight as weight14_3_0_, sysdict1_.id as id1_6_1_, sysdict1_.code as code2_6_1_, sysdict1_.create_time as create_t3_6_1_, sysdict1_.deleted as deleted4_6_1_, sysdict1_.group_code as group_co5_6_1_, sysdict1_.name as name6_6_1_, sysdict1_.parent_id as parent_i7_6_1_, sysdict1_.sort as sort8_6_1_, sysdict1_.type as type9_6_1_, sysdict1_.update_time as update_10_6_1_ from t_patient patient0_ left outer join t_sys_dict sysdict1_ on patient0_.passive_smoking=sysdict1_.id where patient0_.patient_id=&apos;111&apos;10:26:29.940 [http-nio-8085-exec-10] INFO p6spy - 10:26:29|2|select patientcon0_.patient_id as patient_6_5_0_, patientcon0_.id as id1_5_0_, patientcon0_.id as id1_5_1_, patientcon0_.address as address2_5_1_, patientcon0_.gender as gender3_5_1_, patientcon0_.mobile as mobile4_5_1_, patientcon0_.name as name5_5_1_, patientcon0_.patient_id as patient_6_5_1_, patientcon0_.relation as relation7_5_1_, sysdict1_.id as id1_6_2_, sysdict1_.code as code2_6_2_, sysdict1_.create_time as create_t3_6_2_, sysdict1_.deleted as deleted4_6_2_, sysdict1_.group_code as group_co5_6_2_, sysdict1_.name as name6_6_2_, sysdict1_.parent_id as parent_i7_6_2_, sysdict1_.sort as sort8_6_2_, sysdict1_.type as type9_6_2_, sysdict1_.update_time as update_10_6_2_ from t_patient_contacts patientcon0_ left outer join t_sys_dict sysdict1_ on patientcon0_.relation=sysdict1_.id where patientcon0_.patient_id=&apos;111&apos;10:26:29.945 [http-nio-8085-exec-10] INFO p6spy - 10:26:29|1|select patientall0_.patient_id as patient_5_4_0_, patientall0_.id as id1_4_0_, patientall0_.id as id1_4_1_, patientall0_.gmxby as gmxby2_4_1_, patientall0_.gmxpy as gmxpy3_4_1_, patientall0_.main as main4_4_1_, patientall0_.patient_id as patient_5_4_1_, patientall0_.swgm as swgm6_4_1_, patientall0_.ybgmz as ybgmz7_4_1_, patientall0_.zqgxc as zqgxc8_4_1_ from t_patient_allergic_history patientall0_ where patientall0_.patient_id=&apos;111&apos;10:26:29.947 [http-nio-8085-exec-10] INFO p6spy - 10:26:29|0| 推荐阅读Security源码分析)]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转--BizCharts使用采坑教程]]></title>
    <url>%2F2019%2F03%2F19%2F%E8%BD%AC--BizCharts%E4%BD%BF%E7%94%A8%E9%87%87%E5%9D%91%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近项目的管理后台都在用阿里粑粑开源的管理框架Ant Design Pro，说真话，还是比较好用的。该框架内部也封装了一些图标插件，但是在最近的一个项目中发现，这些图标可定制性还是差了点，不能满足客户需求。 简书地址 最近项目的管理后台都在用阿里粑粑开源的管理框架Ant Design Pro，说真话，还是比较好用的。该框架内部也封装了一些图标插件，但是在最近的一个项目中发现，这些图标可定制性还是差了点，不能满足客户需求。 好在它的后面也介绍了自己亲生的BizChart可视化图表组件，因为定制性比较高，但是api中的介绍又不是每个都有例子，更没有组合使用的例子，经过度娘介绍，发现这片文章备受我青睐，我怕作者哪天不高兴放弃了，所以转存了一份，顺便把自己实践到的补充到后面。 原文作为一个前端打字员，除了绿茶婊之外，最讨厌的就是图表：一个让我伤心，一个让我难过；比这更讨厌的就是文档写得不清不楚的图表库（大概率是九年义务教育期间没有学好语文），让我又爱又恨！所以本篇博文会比较枯燥，只简单描述一下使用BizCharts的过程，当然，重要的是总结遇到的坑（遵从一个坑不踩两次，一个女生不泡两次原则）。 By the way，提到BizCharts，让我们感谢一下阿里巴巴：其开源了这个好用的（虽然偶尔不那么好用，还偶得挺经常的）的react图表库供大家使用，对使用react技术栈的前端打字员来说简直就是福音。本文不会有过多的api解释，具体的接口可以看官网文档鬼门关。 正经篇幅刚开始，视觉设计师哄我说：“我的要求并不高，待我从前一样好”，啊呸，说错了，“我的要求是：只要能把数据用直方图展现出来就好了”，so easy // 引入相关的组件 import { Chart, Axis, Tooltip, Geom } from ‘bizcharts’; // 随便mock一下数据 const str = [&apos;we&apos;, &apos;are&apos;, &apos;the&apos;, &apos;black&apos;, &apos;gold&apos;, &apos;team&apos;]; const mockData = () =&gt; { let result = []; for (let i = 0, len = 6; i &lt; len; i++) { result.push({ xAxis: ticks[i], yAxis: Math.floor(Math.random() * 100) }); } return result; }; // 图表组件 &lt;Chart width={ 600 } height={ 400 } data={ mockData() } &gt; {/* x轴，横轴，以data数据的xAxis属性值为柱子的值 */} &lt;Axis name=&quot;xAxis&quot; /&gt; {/* y轴，纵轴，以data数据的yAxis属性值为柱子的值 */} &lt;Axis name=&quot;yAxis&quot; /&gt; {/* 鼠标hover直方图柱子的时候，tooltip显示的值 */} &lt;Tooltip /&gt; {/* 几何标记对象，主要用以描述你要画的是什么图形（直方图、折线图、饼状图、区域图）：interval是直方图 */} &lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; /&gt; &lt;/Chart&gt; 一波操作猛如狗，让视觉设计师看看效果： note：此直方图每一根柱子都是单点的，也就是其反映了某个横坐标点的数据情况。加入我们需要一个连续区间柱子，那么作为xAxis的数据字段值应该为一个数组，包含两个元素，表明区间的起始值。123456789101112const mockData = () =&gt; &#123; let result = []; for (let i = 0, len = 6; i &lt; len; i++) &#123; result.push(&#123; xAxis: [i + 0.01, i + 1 - 0.01], // 如果不加减0.01，那么第一根柱子的终点跟第二根柱子的起点是同一个，会感觉两个柱子粘在一起 yAxis: Math.floor(Math.random() * 100) &#125;); &#125; return result; &#125;; 视觉设计师：“emmmmmm，图表长宽定死了会不会有点僵硬啊，高度可以写死，宽度总得来个自适应吧？” “毛闷台”123456&lt;Chart height=&#123; 400 &#125; data=&#123; mockData() &#125; forceFit // 我妈说了（guanfang wendang shuode），加上这个属性就可以使图表宽度自适应了，隔壁echart同学要学习一下 &gt;&lt;/Chart&gt; 效果秀一波 视觉（蜜汁微笑）：“猿子，你这玩意有bug啊” “胡说，你这傻*不会用吧” （理直气壮）“哼哼，放大窗口图表宽度确实会自适应，但是缩小就挂掉了（并不自适应），ahhhhhh” （谄媚）“讨厌，再给我两分钟~~让我把bug结成冰。。。” note: 实验表明，如果Chart组件的父组件Father采用flex布局，即Father使用flex自适应宽度，那么就会出现上述的问题；所以，如果有多个图表同行并列布局，请不要使用flex布局，给Father组件的宽度设置为百分比吧，此时的forceFit就会起作用了。同时，BizCharts对重绘设置了防抖，只有当停止缩放的时候才会重绘。 （屌到飞起）“over，拿去用吧” （一脸鄙视）“哇喔~好棒棒呀，敢不敢让我调一点点小细节，我保证就一点点！” “Come on baby！” “ 鼠标hover柱子的时候，为什么柱子后面有个很丑的方框，换个颜色吧！ 鼠标hover柱子的时候，出现的tooltip样式丑爆了，待会我给你设计一个吧 鼠标hover柱子的时候，柱子的颜色应该有所改变，对用户比较友好！！！ …哎，你别拿刀啊~~~ ” 把视觉杀了之后，需求还是要做的，先解决死者的第一个遗愿。 Tooltip组件提供了一个属性crosshairs，用以设置tooltip的辅助线和辅助框；默认情况下，此属性会为’line’、‘area’、‘path’、‘areaStack’类型的Geom组件开启垂直辅助线、为‘interval’类型的Geom组件展示矩形背景框。死者说的很丑的方框就是这个！ 1&lt;Tooltip crosshairs=&#123; false &#125;/&gt; 好的，把框去掉了！咦，我们不是说要修改它的颜色吗？好的，改一下 1234567891011&lt;Tooltip crosshairs=&#123;&#123; type: &quot;rect&quot; // 可选值：rect、x、y、cross，分别对应辅助狂、平行x轴辅助线、平行y轴辅助线，十字辅助线 style: &#123; fill: &apos;red&apos;, // 辅助框颜色 shadowColor: &apos;red&apos;, // 辅助框周边阴影的颜色 shadowBlur: 1, // 辅助框周边阴影的透明度 opacity: 0 // 辅助框的透明度 &#125; &#125;&#125; /&gt; note：假如开启的是辅助线，即type不是“rect”，那么上述的样式定义将不起作用。究其原因，看了此组件的源码之后才发现，描述辅助线样式的属性不是style对象，而是lineStyle对象，官方文档并未说明这一点。 1234567891011&lt;Tooltip crosshairs=&#123;&#123; type: &quot;y&quot; lineStyle: &#123; stroke: &apos;red&apos;, // 辅助线颜色 lineWidth: 4, // 辅助线宽度，单位为px opacity: 1 // 辅助线透明度 &#125; &#125;&#125; /&gt;复制代码 看起来还是很容易就实现了死者的第一个遗愿，就这样怼死了视觉，是不是太残忍了点？事已至此，继续实现他的遗愿吧。 第二个遗愿是给tooltip换个样式。既然要修改tooltip的样式，就应该继续对Tooltip组件下手。通过阅读文档，发现其还有一个itemTpl的属性，也就是可以通过这个属性定义tooltip的模板 12345678910111213141516171819202122232425262728293031// 定义一个模板 // name-value是相关柱子的key-value值 const tooltipsDisplayTpl = ` &lt;p class=&quot;chart-tooptip&quot;&gt; &lt;span class=&quot;chart-tooptip-right&quot;&gt;&#123;name&#125;&lt;/span&gt; &lt;span&gt;&#123;value&#125;&lt;/span&gt; &lt;/p&gt; `; /* // 重写tooltip元素的样式 // 因为视觉已死，样式是随便搞的，就弄点黑色背景当默哀一下吧 .g2-tooltip &#123; background-color: rgba(44, 49, 68, 0.80) !important; &#125; .chart-tooptip &#123; margin: 0; color: white; &#125; .chart-tooptip-right &#123; margin-right: 12px; &#125; */ &lt;Tooltip crosshairs=&#123; false &#125; itemTpl=&#123; tooltipsDisplayTpl &#125; showTitle=&#123; false &#125; // 去头（标题，即横轴对应的刻度），往往影响我颜值的不是我的身材，而是我的脸，所以不要脸了 /&gt; note：如果想自定义tooltip展示的内容，还需要设置Geom组件的tooltip属性，即将数据映射到Tooltip对象上；所以此属性值如果为false的话，就不会向Tooltip组件传递任何数据（此时Tooltip只会显示title）；还可设置为字符串，展示字符串对应的数据字段；But, it’s not the point，重点在于可自定义 12345678910111213// 定义数据返回的格式，name属性对应的是itemTpl里面的同名变量 const getTooltipData = (xAxis, yAxis) =&gt; &#123; return &#123; name: xAxis, value: yAxis &#125;; &#125; &lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; tooltip=&#123;[&quot;xAxis*yAxis&quot;, getTooltipData]&#125; /&gt; 第二个遗愿也实现了，愧疚感也多了一点！最主要是写代码的时候老是觉得后面有人站着盯着我看。 说不定实现所有遗愿就不会有这种感觉了呢，那就继续第三个遗愿吧：“改变鼠标hover柱子时候柱子的颜色”，翻遍了整个文档，发现没有关于hover的接口啊！看来视觉是要死不瞑目了，阿门。 就在我感觉到后背越发的凉飕飕的时候，我发现Geom组件有一个属性active 文档就真的描述了那么两句话，也没例子。急病乱投医的我只能尝试一波，设置为true，得了，hover柱子的时候柱子颜色改变了！！！ 123456&lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; tooltip=&#123;[&quot;xAxis*yAxis&quot;, getTooltipData]&#125; active=&#123; true &#125; /&gt; 那如果需要自定义鼠标hover柱子的样式呢？对照着Geom文档的select属性，又尝试了一遍 1234567891011121314151617&lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; tooltip=&#123;[&quot;xAxis*yAxis&quot;, getTooltipData]&#125; style=&#123;&#123; cursor: &apos;pointer&apos; &#125;&#125; // 鼠标hover上去的时候，显示小手手，免费送的 active=&#123;[ true, &#123; style: &#123; fill: &apos;black&apos;, // 柱子颜色，继续默哀 shadowColor: &apos;red&apos;, // 整体阴影颜色，包括边缘 shadowBlur: 1, // 阴影的透明度 opacity: 0 // 柱子颜色透明度 &#125; &#125; ]&#125; /&gt; （神气的）“狗子，别死了，老子搞定啦” “靠，我都装死两天了，你敢不敢再慢一点” “那官方文档就写了一行字：只可意会不可言传！我天分有限，意会了比较久” “嘚瑟，看，又出bug了吧！你的表子一闪一闪的” （掐着他脖子使劲晃）“那TM不是bug！！！” 不过话说回来，当数据更新时，从旧数据切换到新数据，会很突兀，没有缓冲过程，看着特别不舒服。我寻思着，在数据更新的时候，加个动画呗！但是初始动画生效了，更新动画就不生效了（如看官们知道解决办法，请不吝赐教）。由于赶着下班，我决定使用DataSet：一个用于管理表格数据的神器，据说更新数据的时候，其会给我弄个动画（除此以外有方便地导入非 json 数据等等功能，下文有一些例子，具体细节我没有详细去研究，以后学习了再分享）。唔好理，总之好犀利！ 123456789101112131415161718// 安装 // npm install @antv/data-set // 引入 import DataSet from &apos;@antv/data-set&apos;; // 生成一个View实例，作为类的属性，故不要在render方法里面生成这个实例 dv = new DataSet().createView(); render() &#123; this.dv.source(data); &lt;Chart height=&#123; 400 &#125; data=&#123; this.dv &#125; forceFit &gt;&lt;/Chart&gt; &#125; “猿子，6啊！吃宵夜吗？我的” “虽然不怎么饿，但是你请就不一样了，go” 吃了一桶泡面后…… “猿子，你看，宵夜也吃了·······” “你又想干嘛···············” 简直就是饱饭思淫欲啊！！！ ”我只是觉得柱子的颜色可以渐变会显得我们公司的产品更屌一点“ ”狗子，你扛揍不？“ （可怜兮兮）”揍完之后可以加个渐变吗……“ ”……“ ”我就知道你对我最好了，我给你捶背捏大腿吧~“ ”滚一边去“ 123456&lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; tooltip=&#123;[&quot;xAxis*yAxis&quot;, getTooltipData]&#125; color=&#123;[&apos;xAxis&apos;, &apos;#3DA4FF-#FFFFFF&apos;]&#125; /&gt; （掐着我脖子使劲晃）”老子要的是从上往下渐变，不是从左往右渐变“ “别…..别…..掐…..我….改….改…..” 123456&lt;Geom type=&quot;interval&quot; position=&quot;xAxis*yAxis&quot; tooltip=&#123;[&quot;xAxis*yAxis&quot;, getTooltipData]&#125; color=&#123;[&apos;xAxis&apos;, &apos;l(90) 0:#3DA4FF 1:#FFFFFF&apos;]&#125; /&gt; note：l是指线性渐变，90是指旋转九十度（即从上到下渐变，看官们可以多试试几个姿势，啊呸，多试试几个角度） 0和1标定的色值标明初始色值和终止色值，注意一点，色值不可以使用颜色名字，如“red”、“blue”等 可添加多个渐变色值，如 1color=&quot;l(90) 0:#000000 0.5:#FFFFFF 1:#000000&quot; note：如果是area类型的Geom，那么第一种渐变方式是不起作用的，只能选用第二种 “狗子，我真要下班了” “那个，你看都搞着渐变了，要不搞一波颜色分类” ”没得谈，goodbye！“ ”宵夜我的“ ”顶你个肺，又想用泡面忽悠我！！！“ ”撸串，骗你我是狗“ ”emmmmmm…..“ 既然提到颜色分类，我们就接着提一下dv.transform 吧, dv.transform内置了一些基础的函数：filter，map，pick，rename，reverse …… 具体可自行查看文档 只需要添加 groupBy 字段，并且在传入的原始数据data中添加对应的字段classify即可轻松搞定。 123dv.transform(&#123; groupBy: [&apos;classify&apos;], // 以classify字段进行分组 &#125;); ”猿子，颜色还是要自定义的哦“ （白眼） 12345678&lt;Geom position=&#123;&apos;xAxis*yAxis&apos;&#125; color=&#123;[&apos;classify&apos;, classify =&gt; &#123; // 这里根据不同字段返回不同颜色 return classify === &apos;test&apos; ? &apos;red&apos; : &apos;yellow&apos;; &#125;]&#125; style=&#123;&#123; cursor: &apos;pointer&apos; &#125;&#125; /&gt; 作为一个有责任的前端打字员，有一点即使设计不要求的，我还是需要说明的，横轴的刻度值是可以自定义的 123456789101112&lt;Axis name=&#123;xAxis&#125; label=&#123;&#123; textStyle: &#123; fill: &apos;red&apos;, // 颜色 textBaseline: &apos;top&apos; // 对齐基线 &#125;, formatter: (val) =&gt; &#123; return `$&#123; val &#125;\n换行了` &#125; &#125;&#125; /&gt; ”狗子，撸串去！！！“ ”要不还是吃个泡面？？？？“ 狗子，卒！ 以下内容来自自己的总结 很显然，本人没有博主这枚猿有文化底蕴，辞藻上既不华丽丽，也没有故事性，纯属就是论事，记笔记的形式。 1. 柱状图/点图上显示文字及格式化内容该需求需要用到Label组件，她是Geon的子组件，上代码1234567891011121314151617181920212223242526272829303132333435&lt;div&gt; &lt;Chart height=&#123;400&#125; data=&#123;dv&#125; forceFit&gt; &lt;Axis name=&quot;月份&quot; /&gt; &lt;Axis name=&quot;月均降雨量&quot; /&gt; &lt;Legend /&gt; &lt;Tooltip crosshairs=&#123;&#123; type: &quot;y&quot; &#125;&#125; /&gt; &lt;Geom type=&quot;interval&quot; position=&quot;月份*月均降雨量&quot; color=&#123;&quot;name&quot;&#125; adjust=&#123;[ &#123; type: &quot;dodge&quot;, marginRatio: 1 / 32 &#125; ]&#125; &gt; &lt;Label content=&#123;[&apos;月份*月均降雨量&apos;, (月份, 月均降雨量) =&gt; (`$&#123;月均降雨量&#125;`)]&#125; textStyle=&#123;&#123; textAlign: &apos;center&apos;, // 文本对齐方向，可取值为： start middle end fill: &apos;#404040&apos;, // 文本的颜色 fontSize: &apos;14&apos;, // 文本大小 fontWeight: &apos;normal&apos;, // 文本粗细 rotate: 0, // 文字旋转 textBaseline: &apos;top&apos;, // 文本基准线，可取 top middle bottom，默认为middle &#125;&#125; /&gt; &lt;/Geom&gt; &lt;/Chart&gt;&lt;/div&gt; 效果： 原文地址：数据可视化，BizCharts图表库入坑历程]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
        <tag>BizCharts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro学习之使用upload组件并用form表单提交]]></title>
    <url>%2F2019%2F03%2F14%2FAnt%20Design%20Pro%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BD%BF%E7%94%A8upload%E7%BB%84%E4%BB%B6%E5%B9%B6%E7%94%A8form%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[阿里粑粑开源的管理框架Ant Design Pro使用记录之表单提交。简书地址 效果 实现思路和代码利用upload提供的beforeUpload属性，先将文件放到state里，随后和form表单一起提交。先上干货，再解释一些走过的弯弯绕 接口代码接受实体类1234567891011121314151617181920212223242526272829import lombok.Data;import org.springframework.web.multipart.MultipartFile;import javax.persistence.Transient;import java.util.Date;/** * @author 红创-马海强 * @date 2019-02-20 14:06 * @description 战略报告 */@Datapublic class StrategyReportVo &#123; private String id; private String title; private Date showTime; private String periods; private String fileUrl; private int deleteFlag = 0; private Date createTime; @Transient private int readCount; private MultipartFile[] files; private MultipartFile file; &#125; API接口123456@PostMapping(&quot;/reports&quot;) public RtnResult update(StrategyReportVo vo) &#123; StrategyReport report = new StrategyReport(); BeanUtils.copyProperties(vo, report); return RtnResult.success(strategyReportAdminService.update(report)); &#125; 注意：接口使用form形式提交，因此在vo前面不能使用@RequestBody注解 前端为了方便先将fetch请求写在form页面里，规范的话应该写在model里。import React, &#123;PureComponent&#125; from &apos;react&apos;;import &#123;Modal, Form, Input, Spin, DatePicker, Button, Icon, Upload&#125; from &apos;antd&apos;;import _ from &apos;lodash&apos;;import FileUpload from &apos;../Common/FileUpload&apos;;import &#123;uploadUrl&#125; from &apos;../../services/api-base&apos;;import moment from &quot;moment&quot;;import &#123;prefix&#125; from &apos;../../services/api&apos;;const &#123;Item: FormItem&#125; = Form;@Form.create()export default class StrategyReportForm extends PureComponent &#123; state = &#123; fileData: [], &#125; /** 文件上传属性 **/ uploadProps = &#123; accept: &apos;.pdf&apos;, action: uploadUrl, name: &apos;files&apos;, onUpload: (fileList) =&gt; &#123; this.props.onChangeFile(fileList); &#125;, onSuccess: (response) =&gt; &#123; const &#123;name, url&#125; = response[0]; const file = &#123; uid: -1, name: name, status: &apos;done&apos;, url: url &#125;; this.props.form.setFieldsValue(&#123;fileUrl: url&#125;); this.props.onChangeFile([file]); &#125;, onRemove: () =&gt; &#123; this.props.onChangeFile([]); &#125; &#125;//这个是监听文件变化的fileChange=(params)=&gt;&#123; const &#123;file,fileList&#125;=params; if(file.status===&apos;uploading&apos;)&#123; setTimeout(()=&gt;&#123; this.setState(&#123; percent:fileList.percent &#125;) &#125;,1000) &#125;&#125;// 拦截文件上传beforeUploadHandle=(file)=&gt;&#123; this.setState((&#123;fileData&#125;)=&gt;(&#123; fileData:[...fileData,file], &#125;)) return false;&#125;// 文件列表的删除fileRemove=(file)=&gt;&#123; this.setState((&#123;fileData&#125;)=&gt;&#123; const index = fileData.indexOf(file); return &#123; fileData: fileData.filter((_, i) =&gt; i !== index) &#125; &#125;)&#125; render() &#123; const &#123;modalVisible, formLoading, confirmLoading, data, onSave, onCancel, form, fileList&#125; = this.props; const &#123;getFieldDecorator&#125; = this.props.form; const title = data.id ? &apos;编辑报告&apos; : &apos;添加报告&apos;; const formItemLayout = &#123; labelCol: &#123;span: 5&#125;, wrapperCol: &#123;span: 15&#125;, &#125;; const files = this.state.fileData; return ( &lt;Modal title=&#123;title&#125; visible=&#123;modalVisible&#125; confirmLoading=&#123;confirmLoading&#125; onOk=&#123;() =&gt; &#123; form.validateFields((err, values) =&gt; &#123; if (!err) &#123; let formData = new FormData(); formData.append(&quot;file&quot;, files[0]); for(let i = 0 ;i&lt;files.length;i++)&#123; //dataParament.files.fileList[i].originFileObj 这个对象是我观察 antd的Upload组件发现的里面的originFileObj 对象就是file对象 formData.append(&apos;files&apos;,files[i]) &#125; //file以外的对象拼接 for(let item in values.length) &#123; if(item !== &apos;files&apos; &amp;&amp; values[item]) &#123; formData.append(item, values[item]); &#125; &#125; fetch(`$&#123;prefix&#125;/questionnaire/admin/strategy/reports`, &#123; method: &apos;POST&apos;, body: formData, headers: &#123; &apos;Authorization&apos;: `Bearer $&#123;sessionStorage.accessToken&#125;`, &#125;, &#125;).then((response =&gt; &#123; if (response.code === 0) &#123; console.log(&quot;=====================&quot;, &apos;OK&apos;); &#125; else &#123; console.log(&quot;=====================&quot;, &apos;error&apos;); &#125; &#125;)); onSave(data); &#125; &#125;); &#125;&#125; onCancel=&#123;onCancel&#125;&gt; &lt;Form id=&quot;postForm&quot;&gt; &lt;Spin spinning=&#123;formLoading&#125; tip=&quot;加载中...&quot;&gt; &#123; getFieldDecorator(&apos;id&apos;, &#123;initialValue: _.defaultTo(data.id, null)&#125;) &#125; &lt;FormItem label=&quot;报告标题&quot; &#123;...formItemLayout&#125;&gt; &#123; getFieldDecorator(&apos;title&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;标题不能为空！&apos;, &#125;, ], initialValue: _.defaultTo(data.title, &apos;&apos;), &#125;)(&lt;Input/&gt;) &#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;显示时间&quot; &#123;...formItemLayout&#125;&gt; &#123; getFieldDecorator(&apos;showTime&apos;, &#123; rules: [ &#123; required: true, message: &apos;显示时间不能为空&apos;, &#125;, ], initialValue: data.showTime ? moment(moment(data.showTime).format(&apos;YYYY-MM-DD HH:mm&apos;)) : moment(), &#125;)( &lt;DatePicker showTime style=&#123;&#123;width: 280&#125;&#125; format=&quot;YYYY-MM-DD HH:mm&quot;/&gt;) &#125; &lt;/FormItem&gt; &lt;FormItem label=&quot;指定期数&quot; &#123;...formItemLayout&#125;&gt; &#123; getFieldDecorator(&apos;periods&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: false, message: &apos;期数&apos;, &#125;, ], initialValue: _.defaultTo(data.periods, &apos;&apos;), &#125;)(&lt;Input/&gt;) &#125; &lt;/FormItem&gt; &#123;/* &lt;FormItem label=&quot;上传附件&quot; &#123;...formItemLayout&#125;&gt; &#123; getFieldDecorator(&apos;fileUrl&apos;, &#123; rules: [ &#123; type: &apos;string&apos;, required: true, message: &apos;请上传PDF文档&apos;, &#125;, ], initialValue: _.defaultTo(data.fileUrl, &apos;&apos;) &#125;)(&lt;FileUpload uploadProps=&#123;this.uploadProps&#125; fileList=&#123;fileList&#125; data=&#123;&#123;&apos;objectKey&apos;: &apos;strategy/report&apos;&#125;&#125;/&gt;) &#125; &lt;/FormItem&gt; */&#125; &lt;FormItem labelCol=&#123;&#123;span:5&#125;&#125; wrapperCol=&#123;&#123;span:15&#125;&#125; label=&apos;文件上传&apos;&gt; &#123;getFieldDecorator(&apos;files&apos;)( &lt;Upload action=&apos;路径&apos; multiple uploadList beforeUpload=&#123;this.beforeUploadHandle&#125; onChange=&#123;this.fileChange&#125; onRemove=&#123;this.fileRemove&#125; fileList=&#123;this.state.fileData&#125;&gt; &lt;Button&gt;&lt;Icon type=&apos;upload&apos; /&gt;上传文件&lt;/Button&gt; &lt;/Upload&gt; )&#125; &lt;/FormItem&gt; &lt;/Spin&gt; &lt;/Form&gt; &lt;/Modal&gt; ); &#125; componentWillReceiveProps(nextProps) &#123; if (!this.props.modalVisible &amp;&amp; nextProps.modalVisible) &#123; this.props.form.resetFields(); &#125; &#125;&#125; 注意点 1、Upload组件默认是选择文件后直接调用action上传文件，返回url。通常文件都会在form表单里跟别的参数一起，这时候form里其实没有文件，而是文件的url地址。就像下面这样。StrategyReportForm是这个弹出层，而它的上层页面是StrategyReportList，在list中的form是这样的123456789101112131415161718&lt;StrategyReportForm modalVisible=&#123;strategyReportForm.modalVisible&#125; confirmLoading=&#123;strategyReportForm.confirmLoading&#125; options=&#123;strategyReportForm.options&#125; data=&#123;strategyReportForm.data&#125; fileList=&#123;strategyReportForm.fileList&#125; formLoading=&#123;strategyReportForm.formLoading&#125; onChangeFile=&#123;(fileList)=&gt;&#123; dispatch(&#123;type: &apos;strategyReportForm/fileList&apos;, payload: fileList&#125;); &#125;&#125; onSave=&#123;(data)=&gt;&#123; dispatch(&#123;type: &apos;strategyReportForm/update&apos;, payload: &#123;data, callback:(result)=&gt;&#123; dispatch(&#123;type: &apos;strategyReportList/list&apos;, payload:&#123;&#125;&#125;); &#125;&#125;&#125;); &#125;&#125; onCancel=&#123;()=&gt;&#123; dispatch(&#123;type: &apos;strategyReportForm/close&apos;&#125;); &#125;&#125;/&gt; 这段代码里的onSave回调方法的意思就是上传文件，关闭弹框，刷新列表。modle里的update方法与其他的没有两样。12345678910111213effects: &#123; * update(&#123;payload:&#123;data, callback&#125;&#125;, &#123;call, put, select&#125;)&#123; yield put(&#123;type: &apos;confirmLoading&apos;, payload: true&#125;); const response = yield call(api.update, data); if (response.code === 0) &#123; message.success(&quot;操作成功&quot;); yield put(&#123;type: &apos;close&apos;&#125;); if(callback) callback(response.data) &#125; else &#123; message.error(response.message); &#125; &#125;,&#125; api.upload这个方法在antd pro里是隔离定义再service目录下的，内容很简单：123456789export async function update(params) &#123; fetch(`$&#123;prefix&#125;/questionnaire/admin/strategy/reports`, &#123; method: &apos;POST&apos;, body: params, headers: &#123; &apos;Authorization&apos;: `Bearer $&#123;sessionStorage.accessToken&#125;`, &#125; &#125;)&#125; 需要注意的是这里得直接使用fetch方法，不能使用框架封装的request发起请求，因为request里封装的content-type类型是application/json 在and design pro2.x的版本里，request方法已经兼容了这个处理 在antd1.x的版本里，也可以使用reqeust里封装好的postFormWithProgress方法。比如这个用法：12345678910111213141516171819202122&lt;FormItem label=&quot;安装包地址&quot; labelCol=&#123;&#123; span: 3 &#125;&#125; wrapperCol=&#123;&#123; span: 9 &#125;&#125;&gt; &#123; getFieldDecorator(&apos;downloadAddr&apos;, &#123; rules: [ &#123; required: true, message: &apos;安装包地址不能为空&apos;, &#125;, ], &#125;)( &lt;Input disabled /&gt; ) &#125; &lt;/FormItem&gt; &lt;FormItem wrapperCol=&#123;&#123; offset:3, span: 9 &#125;&#125;&gt; &lt;Upload beforeUpload=&#123;this.uploadFile&#125;&gt; &lt;Button&gt; &lt;Icon type=&quot;upload&quot; /&gt;上传文件 &lt;/Button&gt; &lt;/Upload&gt; &lt;Progress size=&quot;small&quot; style=&#123;&#123; display: &apos;inline&apos; &#125;&#125; percent=&#123;~~(this.state.uploadPercent*100)&#125; /&gt; &lt;/FormItem&gt; js123456789101112131415161718192021uploadFile = (file) =&gt; &#123; this.setState(&#123; uploadPercent: 0 &#125;); uploadAppBinary(file, percent =&gt; this.setState(&#123; uploadPercent: percent &#125;)).then( (resp) =&gt; &#123; const &#123; code, message: msg, data, &#125; = resp; if (code === 0) &#123; const &#123; downloadAddr &#125; = data; this.props.form.setFieldsValue(&#123; downloadAddr, &#125;); &#125; else &#123; message.error(`上传文件失败！--$&#123;msg&#125;`); &#125; &#125;, ).catch(e =&gt; message.error(e.message)); return false;&#125; service12345export async function uploadAppBinary(file, callback) &#123; return postFormWithProgress(`$&#123;prefix&#125;/questionnaire/admin/app/release/uploadPackage`, &#123; file, &#125;, callback);&#125; 2、但是这次不一样，我们文件先不上传，而是与form表单的其他内容一起提交到API里。解决问题是学到的东西不少，简单记录下。 2.1、form里应不应该设置Content-Type属性，应该设置成什么？request里会有哪些不一样？直接参考post使用form-data和x-www-form-urlencoded的本质区别即可，但是结论是不需要自己设定，程序会自己根据类型设定。 2.2、调用接口时只要没有文件就没问题，但是有文件了就会400。原因：多个文件的append不能直接把数组append进去，比如上面如果不用循环获取fileData里的数据，而是直接formData.append(this.state.fileData);这样的数据发送的接口，就会400，原因就是类型不对。如果是单个文件，可以直接使用formData.append(files[0]);这样实现。 2.3、多个文件和单个文件的处理。不论是单个文件或是多个文件，都可以使用循环的形式将文件append到formdata中。 3、其他实现方式基于2.x以后的版本实现更简单一些。把json传到service的api以后，new出formData，append上参数即可。12345678910export async function batchImport(params)&#123; const formData = new FormData(); for (const key in params) &#123; formData.append(key, params[key]); &#125; return request(&apos;/customer/batchImport&apos;, &#123; method: &apos;POST&apos;, body: formData &#125;);&#125; 不过就是在form里要利用valuePropName和getValueFromEvent属性把属性值以json的结构传递到modles里。12345678910111213141516171819202122&lt;Modal destroyOnClose title=&quot;导入量体人&quot; visible=&#123;batchImportShow&#125; onOk=&#123;this.handleOk&#125; onCancel=&#123;() =&gt; handleImportVisible(false)&#125;&gt; &lt;FormItem labelCol=&#123;&#123; span: 5 &#125;&#125; wrapperCol=&#123;&#123; span: 15 &#125;&#125; label=&quot;测量计划&quot;&gt; &#123;form.getFieldDecorator(&apos;planId&apos;,&#123; rules: [&#123; required: true, message: &apos;请选择测量计划&apos;, &#125;], &#125;)(&lt;Select style=&#123; &#123; width: 200 &#125;&#125; id=&apos;planSelect&apos;&gt; &lt;Select.Option key=&#123;-99&#125; value=&apos;&apos;&gt;全部&lt;/Select.Option&gt; &#123; planList.map((item) =&gt; &lt;Select.Option key=&#123;item.planId&#125; value=&#123;item.planId&#125;&gt;&#123;item.planName&#125;&lt;/Select.Option&gt;) &#125; &lt;/Select&gt;)&#125; &lt;/FormItem&gt; &lt;FormItem labelCol=&#123;&#123; span: 5 &#125;&#125; wrapperCol=&#123;&#123; span: 15 &#125;&#125; label=&quot;数据文件&quot;&gt; &#123;form.getFieldDecorator(&apos;customerFile&apos;, &#123; rules: [&#123; required: true, message: &apos;请上传数据文件&apos;, &#125;], valuePropName: &apos;files&apos;, getValueFromEvent: e =&gt; e.target.files, &#125;)(&lt;Input type=&apos;file&apos; name=&apos;customerFile&apos; style=&#123;&#123;height:35&#125;&#125;/&gt;)&#125; &lt;/FormItem&gt; &lt;/Modal&gt; 友情参考将选中文件保存到页面的state中将文件append到新的formdata中使用post方式提交]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ant Design Pro 学习之跳页传参]]></title>
    <url>%2F2019%2F02%2F06%2FAnt%20Design%20Pro%20%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%B3%E9%A1%B5%E4%BC%A0%E5%8F%82%2F</url>
    <content type="text"><![CDATA[阿里粑粑开源的管理框架Ant Design Pro使用记录之跳页传参。 简书地址 偷盗别人老动成果，要侵权了。这是同事总结的跳页场景传参的形式。 umi - router / link 用法1234567891011121314import Link from &apos;umi/link&apos;;/* 普通使用 */&lt;Link to=&quot;/list&quot;&gt;Go to list page&lt;/Link&gt;/* 带参数 */&lt;Link to=&quot;/list?a=b&quot;&gt;Go to list page&lt;/Link&gt;/* 包含子组件 */&lt;Link to=&quot;/list?a=b&quot;&gt;&lt;button&gt;Go to list page&lt;/button&gt;&lt;/Link&gt; umi/routerrouter.push(path)推一个新的页面到 history 里。 1234567891011121314151617181920212223242526272829303132333435363738import router from &apos;umi/router&apos;;// 普通跳转，不带参数router.push(&apos;/list&apos;);// 带参数router.push(&apos;/list?a=b&apos;);// 带参数，并且参数会显示在url中router.push(&#123; pathname: &apos;/list&apos;, query: &#123; a: &apos;b&apos;, &#125;,&#125;);// 带参数，但是参数不会显示在url中router.push(&#123; pathname: &apos;/list&apos;, state: &#123; // state字段可以自定义，如用params等也可以 a: &apos;b&apos;, &#125;,&#125;); list页面对参数的接收取值： 1234const &#123; location: &#123; query, state &#125; &#125; = this.props;**console.log(query.a, state.a);** router.replace(path)替换当前页面，参数和 router.push()) 相同。 router.go(n)往前或往后跳指定页数。 router.goBack()后退一页。]]></content>
      <categories>
        <category>后台管理系统</category>
      </categories>
      <tags>
        <tag>Antd Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“SpringBoot2.0不容错过的新特性 WebFlux响应式编程”学习笔记(一)]]></title>
    <url>%2F2019%2F01%2F12%2Fspringboot2.0-webflux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%2F</url>
    <content type="text"><![CDATA[WebFlux响应式编程好记性不如烂笔头简书地址 第五节 webflux服务端开发讲解 5.1 异步servlet1、为什么要使用 异步servlet？回答：同步servlet一直占用服务器tomcat的线程数，是tomcat无暇接受更多的请求。因此有必要使用异步servlet。2、同步servlet阻塞了什么？也就是说同步servlet其实是阻塞了tomcat的servlet线程。3、异步servlet是怎么工作的？先看一个同步servlet的例子:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960import java.io.IOException;import java.util.concurrent.TimeUnit;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class SyncServlet */@WebServlet(&quot;/SyncServlet&quot;)public class SyncServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public SyncServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse * response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; long t1 = System.currentTimeMillis(); // 执行业务代码 doSomeThing(request, response); System.out.println(&quot;sync use:&quot; + (System.currentTimeMillis() - t1)); &#125; private void doSomeThing(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; // 模拟耗时操作 try &#123; TimeUnit.SECONDS.sleep(5); &#125; catch (InterruptedException e) &#123; &#125; // response.getWriter().append(&quot;done&quot;); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse * response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 再模拟一个异步servlet的例子：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import java.io.IOException;import java.util.concurrent.CompletableFuture;import java.util.concurrent.TimeUnit;import javax.servlet.AsyncContext;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class AsyncServlet */@WebServlet(asyncSupported = true, urlPatterns = &#123; &quot;/AsyncServlet&quot; &#125;)public class AsyncServlet extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public AsyncServlet() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse * response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; long t1 = System.currentTimeMillis(); // 开启异步 AsyncContext asyncContext = request.startAsync(); // 执行业务代码 CompletableFuture.runAsync(() -&gt; doSomeThing(asyncContext, asyncContext.getRequest(), asyncContext.getResponse())); System.out.println(&quot;async use:&quot; + (System.currentTimeMillis() - t1)); &#125; private void doSomeThing(AsyncContext asyncContext, ServletRequest servletRequest, ServletResponse servletResponse) &#123; // 模拟耗时操作 try &#123; TimeUnit.SECONDS.sleep(5); &#125; catch (InterruptedException e) &#123; &#125; // try &#123; servletResponse.getWriter().append(&quot;done&quot;); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; // 业务代码处理完毕, 通知结束 asyncContext.complete(); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse * response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 前后两次在浏览器上访问http://localhost:8080/SyncServlet和http://localhost:8080/AsyncServlet，在前台看都是大约5s返回。但是查看服务端控制台： sync use:5002async use:16 可以看到，同步是5s，异步的是16ms返回了，这样tomcat就又有时间处理别的业务了，也就是提高了服务器的并发。 5.2 Mono和Flux返回流接口reactor = java8的流 + java9的响应式流 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import java.util.concurrent.TimeUnit;import org.reactivestreams.Subscriber;import org.reactivestreams.Subscription;import reactor.core.publisher.Flux;public class ReactorDemo &#123; public static void main(String[] args) &#123; // reactor = jdk8 stream + jdk9 reactive stream // Mono 0-1个元素 // Flux 0-N个元素 String[] strs = &#123; &quot;1&quot;, &quot;2&quot;, &quot;3&quot; &#125;; // 2. 定义订阅者 Subscriber&lt;Integer&gt; subscriber = new Subscriber&lt;Integer&gt;() &#123; private Subscription subscription; @Override public void onSubscribe(Subscription subscription) &#123; // 保存订阅关系, 需要用它来给发布者响应 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(Integer item) &#123; // 接受到一个数据, 处理 System.out.println(&quot;接受到数据: &quot; + item); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 处理完调用request再请求一个数据 this.subscription.request(1); // 或者 已经达到了目标, 调用cancel告诉发布者不再接受数据了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 出现了异常(例如处理数据的时候产生了异常) throwable.printStackTrace(); // 我们可以告诉发布者, 后面不接受数据了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 全部数据处理完了(发布者关闭了) System.out.println(&quot;处理完了!&quot;); &#125; &#125;; // 这里就是jdk8的stream Flux.fromArray(strs).map(s -&gt; Integer.parseInt(s)) // 最终操作 // 这里就是jdk9的reactive stream .subscribe(subscriber); &#125;&#125; 5.2 完整的fluxweb步骤：1、添加依赖在https://start.spring.io/上选择Reactive MongoDB这个dependencies，按下【Genarate Project】按钮，下载demo.zip,查看mongodb的依赖，加入到pom文件中。 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-mongodb-reactive&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- lombok --&gt;&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt; 2、启动类application上添加mongodb支持注解@EnableReactiveMongoRepositories3、定义对象12345678@Document(collection = &quot;user&quot;)@Datapublic class User &#123; @Id private String id; private String name; private int age;&#125; 4、定义仓库repository创建UserRepository接口，继承ReactiveMongoRepository，并使用@Repository注解。5、定义controller123456789101112131415161718192021@RestController@RequestMapping(&quot;/user&quot;)public class UserController &#123; private final UserRepository userRepository; //官方推荐使用构造函数的方式注入依赖的bean public UserController(UserRepository userRepository) &#123; this.userRepository = userRepository; &#125; @GetMapping(&quot;/&quot;) public Flux&lt;User&gt; findAll() &#123; return userRepository.findAll(); &#125; @GetMapping(value = &quot;/stream/all&quot;, produces = MediaType.TEXT_EVENT_STREAM_VALUE) public Flux&lt;User&gt; findAllByStream() &#123; return userRepository.findAll(); &#125;&#125; 6、本地安装配置mongodb先下载mongodb，安装配置，根据平台自行查询，我的windows平台，参考的https://www.cnblogs.com/weschen/p/8213746.html 执行mongod --dbpath D:\MongoDB\data\db --logpath=D:\MongoDB\log\mongodb.log --logappend启动mongodb 7、mongodb数据库配置mongodb，在application.properties里添加如下配置1spring.data.mongodb.uri=mongodb://localhost:27017/webflux 8、启动项目并用客户端访问验证 后续加入CURD的普通接口和stream接口。添加validation参数check，统一exception抛出及切面拦截。具体代码参考全局异常：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import lombok.Data;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-10 22:54 * @desc $&#123;DESCRIPTION&#125; **/@Datapublic class CheckException extends RuntimeException &#123; private static final long serialVersionUID = 1L; /** * 出错字段的名字 */ private String fieldName; /** * 出错字段的值 */ private String fieldValue; public CheckException() &#123; super(); &#125; public CheckException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) &#123; super(message, cause, enableSuppression, writableStackTrace); &#125; public CheckException(String message, Throwable cause) &#123; super(message, cause); &#125; public CheckException(String message) &#123; super(message); &#125; public CheckException(Throwable cause) &#123; super(cause); &#125; public CheckException(String fieldName, String fieldValue) &#123; super(); this.fieldName = fieldName; this.fieldValue = fieldValue; &#125;&#125; 参数检查公用方法：12345678910111213141516171819202122232425262728import com.marvin.springboot.webflux.demo.exception.CheckException;import java.util.stream.Stream;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-10 22:53 * @desc tool **/public class CheckUtil &#123; private static final String[] INVALID_NAMES = &#123;&quot;admin&quot;, &quot;guanliyuan&quot;&#125;; /** * 用户名校验，不成功时抛出异常 * @param value */ public static void checkUserName(String value) &#123; Stream.of(INVALID_NAMES).filter(name -&gt; name.equalsIgnoreCase(value)) .findAny().ifPresent(name -&gt; &#123; throw new CheckException(name, value); &#125;); &#125;&#125; 异常拦截切面：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import com.marvin.springboot.webflux.demo.exception.CheckException;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.support.WebExchangeBindException;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-10 22:43 * @desc 异常处理切面 **/@ControllerAdvicepublic class CheckAdvice &#123; @ExceptionHandler(WebExchangeBindException.class) public ResponseEntity handleBindException(WebExchangeBindException e) &#123; return new ResponseEntity&lt;String&gt;(toStr(e), HttpStatus.BAD_REQUEST); &#125; @ExceptionHandler(CheckException.class) public ResponseEntity handleBindException(CheckException e) &#123; return new ResponseEntity&lt;String&gt;(toStr(e), HttpStatus.BAD_REQUEST); &#125; /** * 把校验异常转换成字符串 * @param ex * @return */ private String toStr(WebExchangeBindException ex) &#123; return ex.getFieldErrors().stream().map(e -&gt; e.getField() + &quot;:&quot; + e.getDefaultMessage()).reduce(&quot;&quot;, (s1, s2) -&gt; s1 + &quot;\n&quot; + s2); &#125; /** * 把校验异常转换成字符串 * @param ex * @return */ private String toStr(CheckException ex) &#123; return ex.getFieldName() + &quot;:错误的值 &quot; + ex.getFieldValue(); &#125;&#125; controller层加校验：1234567891011121314151617/** * 修改数据 * 存在的时候返回200，数据不存在的话返回404 */ @PutMapping(&quot;/&#123;id&#125;&quot;) public Mono&lt;ResponseEntity&lt;User&gt;&gt; updateUser(@PathVariable(&quot;id&quot;) String id, @Valid @RequestBody User user) &#123; CheckUtil.checkUserName(user.getName()); return this.userRepository.findById(id) //flatMat： 操作数据 .flatMap(u -&gt; &#123; u.setAge(user.getAge()); u.setName(user.getName()); return this.userRepository.save(u); &#125;) //map：转换数据 .map(u -&gt; new ResponseEntity&lt;&gt;(u, HttpStatus.OK)).defaultIfEmpty(new ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND)); &#125; 测试： 5.3 RouterFunction模式实现基本的增删改查除了上一节的User实体类，和UserRepository接口类两个，新建一个UserHandler类，内容如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import com.marvin.springboot.webfluxrouter.router.domain.User;import com.marvin.springboot.webfluxrouter.router.repository.UserRepository;import org.springframework.http.MediaType;import org.springframework.stereotype.Component;import org.springframework.web.reactive.function.server.ServerRequest;import org.springframework.web.reactive.function.server.ServerResponse;import reactor.core.publisher.Mono;import javax.annotation.Resource;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-26 22:32 * @desc UserHandler **/@Componentpublic class UserHandler &#123; @Resource private UserRepository userRepository; /** * 得到所有用户 * @param request * @return */ public Mono&lt;ServerResponse&gt; getAllUser(ServerRequest request) &#123; return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON_UTF8).body(userRepository.findAll(), User.class); &#125; /** * 创建用户 * @param request * @return */ public Mono&lt;ServerResponse&gt; createUser(ServerRequest request) &#123; Mono&lt;User&gt; user = request.bodyToMono(User.class); return ServerResponse.ok().contentType(MediaType.APPLICATION_JSON_UTF8).body(userRepository.saveAll(user), User.class); &#125; /** * 根据id删除用户 * @param request * @return */ public Mono&lt;ServerResponse&gt; deleteUserById(ServerRequest request) &#123; String id = request.pathVariable(&quot;id&quot;); return this.userRepository.findById(id).flatMap(user -&gt; this.userRepository.delete(user).then(ServerResponse.ok().build())).switchIfEmpty(ServerResponse.notFound().build()); &#125;&#125; 在创建一个AllRouters类，并且类似通常写的RequestMapping，处理URL路由，内容如下： 123456789101112131415161718192021222324252627282930313233343536import com.marvin.springboot.webfluxrouter.router.handler.UserHandler;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.http.MediaType;import org.springframework.web.reactive.function.server.RequestPredicates;import org.springframework.web.reactive.function.server.RouterFunction;import org.springframework.web.reactive.function.server.RouterFunctions;import org.springframework.web.reactive.function.server.ServerResponse;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-26 22:45 * @desc 路由 **/@Configurationpublic class AllRouters &#123; @Bean RouterFunction&lt;ServerResponse&gt; userRouter(UserHandler handler) &#123; return RouterFunctions.nest( //相当于类上面的@RequestMapping(&quot;/user&quot;) RequestPredicates.path(&quot;/user&quot;), //相当于方法上面的@RequestMapping，获取所有用户 RouterFunctions.route(RequestPredicates.GET(&quot;&quot;), handler::getAllUser) //添加用户 .andRoute(RequestPredicates.POST(&quot;&quot;).and(RequestPredicates.accept(MediaType.APPLICATION_JSON_UTF8)), handler::createUser) //删除用户 .andRoute(RequestPredicates.DELETE(&quot;/&#123;id&#125;&quot;), handler::deleteUserById) ); &#125;&#125; 运行程序，并且添加，列表，删除接口，完美~~~ 实现数据校验功能仍然使用上一节中的CheckException和CheckUtil两个类。修改UserHander：12]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>webflux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 上我常用的几种nginx配置]]></title>
    <url>%2F2019%2F01%2F08%2FLinux%20%E4%B8%8A%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8Dnginx%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[工作中常用的nginx配置备忘录简书地址 nginx作为用烂了的反向代理服务器，这两年经手的项目也是各种配置，各种学习，再次记录下还能想的起来或者有据可查的nginx配置，以防哪天掉坑里时还有一根救命稻草。 前置个人爱好的原因，我的nginx一般安装在/usr/local/nginx这个目录，主配置文件/usr/local/nginx/conf/nginx.conf，其他配置文件则是在/usr/local/nginx/conf/conf.d/*.conf这些单独的文件上。这些conf.d目录下的配置文件要在nginx.conf中被引入，因此nginx.conf文件最后一行有这么一句1include conf.d/*.conf; 1、一个域名，多个端口，多个项目这种情况是最理想，最好配置的，但是也是最没有啥可说的一种，不过我还的是copy一个记录一下吧。比如conf.d下有几个配置文件，大概这样：12345678910[haieradmin@1169CKT2 conf.d]$ lltotal 20-rw-r--r-- 1 haieradmin haieradmin 828 Mar 7 2018 hrsj.15386.conf-rw-r--r-- 1 haieradmin haieradmin 827 Mar 7 2018 hryh.10386.conf-rw-r--r-- 1 haieradmin haieradmin 1166 Nov 22 13:49 html.8880.conf-rw-r--r-- 1 haieradmin haieradmin 1022 Jul 16 13:50 portal.8886.conf-rw-r--r-- 1 haieradmin haieradmin 846 Jul 13 2018 questionnaire.8081.conf[haieradmin@1169CKT2 conf.d]$ pwd/usr/local/nginx/conf/conf.d[haieradmin@1169CKT2 conf.d]$ 查看其中一个文件的内容：123456789101112131415161718192021222324252627282930313233343536[haieradmin@1169CKT2 conf.d]$ cat hrsj.15386.conf server &#123; listen 15386; #server_name tech.haier.net; #ssl on; #ssl_certificate /usr/local/nginx/key/server.crt; #ssl_certificate_key /usr/local/nginx/key/server.key; index index.html; root /opt/chuangke/website/hrsj; location / &#123; client_max_body_size 100M; try_files $uri $uri/ /index.html; &#125; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; expires 30d; &#125; location ~ .*\.(js|css)?$ &#123; expires 12h; &#125; location ~ /\. &#123; deny all; &#125; error_page 404 /404.html; access_log /usr/local/nginx/logs/hrsj.host.access.log; &#125;[haieradmin@1169CKT2 conf.d]$ 其他几个配置文件知识里面listen的端口和root目录不一样。 2、一个域名，一个端口，多个项目，访问时用二级目录名称区分12345[haieradmin@1169CKT conf.d]$ lltotal 8-rw-r--r-- 1 root root 1594 Jun 26 2018 nginx_8086_to_5601.conf-rw-r--r-- 1 root root 1592 Jun 28 2018 nginx_8888_gitstats.conf[haieradmin@1169CKT conf.d]$ 查看配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162[haieradmin@1169CKT conf.d]$ cat nginx_8888_gitstats.conf server &#123; listen 8888; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; #location / &#123; # root html; # index index.html index.htm; #&#125; index index.html index.htm; client_max_body_size 100m; location /questionnaire &#123; alias /opt/chuangke/gitstats/result/questionnaire; &#125; location /portal &#123; alias /opt/chuangke/gitstats/result/Portal; &#125; location /portalmanage &#123; alias /opt/chuangke/gitstats/result/portalmanage; &#125; error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht &#123; # deny all; #&#125; &#125;[haieradmin@1169CKT conf.d]$ 访问的时候如：http://localhost:8888/portalmanage和http://localhost:8888/portal等。 3、多个域名，一个端口，多个项目123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142[root@im-test-cpr-1 nginx]# cat nginx.conf# * Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;# Load dynamic modules. See /usr/share/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; upstream server1 &#123; server 127.0.0.1:8890; &#125; upstream server2 &#123; server 127.0.0.1:5151; &#125; server &#123; listen 5050 default_server ssl; listen [::]:5050 default_server; server_name _; root /usr/share/nginx/html; ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;; ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; proxy_set_header Host $host:$server_port; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 90; add_header Access-Control-Allow-Origin $http_origin; add_header Access-Control-Allow-Methods &apos;GET, POST, PUT, DELETE, OPTIONS&apos;; add_header Access-Control-Allow-Credentials &apos;true&apos;; add_header Access-Control-Allow-Headers &apos;Accept, Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;; if ($request_method = &apos;OPTIONS&apos;) &#123; add_header &apos;Access-Control-Max-Age&apos; 1728000; add_header &apos;Content-Type&apos; &apos;text/plain charset=UTF-8&apos;; add_header &apos;Content-Length&apos; 0; add_header Access-Control-Allow-Origin $http_origin; add_header Access-Control-Allow-Methods &apos;GET, POST, PUT, DELETE, OPTIONS&apos;; add_header Access-Control-Allow-Credentials &apos;true&apos;; add_header Access-Control-Allow-Headers &apos;Accept, Authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&apos;; return 204; &#125; proxy_pass http://server2; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; server &#123; listen 8443 ssl; server_name sysadmint.rrs.com; root /usr/share/nginx/html/sysadmin/; ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;; ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ &#123; add_header Cache-Control no-store; &#125; location / &#123; try_files $uri /index.html; &#125; &#125; server &#123; listen 8443 ssl; server_name opadmint.rrs.com; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ &#123; add_header Cache-Control no-store; &#125; root /usr/share/nginx/html/opadmin/; location / &#123; try_files $uri /index.html; &#125; ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;; ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; &#125; server &#123; listen 8443 ssl; server_name shopadmint.rrs.com; root /usr/share/nginx/html/shopadmin/; location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ &#123; add_header Cache-Control no-store; &#125; location / &#123; try_files $uri /index.html; &#125; ssl_certificate &quot;/etc/pki/nginx/server.crt&quot;; ssl_certificate_key &quot;/etc/pki/nginx/private/server.key&quot;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; &#125;&#125;[root@im-test-cpr-1 nginx]# 访问：host name+8443端口号 4、将收到的服务转发给别的服务比如接受端口接受的端口是8086，但是映射后访问5601的资源。1234567891011121314151617181920212223[haieradmin@1169CKT conf.d]$ cat nginx_8086_to_5601.conf server &#123; listen 8086; server_name office.haier.net; access_log logs/5601.host.access.log main; location / &#123; proxy_pass http://127.0.0.1:5601/; &#125; location ~.*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123; proxy_pass http://127.0.0.1:5601; &#125; location ~.*\.(js|css)?$ &#123; proxy_pass http://127.0.0.1:5601; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125;&#125;[haieradmin@1169CKT conf.d]$]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+next使用Valine评论系统]]></title>
    <url>%2F2018%2F11%2F24%2Fhexo%E5%8D%9A%E5%AE%A2%E4%BD%BF%E7%94%A8Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[博客评论系统从韩国产来必力换成国产Valine简书地址 原文地址：hexo+next使用Valine评论系 来必力博主原来的博客使用的来必力系统，确实卡顿太厉害。作为一枚程序猿岂能允许这么磨磨唧唧的东西一直存在，甲方说优化，优化掉。因为我最不喜欢在评论系统里看到还需要登录这样的步骤。 先展示下现在的东东 终于出来了，评论试试 咦，还得登陆一下，输个邮箱试试 什么鬼，那就登录吧！！！ 看到了吧，你可以登陆了。噗噗噗~ 还没有放弃的真是我崇拜的大哥啊。当然，吐槽归吐槽，也不是一无是处，当时选择一是没有其他可选的，而是看了看有些截图，还不错。比如下面这样的（我用github第三方登录的）： 输入框右上角还有个小铃铛，点点试试 是吧，还不错吧。哈哈哈。 再来看看来必力的后台吧（我可以跳过墙，所以速度还可以） 毕竟是国际化的，能选中文。 到此为止吧。 给hexo添加Valine评论功能后面了解到一款国人开发的评论系统叫Valine用的是LeanCloud作为数据库，洁面很简洁，不像来必力那样花哨只是单纯的评论，简洁到没有后台！！！删除和管理评论只能直接操作数据库。这里写下为Hexo-Next模板添加Valine的过程和坑点。1.Next模板要5.14（免去自己手动修改的麻烦）。不是这个版本的可以考虑升级或者自己手动修改，修改教程在 https://github.com/iissnan/hexo-theme-next/pull/19832.注册LeanCloud并创建一个开发版应用（免费） 3.在LeanCloud -&gt; 存储 -&gt; 创建Class -&gt; 无限制的Class（坑点1）class名称为：Comment 4.在LeanCloud-设置-把除数据存储其他选项都关闭。安全域名中添加域名，一定要注意格式（坑点2） 例如：https://www.nobige.cn:443 5.在Next模板下的_config.yml搜索Valine进行填写appid和appkey 功能展示 下面说下各个选项的含义12345678910111213# Valine.# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: # your leancloud application appid appkey: # your leancloud application appkey notify: true # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: ヾﾉ≧∀≦)o 来呀！吐槽一番吧！ # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size 一般改动的为appid和appkey其他默认即可，如果要开启email通知除了修改_config.yml文件之外还要将LeanCloud -&gt; 设置邮件模板 -&gt; 用于重置密码的邮件主题进行修改 1234567你在&#123;&#123;appname&#125;&#125; 的评论收到了新的回复&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;/p&gt;&lt;p&gt;你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;你的网址首页链接&quot; style=&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;/a&gt;&lt;/p&gt; CDN修改建议将自带的CDN改成第三方CDN，为啥？？？10+s的加载那酸爽是在是过瘾。文件目录：next/layout/_third-party/comments/valine.swig //cdn.jsdelivr.net/npm/valine/dist/Valine.min.js 官方的CDN是 //unpkg.com/valine/dist/Valine.min.js 更多高级用法请到官网查看 https://valine.js.org/]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo,Valine</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows 上搭建clojure开发环境]]></title>
    <url>%2F2018%2F11%2F05%2FWindow%E4%B8%8A%E6%90%AD%E5%BB%BAClojure%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[Windows上Clojure环境搭建简书地址 1、安装JDK我本地已经装好了jdk9，没装好的自己百度下，文章多到烂了。使用java -version查看是否安装妥当。123456C:\Users\marvin&gt;java -versionjava version &quot;9.0.4&quot;Java(TM) SE Runtime Environment (build 9.0.4+11)Java HotSpot(TM) 64-Bit Server VM (build 9.0.4+11, mixed mode)C:\Users\marvin&gt; 2、安装leiningen-win-installer点我进入下载页，或者直接点我下载下载一个.exe的windows可执行文件，安装时使用默认配置，不然可能缺少self-installs文件夹。 3、运行安装好的clojure REPL，不出意外的话会闪退，闪退的话去cmd运行 lein -version 会提示你要先安装，安装命令看提示，但该命令因为有墙基本上都执行不了，按照下一步安装。4、手动配置leiningen去https://github.com/technomancy/leiningen/releases下载[leiningen-2.8.1-standalone.zip]，找到上一步安装lein安装目录，放在self-install文件夹下（C:\Users\marvin.lein\self-installs），把文件后缀名改成.jar。 5、在cmd中执行lein repl即可进入clojure命令行，执行lein repl 或者可以直接在windows开始栏搜索安装的程序，点击打开。 更进一步，输出个Hello World吧 6、使用Intellij Idea作为开发IED需要安装Cursive插件 注意：如果在线安装安装不上的话，可以下载你的IDE对应版本插件的zip包，进行本地导入安装。 如图是本地新建的一个demo工程，可以在.clj文件上直接右击运行。 代码：12345678(ns firstclojure.core)(defn foo &quot;I don&apos;t do a whole lot.&quot; [x] (println x &quot;Hello, World!&quot;))(println (foo &quot;Hello Clojure \n&quot;)) 通过lein run的方式也可以很方便的执行代码，但是如果要将我们的代码share出去，就需要生成一个jar文件了，我们使用lein uberjar来生成jar，生成的jar文件为target/uberjar/clojure-noob-0.1.0-SNAPSHOT-standalone.jar，我们可以在java里面直接运行了。 java -jar target/uberjar/clojure-noob-0.1.0-SNAPSHOT-standalone.jarHello, Clojure! 参考文章Mac 下 Clojure 环境搭建]]></content>
      <categories>
        <category>clojure</category>
      </categories>
      <tags>
        <tag>clojure</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海尔创客汇笔记----安卓测试环境检测不到热更]]></title>
    <url>%2F2018%2F11%2F01%2F%E6%B5%B7%E5%B0%94%E5%88%9B%E5%AE%A2%E6%B1%87%E7%AC%94%E8%AE%B0----%E5%AE%89%E5%8D%93%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E7%83%AD%E6%9B%B4%2F</url>
    <content type="text"><![CDATA[安卓测试环境检测不到热更，问题发现、排查思路及解决简书地址 怕啥来啥昨天晚上约定的晚上11点发布测试环境的热更，小杨同学说了：“怕啥来啥”，果然，安卓测试的app周一就扔出去了，约定好的今天晚上热更，结果发了热更移动端却检测不到。 晚上跟ios前端同事折腾了两次，但是无果而终，甲方粑粑不乐意了。 今天开始解决这个问题。 解决方案过程讨论 背景： 1、发出去之前确实做过热更测试，不过现在看来，当时测是测了，但是测试的环境一直停留在debug环境。2、如果本地代码和服务器上最新的热更包是一样的话，推送热更是不会成功的。 第一步，热更是否推送成功？1、小杨同学在他的环境下发了ios的推送，测试完美以后，又发了android的热更。遗憾的是手机上启动检测不到更新。后来再更新代码，发了几次，无果。 第二步，app检查逻辑是否正常？app启动时做了检查日志处理：1234567891011121314// 热更-检查更新 codePushCheckForUpdate = () =&gt; &#123; CodePush.checkForUpdate().then((update) =&gt; &#123; if (!update) &#123; console.log(&apos;已是最新版本...&apos;); &#125; else &#123; console.log(&apos;有新版本-------&apos;, update); const packageSize = parseFloat(update.packageSize / 1024 / 1024).toFixed(2); console.log(&apos;packageSize&apos;, packageSize); this.setState(&#123; totalSize: packageSize &#125;); this.showUpdateInfoAlert(update); &#125; &#125;); &#125; 安卓手机启动查看log，结果确实是匹配的 第三步，发送推送的环境和已有app的原生代码有区别导致的？把本地所有代码暂存，直接发布热更。 结果是一样的。 第四步，把代码切换到打包时的commit，然后发热更。怀疑是如下的这种代码有区别导致的。 切换到当时打包的那次commit，重新发热更。 很遗憾，结论是一样的。 告诉甲方粑粑，然后用最新的代码打个包，这就睡觉了。 热更记录硬删除测试在热更数据库强制删除热更记录1234567891011121314151617181920212223DELETE FROM codepush.deployments_historyWHERE id=192;DELETE FROM codepush.deployments_historyWHERE id=193;DELETE FROM codepush.deployments_historyWHERE id=194;DELETE FROM codepush.deployments_history WHERE id=195;DELETE FROM codepush.packages WHERE id=192;DELETE FROM codepush.packages WHERE id=193;DELETE FROM codepush.packages WHERE id=194;DELETE FROM codepush.packages WHERE id=195;DELETE FROM codepush.packages_metrics WHERE id=192;DELETE FROM codepush.packages_metrics WHERE id=193;DELETE FROM codepush.packages_metrics WHERE id=194;DELETE FROM codepush.packages_metrics WHERE id=195;DELETE FROM codepush.packages_diff WHERE id=450;DELETE FROM codepush.packages_diff WHERE id=451;DELETE FROM codepush.packages_diff WHERE id=452;DELETE FROM codepush.packages_diff WHERE id=453;DELETE FROM codepush.packages_diff WHERE id=454;DELETE FROM codepush.packages_diff WHERE id=455;DELETE FROM codepush.deployments_versions WHERE id=43; 删除4次1.5.1的code-push后 重新发起热更 很遗憾仍然没有生效。此时本地的debug环境一个app启动后，发现居然提示更新。 问题来了，可能是热更和检查热更不在一个频道上 检查安卓热更配置，果然验证了这一猜测。 123456789101112buildTypes &#123; debug &#123; ext.alwaysUpdateBuildId = false // 避免 crashLytics 的alwaysUpdateBuildId每次编译都重新生成 加快编译速度 buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&apos; // Staging &#125; release &#123; signingConfig signingConfigs.release minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot; buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;pppppppppppppppppppppppppppppp&quot;&apos; //Production &#125;&#125; 一个解释：配置里只有debug（Staging）和release（Production）的配置,配置了不同的deployment key，但因为打测试环境的app时，选择的是release，所以，按照这个配置，只有发在Production的上的热更，app启动时才能检查到，而现在一直在用Staging发。 修改配置1234567891011121314151617buildTypes &#123; debug &#123; ext.alwaysUpdateBuildId = false // 避免 crashLytics 的alwaysUpdateBuildId每次编译都重新生成 加快编译速度 buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&apos; // Staging &#125; beta &#123; signingConfig signingConfigs.release minifyEnabled enableProguardInReleaseBuilds buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&apos; //Staging &#125; release &#123; signingConfig signingConfigs.release minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot; buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;pppppppppppppppppppppppppppppp&quot;&apos; //Production &#125;&#125; sync时报错，所有的库都找不到，错误信息如下： 参考本文提示，发现配置少了一项matchingFallbacks = [&#39;release&#39;, &#39;debug&#39;]，添加到beta配置后，build成功。123456beta &#123; signingConfig signingConfigs.release minifyEnabled enableProguardInReleaseBuilds buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;&apos; //Staging matchingFallbacks = [&apos;release&apos;, &apos;debug&apos;]&#125; build后，重新打包，选择beta包， 首页菜单改成【专属应用】，发热更，而且强更。 app启动测试： 检查应用更新数，果然有更新（此处我截图时已经成功了两次） success！！！ 前端路漫漫，且采坑且记录~~~~ 相关文档 Unable to resolve dependency Android Studio 3.0 升级AndroidStudio3.0 Unable to resolve dependency for ‘:app@betaUnitTest/compileClasspath’: Could not resolve project code-push热更新配置（命令整理）]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
        <tag>code-push</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10 上浅尝vue js好记性不如烂笔头之三]]></title>
    <url>%2F2018%2F10%2F31%2Fwindows-vuejs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%2F</url>
    <content type="text"><![CDATA[vuejs学习笔记—-父子组件传值、动态组件、自定义组件、vue-router、vue-link、state简书地址 本节开始实战项目。布局layout.vue首页index.vue引入vue-resource引入json-serverconfig/index.js 中proxyTable使用 首页幻灯片制作,本次自己实现0、父组件调用子组件，传值1、子组件接收参数，维护当前index，分页切换实现2、前一页，后一页按钮实现3、自动播放实现4、切入动画效果实现—transition5、子组件通过事件触发父组件再次学习查找vue js的组件库的推荐 https://github.com/vuejs/awesome-vue 弹窗组件及关闭 登录注册表单验证和提交 够买详情页路由 其他 视频共享：链接: https://pan.baidu.com/s/18TFC0-VSCIWFo977p4YcTQ提取码: rjcp 源代码共享：https://gitee.com/marvinma/vue2-pc]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海尔创客汇笔记----安卓生产环境打包配置]]></title>
    <url>%2F2018%2F10%2F25%2F%E6%B5%B7%E5%B0%94%E5%88%9B%E5%AE%A2%E6%B1%87%E7%AC%94%E8%AE%B0----%E5%AE%89%E5%8D%93%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[创客汇项目打包生产环境的app需要修改的配置简书地址 打包修改配置1、header居中 看这个https://blog.csdn.net/hunannanhu/article/details/79285736 注释掉关于安卓的特殊处理： 2、修改网络请求api地址，全部换成正式 \Portal\js\network\constants.js 3、修改IM环境切换成正式的 \Portal\js\network\constants.js 4、覆盖documentpicker 这个文件， 路径Portal\node_modules\react-native-document-picker\android\src\main\java\com\reactnativedocumentpicker\DocumentPicker.java 新文件内容：package com.reactnativedocumentpicker;import android.app.Activity;import android.content.ContentResolver;import android.content.ContentUris;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.provider.OpenableColumns;import android.util.Log;import android.webkit.MimeTypeMap;import com.facebook.react.bridge.ActivityEventListener;import com.facebook.react.bridge.Arguments;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.ReadableArray;import com.facebook.react.bridge.ReadableMap;import com.facebook.react.bridge.WritableMap;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.nio.channels.Channels;import java.nio.channels.ReadableByteChannel;/** * @see &lt;a href=&quot;https://developer.android.com/guide/topics/providers/document-provider.html&quot;&gt;android documentation&lt;/a&gt; * marvin.ma use for production */public class DocumentPicker extends ReactContextBaseJavaModule implements ActivityEventListener &#123; private static final String NAME = &quot;RNDocumentPicker&quot;; private static final int READ_REQUEST_CODE = 41; private Context mContex; private static class Fields &#123; private static final String FILE_SIZE = &quot;fileSize&quot;; private static final String FILE_NAME = &quot;fileName&quot;; private static final String TYPE = &quot;type&quot;; &#125; private Callback callback; public DocumentPicker(ReactApplicationContext reactContext) &#123; super(reactContext); this.mContex = reactContext; reactContext.addActivityEventListener(this); &#125; @Override public String getName() &#123; return NAME; &#125; @ReactMethod public void show(ReadableMap args, Callback callback) &#123; Intent intent; if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.KITKAT) &#123; intent = new Intent(Intent.ACTION_OPEN_DOCUMENT); &#125; else &#123; intent = new Intent(Intent.ACTION_PICK); &#125; intent.addCategory(Intent.CATEGORY_OPENABLE); if (!args.isNull(&quot;filetype&quot;)) &#123; ReadableArray filetypes = args.getArray(&quot;filetype&quot;); if (filetypes.size() &gt; 0) &#123; intent.setType(filetypes.getString(0)); &#125; &#125; this.callback = callback; getReactApplicationContext().startActivityForResult(intent, READ_REQUEST_CODE, Bundle.EMPTY); &#125; // removed @Override temporarily just to get it working on RN0.33 and RN0.32 - will remove public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) &#123; onActivityResult(requestCode, resultCode, data); &#125; // removed @Override temporarily just to get it working on RN0.33 and RN0.32 public void onActivityResult(int requestCode, int resultCode, Intent data) &#123; if (requestCode != READ_REQUEST_CODE) return; if (resultCode != Activity.RESULT_OK) &#123; callback.invoke(&quot;Bad result code: &quot; + resultCode, null); return; &#125; if (data == null) &#123; callback.invoke(&quot;No data&quot;, null); return; &#125; try &#123; Uri uri = data.getData(); callback.invoke(null, toMapWithMetadata(uri)); &#125; catch (Exception e) &#123; Log.e(NAME, &quot;Failed to read&quot;, e); callback.invoke(e.getMessage(), null); &#125; &#125; private WritableMap toMapWithMetadata(Uri uri) &#123; WritableMap map; if(uri.toString().startsWith(&quot;/&quot;)) &#123; map = metaDataFromFile(new File(uri.toString())); &#125; else if (uri.toString().startsWith(&quot;http&quot;)) &#123; map = metaDataFromUri(uri); &#125; else &#123; map = metaDataFromContentResolver(uri); &#125; map.putString(&quot;uri&quot;, uri.toString()); if(Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT)&#123; map.putString(&quot;filePath&quot;, getPath(mContex, uri)); &#125;else &#123; map.putString(&quot;filePath&quot;, uri2Path(mContex, uri)); &#125; return map; &#125; private WritableMap metaDataFromUri(Uri uri) &#123; WritableMap map = Arguments.createMap(); File outputDir = getReactApplicationContext().getCacheDir(); try &#123; File downloaded = download(uri, outputDir); map.putInt(Fields.FILE_SIZE, (int) downloaded.length()); map.putString(Fields.FILE_NAME, downloaded.getName()); map.putString(Fields.TYPE, mimeTypeFromName(uri.toString())); &#125; catch (IOException e) &#123; Log.e(&quot;DocumentPicker&quot;, &quot;Failed to download file&quot;, e); &#125; return map; &#125; private WritableMap metaDataFromFile(File file) &#123; WritableMap map = Arguments.createMap(); if(!file.exists()) return map; map.putInt(Fields.FILE_SIZE, (int) file.length()); map.putString(Fields.FILE_NAME, file.getName()); map.putString(Fields.TYPE, mimeTypeFromName(file.getAbsolutePath())); return map; &#125; private WritableMap metaDataFromContentResolver(Uri uri) &#123; WritableMap map = Arguments.createMap(); ContentResolver contentResolver = getReactApplicationContext().getContentResolver(); map.putString(Fields.TYPE, contentResolver.getType(uri)); Cursor cursor = contentResolver.query(uri, null, null, null, null, null); try &#123; if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123; map.putString(Fields.FILE_NAME, cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME))); int sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE); if (!cursor.isNull(sizeIndex)) &#123; String size = cursor.getString(sizeIndex); if (size != null) map.putInt(Fields.FILE_SIZE, Integer.valueOf(size)); &#125; &#125; &#125; finally &#123; if (cursor != null) &#123; cursor.close(); &#125; &#125; return map; &#125; private static File download(Uri uri, File outputDir) throws IOException &#123; File file = File.createTempFile(&quot;prefix&quot;, &quot;extension&quot;, outputDir); URL url = new URL(uri.toString()); ReadableByteChannel channel = Channels.newChannel(url.openStream()); try&#123; FileOutputStream stream = new FileOutputStream(file); try &#123; stream.getChannel().transferFrom(channel, 0, Long.MAX_VALUE); return file; &#125; finally &#123; stream.close(); &#125; &#125; finally &#123; channel.close(); &#125; &#125; private static String mimeTypeFromName(String absolutePath) &#123; String extension = MimeTypeMap.getFileExtensionFromUrl(absolutePath); if (extension != null) &#123; return MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension); &#125; else &#123; return null; &#125; &#125; // Required for RN 0.30+ modules than implement ActivityEventListener public void onNewIntent(Intent intent) &#123; &#125; /** * 专为Android4.4以上设计的从Uri获取文件路径 */ public static String getPath(final Context context, final Uri uri) &#123; final boolean isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT; // DocumentProvider if (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123; // ExternalStorageProvider if (isExternalStorageDocument(uri)) &#123;// LogUtils.logInfoStar(&quot;isExternalStorageDocument&quot;); final String docId = DocumentsContract.getDocumentId(uri); final String[] split = docId.split(&quot;:&quot;); final String type = split[0]; if (&quot;primary&quot;.equalsIgnoreCase(type)) &#123; return Environment.getExternalStorageDirectory() + &quot;/&quot; + split[1]; &#125; // TODO handle non-primary volumes &#125; // DownloadsProvider else if (isDownloadsDocument(uri)) &#123;// LogUtils.logInfoStar(&quot;isDownloadsDocument&quot;); final String id = DocumentsContract.getDocumentId(uri); final Uri contentUri = ContentUris.withAppendedId( Uri.parse(&quot;content://downloads/public_downloads&quot;), Long.valueOf(id)); return getDataColumn(context, contentUri, null, null); &#125; // MediaProvider else if (isMediaDocument(uri)) &#123;// LogUtils.logInfoStar(&quot;isMediaDocument&quot;); final String docId = DocumentsContract.getDocumentId(uri); final String[] split = docId.split(&quot;:&quot;); final String type = split[0]; Uri contentUri = null; if (&quot;image&quot;.equals(type)) &#123; contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI; &#125; else if (&quot;video&quot;.equals(type)) &#123; contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI; &#125; else if (&quot;audio&quot;.equals(type)) &#123; contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI; &#125; final String selection = &quot;_id=?&quot;; final String[] selectionArgs = new String[]&#123;split[1]&#125;; return getDataColumn(context, contentUri, selection, selectionArgs); &#125; &#125; // MediaStore (and general) else if (&quot;content&quot;.equalsIgnoreCase(uri.getScheme())) &#123; return getDataColumn(context, uri, null, null); &#125; // File else if (&quot;file&quot;.equalsIgnoreCase(uri.getScheme())) &#123; return uri.getPath(); &#125; return null; &#125; /** * Get the value of the data column for this Uri. This is useful for * MediaStore Uris, and other file-based ContentProviders. * * @param context The context. * @param uri The Uri to query. * @param selection (Optional) Filter used in the query. * @param selectionArgs (Optional) Selection arguments used in the query. * @return The value of the _data column, which is typically a file path. */ public static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) &#123; Cursor cursor = null; final String column = &quot;_data&quot;; final String[] projection = &#123;column&#125;; try &#123; cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null); if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123; final int column_index = cursor.getColumnIndexOrThrow(column); return cursor.getString(column_index); &#125; &#125; finally &#123; if (cursor != null) cursor.close(); &#125; return null; &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is ExternalStorageProvider. */ public static boolean isExternalStorageDocument(Uri uri) &#123; return &quot;com.android.externalstorage.documents&quot;.equals(uri.getAuthority()); &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is DownloadsProvider. */ public static boolean isDownloadsDocument(Uri uri) &#123; return &quot;com.android.providers.downloads.documents&quot;.equals(uri.getAuthority()); &#125; /** * @param uri The Uri to check. * @return Whether the Uri authority is MediaProvider. */ public static boolean isMediaDocument(Uri uri) &#123; return &quot;com.android.providers.media.documents&quot;.equals(uri.getAuthority()); &#125; /** * Try to return the absolute file path from the given Uri * * @param context * @param uri * @return the file path or null */ public static String uri2Path(final Context context, final Uri uri) &#123; if (null == uri) return null; final String scheme = uri.getScheme(); String data = null; if (scheme == null) data = uri.getPath(); else if (ContentResolver.SCHEME_FILE.equals(scheme)) &#123; data = uri.getPath(); &#125; else if (ContentResolver.SCHEME_CONTENT.equals(scheme)) &#123; Cursor cursor = context.getContentResolver().query(uri, new String[]&#123;MediaStore.Images.ImageColumns.DATA&#125;, null, null, null); if (null != cursor) &#123; if (cursor.moveToFirst()) &#123; int index = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA); if (index == -1) &#123; index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA); &#125; if (index &gt; -1) &#123; data = cursor.getString(index); &#125; &#125; cursor.close(); &#125; &#125; return data; &#125;&#125; 5、使用命令unzip -l wuliuxj20181010.zip检查物流等js bundle文件内容是否正确，需要有子文件夹。 6、替换图标： \Portal\android\app\src\main\AndroidManifest.xml 7、放开热更 Portal\index.js，确保这行代码没被注释掉 8、修改BTC通知、请示报告单等HTML的位置为正式的。 9、打包 keystore 在这个路径下 **这是密码 新版发出前内测检查事项1、所有地址是不是生产的 1.1、 登录 1.2、水站 1.3、IM系统 1.4、会议室预订 1.5、BTB/BTC 2、常用功能正常 2.1、启动 2.2、登录 2.3、日程，列表，创建会议/任务，能添加附件 2.4、直播 2.5、BTC/BTB/巡检能打开，首次加载有进度条，能下载 2.6、我的团队，列表正常，能创建团队 2.7、IM登录正常，能聊天，视频，白版协同 2.8、可以检查更新]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
        <tag>package</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装maven私服]]></title>
    <url>%2F2018%2F09%2F02%2FLinux%20%E5%AE%89%E8%A3%85maven%E7%A7%81%E6%9C%8D%2F</url>
    <content type="text"><![CDATA[开发环境搭建—安装maven私服简书地址 1、下载通过此地址下载需要的版本 安装下载好nexus3.9最新版后解压，copy到/usr/local/nexus/目录下然后修改端口等配置。 2、修改配置2.1、启动。以3.6.0为例12[root@MiWiFi-R3-srv ~]# cd /usr/local/nexus-3.6.0-02/bin/[root@MiWiFi-R3-srv ~]# ./nexus run &amp; 稍等一会(首次启动会比较慢),当出现以下日志的时候表示启动成功! Started Sonatype Nexus OSS 3.6.0-02 2.2、开启远程访问端口12[root@MiWiFi-R3-srv bin]# firewall-cmd --zone=public --add-port=8081/tcp --permanent[root@MiWiFi-R3-srv bin]# firewall-cmd --reload nexus3默认端口是:8081nexus3默认账号是:adminnexus3默认密码是:admin123 2.3、设置开机自启动(systemctl方式)创建一个服务1[root@MiWiFi-R3-srv ~]# vim /usr/lib/systemd/system/nexus.service 填入相关内容12345678910111213[Unit]Description=nexus service[Service]Type=forkingLimitNOFILE=65536 #警告处理ExecStart=/usr/local/nexus/nexus-3.7.1-02/bin/nexus startExecReload=/usr/local/nexus/nexus-3.7.1-02/bin/nexus restartExecStop=/usr/local/nexus/nexus-3.7.1-02/bin/nexus stopRestart=on-failure[Install]WantedBy=multi-user.target 将服务加入开机启动1[root@MiWiFi-R3-srv ~]# systemctl enable nexus.service 重新加载配置文件1[root@MiWiFi-R3-srv ~]# systemctl daemon-reload 2.4、修改nexus3的运行用户为root123[root@MiWiFi-R3-srv bin]# vim nexus.rcrun_as_user=&quot;root&quot; 2.5、修改nexus3启动时要使用的jdk版本1[root@MiWiFi-R3-srv bin]# vim nexus 第14行:1INSTALL4J_JAVA_HOME_OVERRIDE=/usr/local/java/jdk1.8.0_144 2.6、修改nexus3默认端口(可选) 12[root@MiWiFi-R3-srv etc]# cd /usr/local/nexus-3.6.0-02/etc/[root@MiWiFi-R3-srv etc]# vim nexus-default.properties 默认端口:80811application-port=8081 2.7、修改nexus3数据以及相关日志的存储位置(可选)：123456[root@MiWiFi-R3-srv bin]# cd /usr/local/nexus-3.6.0-02/bin/[root@MiWiFi-R3-srv bin]# vim nexus.vmoptions -XX:LogFile=./sonatype-work/nexus3/log/jvm.log-Dkaraf.data=./sonatype-work/nexus3-Djava.io.tmpdir=./sonatype-work/nexus3/tmp 3、上传外部jar文件3.1、创建仓库 3.2、上传jar 3.3、最最最重要的一步：将新创建的3rdParty加入到public对外公布的group下 4、配置本地maven的pom文件4.1、全局修改maven配置文件的setting.xml配置文件12345678910111213141516171819202122232425262728293031&lt;profiles&gt;&lt;profile&gt;&lt;id&gt;dev&lt;/id&gt;&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;http://jenkins.haier.haiqiang.xin:8887/repository/maven-public/&lt;/url&gt; &lt;name&gt;Yuandian Maven Repo&lt;/name&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;mvn-repo&lt;/id&gt; &lt;url&gt;http://jenkins.haier.haiqiang.xin:8887/repository/maven-public/&lt;/url&gt; &lt;/repository&gt;&lt;/repositories&gt;&lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;nexus&lt;/name&gt; &lt;url&gt;http://jenkins.haier.haiqiang.xin:8887/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt;&lt;/profile&gt; &lt;/profiles&gt; 4.2、在项目中使用私服，修改maven的pom文件，加入repository的配置123456789101112131415161718192021&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Team Nexus Repository&lt;/name&gt; &lt;url&gt;http://27.223.70.82:8887/repository/maven-public/&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt;&lt;/repositories&gt;&lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;Team Nexus Repository&lt;/name&gt; &lt;url&gt;http://27.223.70.82:8887/repository/maven-public/&lt;/url&gt; &lt;/pluginRepository&gt;&lt;/pluginRepositories&gt; 结束。 参考https://blog.csdn.net/yougoule/article/details/56843562]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10 上浅尝vue js好记性不如烂笔头之一]]></title>
    <url>%2F2018%2F09%2F02%2Fwindows-vuejs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[vuejs学习笔记—-vue安装、数据初始化、数据mock简书地址 说实话，在windows配置前端不是不可以，但是确实比用mac麻烦多了（说的好像我是mac老手似的，其实只是有几个月的使用经验而已），曾记得，当年搞react-native环境就是这样，搞python环境也是一样，再到如今想搞vue，还是这样。 不过也不是不可能，只要你愿意折腾，不放弃（其实是买不起mac）。 安装环境1、安装node，到今天（2018-09-10教师节），node最新版是10.8了，但是因为几个月前搞过vue，安装的node是8.6.0，今天升级以后反而连vue init都不能用了，所以不得已回退到8.6.0，所以还是使用稳定版比较稳妥。直接到官网下载si文件下一步下一步傻瓜式安装即可。 2、安装webpack1$ npm install -g webpack 3、安装vue-cli1$ npm install -g vue-cli 4、初始化项目1$ vue init webpack demo 5、运行项目12$ npm install$ npm run dev 默认访问端口是8080，访问即可 使用json-server模拟REST API因为是学习，老老实实写后端接口，再给前端调用，确实有些头重脚轻，我选择了json-server用来mock数据。 安装服务 1$ npm install json-server -g 创建文件在项目根目录新建/mock文件夹，并且在mock目录下新建db.json文件，内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&#123; &quot;list&quot;: [ &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;张三&quot;, &quot;tel&quot;: &quot;15223810923&quot; &#125;, &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;李四&quot;, &quot;tel&quot;: &quot;15223810923&quot; &#125;, &#123; &quot;id&quot;: 3, &quot;name&quot;: &quot;王二&quot;, &quot;tel&quot;: &quot;15223810923&quot; &#125;, &#123; &quot;id&quot;: 4, &quot;name&quot;: &quot;陈五&quot;, &quot;tel&quot;: &quot;15223810923&quot; &#125;, &#123; &quot;name&quot;: &quot;赵六&quot;, &quot;tel&quot;: &quot;123454323&quot;, &quot;id&quot;: 5 &#125;, &#123; &quot;name&quot;: &quot;赵六&quot;, &quot;tel&quot;: &quot;123454323&quot;, &quot;id&quot;: 6 &#125;, &#123; &quot;name&quot;: &quot;赵六&quot;, &quot;tel&quot;: &quot;123454323&quot;, &quot;id&quot;: 7 &#125; ], &quot;users&quot;: [ &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;陈五&quot;, &quot;sex&quot;:&quot;male&quot;, &quot;tel&quot;: &quot;12345678&quot;, &quot;auther&quot;:&#123; &quot;name&quot;:&quot;陈五&quot;, &quot;age&quot;:&quot;25&quot; &#125; &#125;, &#123; &quot;id&quot;: 2, &quot;name&quot;: &quot;王二&quot;, &quot;sex&quot;:&quot;male&quot;, &quot;tel&quot;: &quot;15223810923&quot;, &quot;auther&quot;:&#123; &quot;name&quot;:&quot;王二&quot;, &quot;age&quot;:&quot;22&quot; &#125; &#125; ], &quot;user&quot;: &#123; &quot;id&quot;: 1, &quot;name&quot;: &quot;陈五&quot;, &quot;tel&quot;: &quot;15223810923&quot; &#125; , &quot;posts&quot;: [ &#123; &quot;id&quot;: 1, &quot;title&quot;: &quot;json-server&quot;, &quot;author&quot;: &quot;typicode&quot; &#125; ], &quot;comments&quot;: [ &#123; &quot;id&quot;: 1, &quot;body&quot;: &quot;some comment&quot;, &quot;postId&quot;: 1 &#125; ], &quot;profile&quot;: &#123; &quot;name&quot;: &quot;typicode&quot; &#125;, &quot;goods&quot;: &#123; &quot;data&quot; :[ &#123; &quot;price&quot;: &quot;69.9&quot;, &quot;title&quot;: &quot;德芙&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t3688/270/776223567/128582/fa074fb3/58170f6dN6b9a12bf.jpg!q50.jpg.webp&quot; &#125;, &#123; &quot;price&quot;: &quot;63&quot;, &quot;title&quot;: &quot;费列罗&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t613/100/1264998035/221234/1a29d51f/54c34525Nb4f6581c.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;29.9&quot;, &quot;title&quot;: &quot;大米&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t1258/40/17387560/108696/aced445f/54e011deN3ae867ae.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;54.9&quot;, &quot;title&quot;: &quot;安慕希&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t2734/15/680373407/215934/3abaa748/572057daNc09b5da7.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;58&quot;, &quot;title&quot;: &quot;金典&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t2482/145/1424008556/91991/d62f5454/569f47a2N3f763060.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;60&quot;, &quot;title&quot;: &quot;味可滋&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t2368/3/874563950/70786/7b5e8edd/563074c8N4d535db4.jpg!q50.jpg.webp&quot; &#125;, &#123; &quot;price&quot;: &quot;248.00&quot;, &quot;title&quot;: &quot;泸州老窖&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t283/166/1424018055/189580/7c0792b7/543b4958N05fa2feb.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;328.8&quot;, &quot;title&quot;: &quot;剑南春&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s350x350_g15/M05/1A/0A/rBEhWlNeLAwIAAAAAAHyok3PZY0AAMl8gO8My0AAfK6307.jpg!q50.jpg.webp&quot;&#125;, &#123; &quot;price&quot;: &quot;49.00&quot;, &quot;title&quot;: &quot;蓝莓&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/babel/s211x211_jfs/t2332/148/2952098628/94387/e64654e2/56f8d76aNb088c2ab.jpg!q50.jpg.webp&quot; &#125;, &#123; &quot;price&quot;: &quot;68&quot;, &quot;title&quot;: &quot;芒果&quot;, &quot;img&quot;: &quot;http://m.360buyimg.com/n0/jfs/t3709/334/1378702984/206759/5c100ab5/58253588Naaa05c5c.jpg!q70.jpg&quot;&#125; ] &#125; &#125; 运行json-server 1json-server db.json -p 8080 指定rest api在8080端口上运行，使用http://127.0.0.1:8080/goods/查看。 快捷启动为了方便，再创建一个 package.json 文件，写入12345&#123; &quot;scripts&quot;: &#123; &quot;mock&quot;: &quot;json-server db.json --port 3003&quot; &#125;&#125; 然后使用到 /mock 目录下执行 npm run mock 命令，如果成功会出现12345678910111213141516171819202122$ npm run mock&gt; @ mock D:\Git\demo\vue\demo\mock&gt; json-server db.json --port 8080 \&#123;^_^&#125;/ hi! Loading db.json Done Resources http://localhost:8080/list http://localhost:8080/users http://localhost:8080/user http://localhost:8080/posts http://localhost:8080/comments http://localhost:8080/profile http://localhost:8080/goods Home http://localhost:8080 如果不成功请检查 db.json 文件的格式是否正确。 使用本地api代码：123456789created () &#123; /* 这个是vue的钩子函数，当new Vue()实例创建完毕后执行的函数 */ const Http = new Vue; this.$http.get(&apos;http://127.0.0.1:8080/goods&apos;).then((data) =&gt; &#123; /* 调用vue的ajax来请求数据，promise语法，并用es6的箭头函数 */ console.log(&apos;===================================&apos;) console.log(data); console.log(&apos;===================================&apos;) this.items = data.body.data; &#125;)&#125; 但是这样操作会报错,错误如下：这是因为没有引入vue-resource导致的，可以参考Cannot read property ‘get’ of undefined” in vuejs和vue引入vue-resource无法使用$http.get。 最终实现的效果如图： 核心参考文档：https://www.jianshu.com/p/7c5ccfac3fa8 参考https://www.cnblogs.com/itfantasy/p/6043111.htmlhttps://blog.csdn.net/sinat_17775997/article/details/77824878 视频和源码视频共享：链接: https://pan.baidu.com/s/18TFC0-VSCIWFo977p4YcTQ提取码: rjcp 源代码共享：https://gitee.com/marvinma/vue2-pc]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10 上浅尝vue js好记性不如烂笔头之二]]></title>
    <url>%2F2018%2F09%2F02%2Fwindows-vuejs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%2F</url>
    <content type="text"><![CDATA[vuejs学习笔记—-父子组件传值、动态组件、自定义组件、vue-router、vue-link、state简书地址 本片是看视频记录零碎知识点1、使用mustache输出内容时将输入框输入的内容做处理，使用计算属性，不需要使用监听等功能实现。123456789101112export default &#123; data () &#123; return &#123; myValue : &apos;&apos; &#125; &#125;, computed: &#123; checkData () &#123; this.myValue.replace(/\d/g, &apos;&apos;); &#125; &#125;&#125; 使用的地方12&lt;input type=&quot;text&quot; v-model=&quot;myValue&quot;&gt;&#123;&#123; checkData &#125;&#125; 想实现的就是在input输入框输入内容时，后面只显示字母，遇数字相当于隐藏。 当然，还有一种实现方式，就是在methods里写个方法，同时在input后面使用数据检查方法来实现。 那么，这两种方式有什么区别呢？哪种更推荐呢？ 推荐第一种。 2、 父子组件间传值，在vue2.0以上版本，父子组件传值方式如下 举例，父组件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;template&gt; &lt;div&gt; &lt;!-- 参数不区分大小写，也就是最好不要使用驼峰命名，用中线链接即可 --&gt; &lt;!-- 传固定值 --&gt; &lt;!-- &lt;com-a number-to-do=78&gt;&lt;/com-a&gt; --&gt; &lt;!-- 动态传值 --&gt; &lt;input type=&quot;text&quot; v-model=&quot;myVal&quot;&gt; &lt;com-a :my-value = &quot;myVal&quot; @my-event=&quot;getMyEvent&quot;&gt; &lt;p slot=&quot;header&quot;&gt;xxxxx header&lt;/p&gt; &lt;p&gt;1、sloat 使用插槽的方式用来将子组件里的内容插入到父组件中。还可以设定默认值&lt;/p&gt; &lt;p&gt;2、插槽内容比较多的话，可以使用命名的方式指定个字要处理的插槽数据&lt;/p&gt; &lt;p slot=&quot;footer&quot;&gt;xxxxx footer&lt;/p&gt; &lt;/com-a&gt; &lt;p :is=&quot;currentView&quot;&gt;&lt;/p&gt; &lt;/div&gt; &lt;/template&gt;&lt;script&gt;import Vue from &apos;vue&apos;import ComA from &apos;../components/comA&apos;export default &#123; components: &#123; ComA &#125;, data () &#123; return &#123; currentView: &apos;com-a&apos;, myVal : &quot;&quot;, myList: [ &#123; name:&apos;appale&apos;, price: 2.50 &#125;, &#123; name:&apos;banaber&apos;, price:8.50 &#125; ] &#125; &#125;, methods: &#123; getMyEvent(hello) &#123; console.log(&apos;I got my event and &apos; + hello) &#125; &#125;&#125;&lt;/script&gt; 子组件接收参数例子123456789101112131415161718192021222324252627282930313233343536373839404142&lt;template&gt; &lt;div class=&quot;comA&quot;&gt; &#123;&#123; hello &#125;&#125; &#123;&#123; numberToDo&#125;&#125; &lt;button @click=&quot;emitMyEvent&quot;&gt;emit&lt;/button&gt; &lt;!-- slot中间的内容是slot的默认值 --&gt; &lt;slot name = &quot;header&quot;&gt;no slot&lt;/slot&gt; &lt;slot&gt;no slot&lt;/slot&gt; &lt;slot name = &quot;footer&quot;&gt;no slot&lt;/slot&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; // props接收两种类型的参数 // 一种是数组，一种是对象。对象用的比较多，接收时可以限定类型 // props: [&apos;number-to-do&apos;], props: &#123; // &apos;number-to-do&apos;: [Number, String, Object] &apos;my-value&apos;: [Number, String, Object] &#125;, data () &#123; return &#123; hello : &quot;I am component A&quot; &#125; &#125;, methods : &#123; emitMyEvent () &#123; this.$emit(&apos;my-event&apos;, this.hello); &#125; &#125;&#125;&lt;/script&gt;&lt;style&gt;.comA &#123; background-color: antiquewhite;&#125;&lt;/style&gt; 3、动态组件及在template中动态加载需要的组件的功能，比如：123456789101112131415161718192021&lt;template&gt; &lt;div&gt; &lt;input type=&quot;text&quot; v-model=&quot;myVal&quot;&gt; &lt;keep-alive&gt; &lt;p :is=&quot;currentView&quot;&gt;&lt;/p&gt; &lt;/keep-alive&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Vue from &apos;vue&apos;import ComA from &apos;../components/comA&apos;export default &#123; components: &#123; ComA &#125;, data () &#123; return &#123; currentView: &apos;com-a&apos;, &#125; &#125; :is 实现动态组件切换，比如 :is=”currentView” 而在data里给currentView赋值comA。此时可以用keep-alive将组件缓存，比如comA和comB互相切换时会将不显示的内容进行缓存，提高切换时显示速度。 4、css阶段类名123456789101112131415161718192021222324252627282930313233343536 &lt;button v-on:click=&quot;show = !show&quot;&gt; Toggle &lt;/button&gt; &lt;!-- &lt;p v-color=&quot;&apos;red&apos;&quot;&gt;Hello World&lt;/p&gt; --&gt; &lt;div class=&quot;ab&quot;&gt; &lt;transition name=&quot;fade&quot;&gt; &lt;p v-show=&quot;show&quot;&gt;透明切换效果&lt;/p&gt; &lt;/transition&gt; &lt;transition name=&quot;my-trans&quot;&gt; &lt;p v-show=&quot;show&quot;&gt;上入下出动画&lt;/p&gt; &lt;/transition&gt; &lt;/div&gt;&lt;style&gt;.fade-enter-active, .fade-leave-active &#123; /* opacity是透明度的意思，如果是所有属性都要transition，要将opacity改成all */ transition: opacity .5s;&#125;.fade-enter, .fade-leave &#123; opacity: 0;&#125;.my-trans-enter-active, .my-trans-leave-active &#123; transition: all 0.5s ease-out;&#125;.my-trans-enter &#123; transform: translateY(-500px); opacity: 0;&#125;.my-trans-leave-active &#123; transform: translateY(500px); opacity: 0;&#125;&lt;/style&gt; enter-active前面的名字就是name前面的名字。该处的演示元素用的是p标签，其实可以是一个div，也可以是一个component，实现动态组件过渡。transition 默认的mode是in-out，也可以改成out-in，也就是新的出来的实现和旧的消失的时机问题。 5、元素/组件进入/离开 &amp; 列表过渡官网123456789101112&lt;button v-on:click=&quot;show = !show&quot;&gt; 进入/离开过渡动画 &lt;/button&gt;&lt;div class=&quot;ab&quot;&gt; &lt;transition @before-enter=&quot;beforeEnter&quot; @enter=&quot;enter&quot; @leave=&quot;leave&quot; :css=&quot;false&quot;&gt; &lt;p class=&quot;animate-p&quot; v-show=&quot;show&quot;&gt;I am show&lt;/p&gt; &lt;/transition&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829methods: &#123; getMyEvent(hello) &#123; console.log(&apos;I got my event and &apos; + hello) &#125;, beforeEnter: (el) =&gt; &#123; $(el).css(&#123; left:&apos;-500px&apos;, opacity:0 &#125;); &#125;, enter: function(el, done) &#123; $(el).animate(&#123; left:0, opacity:1 &#125;, &#123; duration: 1500, complete: done &#125;); &#125;, leave: function(el, done) &#123; $(el).animate(&#123; left: &apos;500px&apos;, opacity:0 &#125;, &#123; duration:1500, complete:done &#125;) &#125; &#125; 6、自定义指令自定义指令function使用direactives来定义，与data，method等平行。使用时是’v-xxx’的形式，后面的xxx与directives里的function名要一致。1&lt;p v-color=&quot;&apos;red&apos;&quot;&gt;v-xxx 的自定义指令&lt;/p&gt; 12345directives: &#123; color: function(el, binding) &#123; el.style.color = binding.value &#125;&#125; 这是在组件内部，也就是说v-color指令只能在这个组件内使用。那么，怎么定一个全局的指令，可以在所有组件内使用呢？答案是将此定义放在Vue实例化的地方，比如main.js里面。 7、vue-cli 脚手架的安装和使用 8、cnpm的使用 9、vue-router添加子组件注意一点，如果路由有子路由，比如http://localhost:3000/apple/ 和http://localhost:3000/apple/red，其中第二是就是第一个的子路由，路由代码是这样的12345678910&#123; path: &apos;/apple&apos;, component: Apple, children: [ &#123; path: &apos;red&apos;, component: RedApple &#125; ] &#125;, 这时候如果要让red这个子路由生效，必须在apple这个父组件中也使用&lt;router-view&gt;&lt;/router-view&gt;,才能打包目的，apple/red才能渲染出redapple中的内容 apple.vue文件的内容：12345678&lt;template&gt; &lt;div class=&quot;content&quot;&gt; &lt;img class=&quot;img&quot; src=&quot;../assets/apple.jpg&quot; alt=&quot;appale&quot;&gt; &lt;button @click=&quot;getParam&quot;&gt;get route param&lt;/button&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt; &lt;/template&gt; 10、vue-link这个组件也是设置路由用的，可以绑定需要跳转的地址，用法如下：12345&lt;router-link :to=&quot;&#123;name: &apos;applePage&apos;&#125;&quot;&gt;&lt;/router-link&gt;&lt;router-link :to=&quot;&apos;goods&apos;&quot;&gt; to goodsList &lt;/router-link&gt;&lt;router-link :to=&quot;&#123;path : &apos;banana&apos;, param:&#123;color:&apos;yellow&apos;&#125;&#125;&quot;&gt; to banana &lt;/router-link&gt;&lt;router-link :to=&quot;&#123;path : &apos;apple/red&apos;&#125;&quot;&gt; to red apple &lt;/router-link&gt;&lt;router-link :to=&quot;goodsDetail&quot;&gt; to goods detail &lt;/router-link&gt; 上面的applePage和goods是要在data里定义的，不然是会报错的。当然，这个是在入口的App.vue里，因为跳转地址都是根路径。什么意思呢？举个例子，如果这段代码在apple.vue这个类中，页面如下： 那这些按钮点下去以后url会变成什么呢?比如第一个goodsList，就会是这样： 可以看到，在路由的前面都有一个apple这个路径。 其他看vue-route官网吧 命名路由命名路由是指在route-view标签上指定组件名称，比如12&lt;router-view name=&quot;viewA&quot;&gt;&lt;/router-view&gt;&lt;router-view name=&quot;viewB&quot;&gt;&lt;/router-view&gt; 响应的在router里指定组件就可以：12345678910111213&#123; path: &apos;/apple&apos;, component: &#123; viewA: Apple, viewB: RedApple &#125;, children: [ &#123; path: &apos;red&apos;, component: RedApple &#125; ] &#125;, 这样匹配来用。 重定向目标：访问根目录是自动访问apple这个路径。1234&#123; path: &apos;/&apos;, redirect: &apos;apple&apos;&#125; 11、 vuex – 官网vuex是状态管理插件。将组件之间共享的状态，公用型内容的改动等使用统一的状态管理插件起来。 数据状态管理模式图： flux:状态管理实现流程： action和mutatons的区别，munation本身可以修改state的值，但是为什么还要通过action来处理呢？因为action这一步可以加比如异步、网络请求等这样的实现逻辑，而mutation只能是同步的，也不能在其中发出http请求。 vuex常用的有state，muntions，getters，actions，modules这几个核心的concepts，更详细的请参考官网. 示例代码：vuex.vue入口文件12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;p&gt; state 总价: &#123;&#123; totalPrice &#125;&#125;&lt;/p&gt; &lt;dog&gt;&lt;/dog&gt; &lt;cat&gt;&lt;/cat&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Dog from &apos;../components/dog&apos;import Cat from &apos;../components/cat&apos;export default &#123; data () &#123; return &#123; msg : &apos;vuex demo&apos; &#125; &#125;, components: &#123; Dog, Cat &#125;, computed: &#123; totalPrice() &#123; return this.$store.getters.getTotal //vuex實現了getter方法，因此不推荐直接从state中拿属性的值 // return this.$store.state.totalPrice &#125; &#125;&#125;&lt;/script&gt; 包括的两个子组件dog.vue1234567891011121314151617181920212223242526&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;button @click=&quot;addOne&quot;&gt;add one&lt;/button&gt; &lt;button @click=&quot;minusOne&quot;&gt;minus one&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; msg : &apos;I am a dog, each of me is 5$. &apos;, price: 5 &#125; &#125;, methods: &#123; addOne() &#123; this.$store.commit(&apos;increment&apos;, this.price) &#125;, minusOne() &#123; this.$store.commit(&apos;decrement&apos;, this.price) &#125; &#125;&#125;&lt;/script&gt; 和cat.vue1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div&gt; &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt; &lt;button @click=&quot;addOne&quot;&gt;add one&lt;/button&gt; &lt;button @click=&quot;minusOne&quot;&gt;minus one&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; return &#123; msg : &apos;I am a dog, each of me is 15$. &apos;, price: 15 &#125; &#125;, methods: &#123; addOne() &#123; //推荐使用action调用mutation的方式 this.$store.dispatch(&apos;increase&apos;, this.price) //不推荐使用下面的直接调用mutations方法的方式 // this.$store.commit(&apos;increment&apos;, this.price) &#125;, minusOne() &#123; this.$store.commit(&apos;decrement&apos;, this.price) &#125; &#125;&#125;&lt;/script&gt; 实现的效果： 视频和源码视频共享：链接: https://pan.baidu.com/s/18TFC0-VSCIWFo977p4YcTQ提取码: rjcp 源代码共享：https://gitee.com/marvinma/vue2-pc]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows上安装nvm-node版本管理工具各种坎]]></title>
    <url>%2F2018%2F09%2F02%2Fwindows%E4%B8%8A%E5%AE%89%E8%A3%85nvm-node%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%90%84%E7%A7%8D%E5%9D%8E%2F</url>
    <content type="text"><![CDATA[nodejs版本管理工具在windows环境上安装和使用简书地址 前言在github上fork了一个vue管理后台的项目，npm install的时候提示node 要用8.10及以上版本。但是我正在管理的项目用的又是8.9，跟别的前端同事聊天无意中才知道node还有专门的版本管理工具，说是npm install n 就行，于是上班去试了一把。 正题不试不要紧，一试就开心了，一开始用的npm install -g n 原来，windows上没有，windows上叫做nvm，下载地址：https://github.com/coreybutler/nvm-windows/releases 安装参考：https://blog.csdn.net/sinat_38334334/article/details/80013648 碰到的坑：1、 安装上只好执行nvm use 8.10.0 提示错误，不能使用。 最后才查到nvm安装在C:\Program Files\nvm下，路径下有空格导致的。这一点在文章最后有说明。 2、解决了以后又变成： 这是git这个命令行的问题，原因不细究了，用系统自带的命令行管理工具可以执行。 3、然后就可以使用了 可以安装别的版本了，美滋滋 文章最后再抄点使用命令时注意点 请用管理员身份运行命令管理器，否则可能出错。 先设置node和npm的淘宝镜像，这样成功率和下载速度会更高点。用途1：主要用途，切换nodejs版本。如果想使用最新的流行版本测试您正在开发的模块，而不用卸载稳定版本的node，则可以使用nvm来切换nodejs版本。 注意点 1、nvm安装目录，最好不要存在空格。否则，nvm可以安装成功，但使用nvm use x.y.z（nodejs的切换）会有问题。 2、有些全局的npm模块，可能在各版本的node.js之间不共享。 3、你正在使用的node.js版本中可能不支持某些npm模块。因此在工作的时候请注意工作环境。 参考windows上NVM安装与使用]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>tools</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 安装maven，jenkins持续集成]]></title>
    <url>%2F2018%2F08%2F14%2FLinux%20%E5%AE%89%E8%A3%85maven%EF%BC%8Cjenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[开发环境搭建—安装maven和jenkins持续集成简书地址 1、安装maven1.1、 创建一个maven文件夹，解压maven文件12345[root@1169CKT ~]# cd /home/haieradmin/softs/[root@1169CKT softs]# lsapache-maven-3.5.2-bin.tar.gz apache-tomcat-8.5.24.tar.gz jdk-8u151-linux-x64.tar.gz mysql57-community-release-el7-8.noarch.rpm nginx-1.12.2.tar.gz redis-4.0.6.tar.gz[root@1169CKT softs]# mkdir /usr/local/maven[root@1169CKT softs]# tar -zxvf apache-maven-3.5.2-bin.tar.gz -C /usr/local/maven/ 1.2、设置环境变量，在/etc/profile的文件末尾添加以下配置:12export M2_HOME=/usr/local/maven/apache-maven-3.5.2export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$M2_HOME/bin:$PATH 执行source命令让新配置立即生效:12[root@1169CKT softs]# source /etc/profile[root@1169CKT softs]# 1.3、验证12345678[root@1169CKT softs]# mvn -vApache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T15:58:13+08:00)Maven home: /usr/local/maven/apache-maven-3.5.2Java version: 1.8.0_151, vendor: Oracle CorporationJava home: /usr/local/java/jdk1.8.0_151/jreDefault locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;3.10.0-693.el7.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;[root@1169CKT softs]# 2、安装jenkins安装jenkins简单来说需要下面四步：1234wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -sudo sh -c &apos;echo deb http://pkg.jenkins.io/debian-stable binary/ &gt; /etc/apt/sources.list.d/jenkins.list&apos;sudo apt-get updatesudo apt-get install jenkins 2.1、 安装简介: 1、通过上面的安装，Jenkins将作为一个Linux守护进程，可以查看文件/etc/init.d/jenkins2、创建一个名为Jenkins的Linux用户3、生成日志文件 /var/log/jenkins/jenkins.log4、Jenkins 默认端口是8080，在配置文件/etc/default/jenkins 中定义。 install plugins started 设置用户名密码:admin/admin123 启动后访问： 2.2、 配置权限 git代码库授权配置问题，需要配置ssh免密码登录，注意，必须是jenkins用户的授权，不是root用户如果ssh或者scp时遇到错误类似如下：ssh_exchange_identification: read: Connection reset by peer那就是需要设置访问IP的白名单，具体操作步骤如下：黑名单cat /etc/hosts.deny白名单cat /etc/hosts.allow加上需要访问本机的服务器ip地址，保存即可。如果ssh到其他服务器出现centos ssh: connect to host 10.138.227.188 port 22: No route to host的错误，测需要在目标服务器上配置22端口的防火墙白名单，如果是firewall，执行如下命令12firewall-cmd --permanent --add-port=22/tcpfirewall-cmd --reload 授权配置正确以后的样子大概是这样的 123ssh-keygen -t rsa #生成key cd /var/lib/jenkins/.ssh #如果没有创建jenkins home的话，可以上jenkins的全局设置里查看jenkins主目录，然后查看ssh路径scp -r /root/.ssh/id_rsa.pub 192.168.31.147:/root/.ssh/authorized_keys 如果jenkins启动时最后提示找不到JAVA_HOME，如下图所示， 这个情况需要再tomcat的bin目录下找到setclasspath.sh文件，添加上JAVA_HOME目录。 添加123JAVA_HOME=/usr/local/java/jdk1.8.0_151JRE_HOME=/usr/local/java/jdk1.8.0_151/jre 2.3、jenkins构建里的一些命令： 12345#删除阿里云服务器中部署的包ssh -p 22 root@x.x.x.x &apos;bash -x -s&apos; &lt; /opt/auto-deploy-scripts/remove-aliyun-questionnaire-test.sh#使用scp命令把jenkins最新Build的包传送到阿里云服务器1中scp -P 22 /var/lib/jenkins/workspace/chuangke_testserver_auto_deploy/target/questionnaire.war root@x.x.x.x:/opt/tomcat8_test/webappsssh -p 22 root@x.x.x.x &apos;bash -x -s&apos; &lt; /opt/auto-deploy-scripts/start_tomcat8_test.sh 两个脚本：remove-aliyun-questionnaire-test.sh12345678910#!/bin/bashtomcat_pid=`ps -ef | grep tomcat | grep test| grep -v grep | awk &apos;&#123;print $2&#125;&apos;`[ -n &quot;$tomcat_pid&quot; ] &amp;&amp; kill -9 $tomcat_pidrm -rf /opt/tomcat8_test/webapps/questionnaire*rm -rf /opt/tomcat8_test/logs/localhost*rm -rf /opt/tomcat8_test/logs/host-manager*rm -rf /opt/tomcat8_test/logs/manager*rm -rf /opt/tomcat8_test/logs/catalina.outrm -rf /opt/tomcat8_test/work/Catalina/* start_tomcat8_test.sh12#!/bin/bash/opt/tomcat8_test/bin/startup.sh 如果是直接在jenkins 的Execute Shell里执行脚本，脚本在当前服务器，给当前服务器执行命令，则如下写法。 12345sleep 200echo &quot;--------begin deploy webservice --------&quot;date/opt/c2m_scripts/backup_last_month_logs.shrm -rf /mnt/jenkins/jenkins_home/workspace/aliyun-testServer1-c2mwebservice-deploy-for-dev-test/c2mwebservice/target/c2mwebservice.war 2.5、配置邮件通知 以上是最简单的邮件配置，当构建出错是会发邮件。如果要修改发出的邮件的通知内容，或有更加复杂的操作，可以使用Email Extension Plugin插件进行配置。 如果用腾讯企业邮箱的话，配置如下： 备注：如果你用jenkins给本机部署应用，比如运行一个jar包，也许会发生的一件事，那就是jenkins部署没有报错，但是java -jar后的应用还没启动自己就死了。这是因为默认不允许运行jenkins的衍生进程导致的，如果是远端服务器就没有问题，如果是本地运行，需要按照如下地址的说明配置一下。 jenkins中通过execute shell启动的进程会被杀死的问题 参考Centos7中安装最新版maven3.5.0How To Install Jenkins on Ubuntu 16.04centos7下安装jenkins]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 修改主机名、添加用户、安装jdk、安装mysql、安装redis]]></title>
    <url>%2F2018%2F08%2F12%2FLinux%20%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%E3%80%81%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E3%80%81%E5%AE%89%E8%A3%85jdk%E3%80%81%E5%AE%89%E8%A3%85mysql%E3%80%81%E5%AE%89%E8%A3%85redis%2F</url>
    <content type="text"><![CDATA[开发环境搭建—修改主机名、添加用户、安装jdk、安装mysql、安装redis简书地址 1、修改主机名【vi /etc/hostname】编辑上你要起的名字即可。12345678910[root@localhost ~]# hostnamectl --static set-hostname Linuxidc# 重启CentOS 7 之后（reboot -f ），[root@Linuxidc ~]# hostnamectl --staticLinuxidc[root@Hunk_zhu ~]# hostnamectl --transientLinuxidc[root@Hunk_zhu ~]# hostnamectl --prettyLinuxidc[root@Hunk_zhu ~]# hostnamehostnamectl --static set-hostname testServer 2、添加用户useradd dev passwd dev 输入密码Ecs201703，创建成功。 赋予root权限： 然后给dev加上同root一样的如下一行，保存。 ubuntu中管理用户和用户组 添加一个用户组并指定id为1002 sudo groupadd －g 1002 www 添加一个用户到www组并指定id为1003 sudo useradd wyx -g 1002 -u 1003 -m 修改用户的密码 sudo passwd wyx 删除一个用户 sudo userdel wyx 为该用户添加sudo权限 123sudo usermod -a -G adm wyxsudo usermod -a -G sudo wyx 查看所有用户和用户组： 123cat /etc/passwdcat /etc/group 3、安装JDK1.8 在线安装openjdk 1sudo apt-get install openjdk-8-jdk&lt;/pre&gt;&lt;/wiz_code_mirror&gt; 如果安装时报错，执行【 sudo apt-get update 】命令后再执行上面的命令。 在配置classpath即可。 手动安装教程 1、源码包准备： 首先到官网下载jdk-8u66-linux-x64.tar.gz， http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 或者使用命令下载1wget https://download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.tar.gz 2、解压源码包 通过终端在/usr/local目录下新建java文件夹，命令行： 1sudo mkdir /usr/local/java 然后将下载到压缩包拷贝到java文件夹中，命令行： 进入jdk源码包所在目录 1cp jdk-8u66-linux-x64.tar.gz /usr/local/java 然后进入java目录，命令行： 1cd /usr/local/java 解压压缩包，命令行： 1sudo tar zxvf jdk-8u66-linux-x64.tar.gz 然后可以把压缩包删除，命令行： 1sudo rm jdk-8u66-linux-x64.tar.gz 3、设置jdk环境变量这里采用全局设置方法，就是修改etc/profile，它是是所有用户的共用的环境变量1vi /etc/profile 打开之后在末尾添加123456789JAVA_HOME=/usr/local/java/jdk1.8.0_66JRE_HOME=/usr/local/java/jdk1.8.0_66/jreCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$JAVA_HOME/bin:$PATHexport PATH JAVA_HOME CLASSPATH 使环境变量生效1source /etc/profile 看看自己的配置是否都正确 1echo $JAVA_HOME echo $CLASSPATH echo $PATH 4、修改默认JDK 如果系统已经安装了其他版本的Java 123456789JAVA_HOME=/usr/local/java/jdk1.8.0_66JRE_HOME=/usr/local/java/jdk1.8.0_66/jreCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libPATH=$JAVA_HOME/bin:$PATHexport PATH JAVA_HOME CLASSPATH 5、检验是否安装成功 在终端1java -version 看看是否安装成功，成功则显示如下123java version &quot;1.8.0_66&quot;Java(TM) SE Runtime Environment (build 1.8.0_66-b17)Java HotSpot(TM) 64-Bit Server VM (build 25.65-b01, mixed mode) 4、Ubuntu 16.04 安装mysql并设置远程访问1sudo apt-get install mysql-server Linux新手入门：Unable to locate package错误解决办法 最近刚开始接触Linux，在虚拟机中装了个Ubuntu，当前的版本是Ubuntu 11.10，装好后自然少不了安装一些软件，在设置了软件的源后，就开始了 sudo apt-get install，结果出现了下面的Unable to locate package错误： letuknowit@ubuntu:~$ sudo apt-get install mysql-server mysql-client [sudo] password for letuknowit: Reading package lists… Done Building dependency tree Reading state information… Done E: Unable to locate package mysql-server E: Unable to locate package mysql-client letuknowit@ubuntu:~$ 这叫一个郁闷啊，出师不利，不带这么吓唬刚玩Ubuntu的小朋友吧~于是赶紧找资料，又回顾下前面的操作，最后发现问题出在执行sudo apt-get install之前更换了软件源，但是却忘了update下了，于是执行下面的命令： sudo apt-get update 等上面命令执行完后，再执行sudo apt-get install就可以了！其实错误信息已经很明确了，Unable to locate packet就是无法找到包嘛，那还不赶紧sudo apt-get update下！ 说明： 一个朋友在使用ubuntu-server 16.04安装mysql，设置远程访问的时候出现了问题，请我帮忙。但是，我也没有使用过ubuntu安装mysql，于是乎搜索了很多技术文件，比着葫芦画瓢。但是，由于mysql版本的差异，导致在安装设置的过程中出现了一些问题：就是不能远程访问。 一、安装mysql 1. 安装需要使用root账号，如果不会设置root账号的请自行google。安装mysql过程中，需要设置mysql的root账号的密码，不要忽略了。1sudo apt-get install mysql 在centOS上执行命令可能碰到找不到mysql-server的情况，想下面这样：12345678910[azq@localhost ~]$ sudo yum install mysql-server已加载插件：fastestmirror, langpacksLoading mirror speeds from cached hostfile* base: mirrors.163.com* extras: mirrors.163.com* updates: centos.ustc.edu.cn没有可用软件包 mysql-server。 此时参考解决CentOS7下yum install mysql-server没有可用包的问可解决。 2. 以上3个软件包安装完成后，使用如下命令查询是否安装成功： 1sudo netstat -tap | grep mysql 查询结果如下图所示，表示安装成功。 123root@xyz:~# netstat -tap | grep mysqltcp6 0 0 [::]:mysql [::]:* LISTEN 7510/mysqld root@xyz:~# 二、设置mysql远程访问 1. 编辑mysql配置文件，把其中bind-address = 127.0.0.1注释了 1vi /etc/mysql/mysql.conf.d/mysqld.cnf 2. 使用root进入mysql命令行[mysql -uroot -p]，执行如下2个命令，示例中mysql的root账号密码：root 12grant all on *.* to root@&apos;%&apos; identified by &apos;root&apos; with grant option;flush privileges; 重启mysql 1/etc/init.d/mysql restart 重启成功后，在其他计算机上，便可以登录。 备注：如果修改密码时提示没有password字段的错误，应该用下面的命令： 1update mysql.user set authentication_string=password(&apos;root&apos;) where user=&apos;root&apos; ; 远程登录，有如下错误提示 解决办法： 在服务器上用【mysql -uroot -p】命令输入密码登录， 然后执行下面的两条命令12GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;QDyy201703&apos; WITH GRANT OPTION; FLUSH PRIVILEGES; 如下： 完美解决mysql服务问题。 本地命令行连接远程mysql server 进入命令行，连接： mysql -u 用户名 -p密码 -h 服务器IP地址 -P 服务器端MySQL端口号 -D 数据库名 注意： (1)服务器端口标志-P一定要大些以区别于用户-p,如果直接连接数据库标志-D也要大写； (2)如果要直接输入密码-p后面不能留有空格如-pmypassword; (3)命令结束段没有&apos;;&apos;分号。 例子： mysql -u lzpddd -pmypassword -h 192.168.1.88 -P 3306 -D mydb 5、安装redis1、 从http://redis.io/ 下载redis-3.2.4.tar.gz 2、 上传到linux后移动到/opt/redis目录下 3、 解压 sudo tar -zxvf redis-3.2.4.tar.gz 4、 进入解压后的文件夹进行编译 make 5、 安装 make install 6、 测试一下 make test 报错缺少tcl （tcl 是一种解译语言，也是一套 C 的函式库） 安装tcl apt-get install tcl 报错Executing test client: NOREPLICAS Not enoughgood slaves to write.. 修改文件tests/integration/replication-2.tcl，将after 1000改为after 10000以延长等待时间。 报错[err]: Server is able to generate a stack trace on selected systems in tests/integration/logging. 只是某个测试没有通过，可以忽略。 7、创建Redis配置目录 /etc/redis mkdir /etc/redis8、拷贝配置文件： cp /opt/redis/redis-3.2.4/redis.conf/ /etc/redis9、编辑配置文件（暂未编辑） 修改端口、配置数据库保存目录、其它10、（1）通过指定配置文件启动； redis-server /etc/redis/redis.conf （2）通过命令redis-server 启动，可在命令后加上&amp;号使redis以后台程序方式运行； redis-server &amp;11、客户端登陆 redis-cli12、关闭Redis服务 redis-cli shutdown 设置redis开机启动 修改redis.conf（/etc/redis下） #打开后台运行选项 daemonize yes #设置日志文件路径 logfile &quot;/var/log/redis/redis.log&quot; 编写脚本 vim /etc/init.d/redis 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#!/bin/sh# chkconfig: 2345 10 90# description: Start and Stop redis PATH=/usr/local/binREDISPORT=6379EXEC=/usr/local/bin/redis-serverREDIS_CLI=/usr/local/bin/redis-cliPIDFILE=/var/run/redis.pidCONF=&quot;/etc/redis/redis.conf&quot; case &quot;$1&quot; in start) if [ -f $PIDFILE ] then echo &quot;$PIDFILE exists, process is already running or crashed.&quot; else echo &quot;Starting Redis server...&quot; $EXEC $CONF fi if [ &quot;$?&quot;=&quot;0&quot; ] then echo &quot;Redis is running...&quot; fi ;; stop) if [ ! -f $PIDFILE ] then echo &quot;$PIDFILE exists, process is not running.&quot; else PID=$(cat $PIDFILE) echo &quot;Stopping...&quot; $REDIS_CLI -p $REDISPORT SHUTDOWN while [ -x $PIDFILE ] do echo &quot;Waiting for Redis to shutdown...&quot; sleep 1 done echo &quot;Redis stopped&quot; fi ;; restart|force-reload) $&#123;0&#125; stop $&#123;0&#125; start ;; *) echo &quot;Usage: /etc/init.d/redis &#123;start|stop|restart|fore-reload&#125;&quot; exit 1esac 添加脚本的执行权限 sudo chmod +x /etc/init.d/redis设置开机自动启动 sudo update-rc.d redis defaults 报错： 上面为两个错误 第一个参考https://my.oschina.net/u/943306/blog/345923 解决方法：安装一个中文语言，系统就知道zh_CN.UTF-8了，这个时候用perl就不会报错了 apt-get install language-pack-zh-hans 第二个参考：http://bashell.nodemedia.cn/archives/directspace-debian-6-vps-vzquota-missing.html 解决方法：编辑/etc/init.d/redis 在文件头部#!/bin/sh下面添加 ### BEGIN INIT INFO # Provides: OSSEC HIDS # Required-Start: $network $remote_fs $syslog $time # Required-Stop: # Default-Start: 2 3 4 5 # Default-Stop: 0 1 6 # Short-Description: OSSEC HIDS ### END INIT INFO 使用脚本启动服务 开启redis： service redis start 停止redis： service redis stop 重启redis： service redis restart 查看服务状态：service redis status最后将机器关机，重新启动 此时redis服务也启动了。 参考ubuntu永久修改主机名Ubuntu 16.04 安装mysql并设置远程访问ubuntu中管理用户和用户组CentOS7 64位下MySQL5.7安装与配置Centos 7.4 安装 Redis 全过程]]></content>
      <categories>
        <category>开发环境搭建</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Springboot 之 自定义方法参数解析器]]></title>
    <url>%2F2018%2F08%2F02%2FSpringboot%20%E4%B9%8B%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8%2F</url>
    <content type="text"><![CDATA[使用spring的自定义方法参数解析器获取当前用户的demo。简书地址 昨天（2018-08-01）我同事Damon在分享Spring AOP注解失效的主题上，顺带着介绍了下《自定义方法参数解析器》的使用，个人觉得还挺有用的，再次记录一下，以后用的时候好查。 场景一个业务场景，最近微信小程序如日中天，大有一发不可收拾之局势，我司新接的一些业务也是趁热打铁以微信小程序的形式公诸于世，因此也有了这个场景。 与之前玩APP不一样了，之前的app用户注册，基本上都是手机号+验证码的形式，也就是说用户上来都有手机号登录的过程，登陆以后放回token，访问替他页面会带着这个token，后台也就通过token识别出这个用户是谁了。 现在小程序，自然是微信登录最方便，而且不用麻烦用户再绑定手机号，那么就会有一个用户唯一标识的问题，这就是微信提供的openId，我们现在的做法就是在所有要请求的接口上在head里都带着这个openId，后台通过这个openId检查是新用户还是老用户，用户的信息也就相应的拿到了。 业务处理举个例子，前端请求是这样的： 1、各自接口分别处理在需要判读当前用户是谁的接口逻辑里分别加上，本次实验，放在controller层，实际写代码时下面的逻辑应该在service代码里实现。1234567891011121314@GetMapping(&quot;/public/api/demo1&quot;) public Object getUser1(HttpServletRequest request) &#123; String mobile = request.getHeader(&quot;openId&quot;); CurrentUser currentUser = (CurrentUser) redisService.find(mobile); if(currentUser == null)&#123; List&lt;HaierUser&gt; userList = userRepository.findByMobileAndUserState(mobile, &quot;1&quot;); if(userList.size() &gt; 0 )&#123; currentUser = new CurrentUser(); BeanUtils.copyProperties(userList.get(0), currentUser); redisService.add(mobile, currentUser); &#125; &#125; return new RtnResult&lt;&gt;(currentUser); &#125; 结果： 2、自定义方法参数解析器实现先定义一个方法参数解析器12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import com.hczt.haier.db.user.entity.HaierUser;import com.hczt.haier.db.user.repository.HaierUserRepository;import com.hczt.haier.mobileoffice.usercenter.service.api.RedisService;import org.springframework.beans.BeanUtils;import org.springframework.core.MethodParameter;import org.springframework.stereotype.Component;import org.springframework.web.bind.support.WebDataBinderFactory;import org.springframework.web.context.request.NativeWebRequest;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.method.support.ModelAndViewContainer;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import java.util.List;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-08-03 14:38 * @desc 方法参数解析器 * 使用 **/@Componentpublic class CurrentUserArgumentResolver implements HandlerMethodArgumentResolver &#123; @Resource private RedisService redisService; @Resource private HaierUserRepository userRepository; @Override public boolean supportsParameter(MethodParameter methodParameter) &#123; return methodParameter.getParameterType().equals(CurrentUser.class); &#125; @Override public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception &#123; HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class); String openId = request.getHeader(&quot;openId&quot;); CurrentUser currentUser = (CurrentUser) redisService.find(openId); if(currentUser == null)&#123; List&lt;HaierUser&gt; userList = userRepository.findByMobileAndUserState(openId, &quot;1&quot;); if(userList.size() &gt; 0 )&#123; currentUser = new CurrentUser(); BeanUtils.copyProperties(userList.get(0), currentUser); redisService.add(openId, currentUser); &#125; &#125; return currentUser; &#125;&#125; 别忘了要将自定义的参数解析器配置到spring容器中，新建一个config类，继承WebMvcConfigurationSupport,，内容如下：12345678910111213141516171819202122232425262728293031323334353637383940414243import org.springframework.context.annotation.Configuration;import org.springframework.data.web.PageableHandlerMethodArgumentResolver;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;import javax.annotation.Resource;import java.util.List;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-08-03 16:23 * @desc $&#123;DESCRIPTION&#125; **/@Configurationpublic class WebConfig extends WebMvcConfigurationSupport &#123; @Resource private CurrentUserArgumentResolver currentUserArgumentResolver; @Override protected void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers) &#123; argumentResolvers.add(currentUserArgumentResolver); // 注册Spring data jpa pageable的参数分解器 argumentResolvers.add(new PageableHandlerMethodArgumentResolver()); &#125; // swagger2 访问 @Override public void addResourceHandlers(ResourceHandlerRegistry registry) &#123; registry.addResourceHandler(&quot;swagger-ui.html&quot;) .addResourceLocations(&quot;classpath:/META-INF/resources/&quot;); registry.addResourceHandler(&quot;/**&quot;).addResourceLocations(&quot;classpath:/static/&quot;); registry.addResourceHandler(&quot;/webjars/**&quot;) .addResourceLocations(&quot;classpath:/META-INF/resources/webjars/&quot;); super.addResourceHandlers(registry); &#125;&#125; 然后访问的controller里接收current这个参数，将变得如此简单：12345@GetMapping(&quot;/public/api/demo2&quot;)public Object getUser2(CurrentUser currentUser) &#123; System.out.println(currentUser); return new RtnResult&lt;&gt;(currentUser);&#125; 检测结果 贴上Current类：123456789101112131415161718192021222324252627282930313233343536373839404142434445import lombok.Data;import lombok.ToString;import java.io.Serializable;/** * * @Auther: marvin.mma * @Date: 2018/8/3 14:38 * @return */@Data@ToStringpublic class CurrentUser implements Serializable&#123; private static final long serialVersionUID = 1L; private String userId; /** * 手机号 */ private String mobile; /** * 邮箱 */ private String mail; /** * 用户工牌号 */ private String cardNo; /** * 用户姓名 */ private String fullName; /** * 用户姓名拼音 */ private String fullNamePinyin;&#125; 注意事项1、为什么不用拦截器或者过滤器？拦截器或者过滤器都能实现获取request的header的openId，也能校验redis和数据库中有没有该数据，没有的话新建到数据库或者redis中，但是就是返回一个对象实现起来麻烦一些。上重点了，最主要是不是每个接口都需要根据openId获取用户信息，这样的话拦截器就有点多余了，配置哪些需要哪些不需要又太麻烦。所以使用方法参数解析器最合适了。 2、自定的方法参数解析器要创建一个继承WebMvcConfigurationSupport的配置类，然后添加到解析器中，否则是不会生效的。 3、在使用spring-data-jpa的框架里，因为使用了自定义解析器，导致了自带分分页不好使的问题，其原因是自定义解析器以后，往 HandlerMethodArgumentResolver里面添加了什么解析器，容器就有了什么解析器，没添加的不会默认添加了，因此需要手动添加,就是下面这样的意思1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import java.io.IOException;import java.util.List;import org.springframework.context.annotation.Configuration;import org.springframework.data.web.PageableHandlerMethodArgumentResolver;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.http.converter.StringHttpMessageConverter;import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;import org.springframework.web.method.support.HandlerMethodArgumentResolver;import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.JsonSerializer;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializerProvider;import com.fasterxml.jackson.databind.module.SimpleModule;import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;/** * * @Auther: marvin.mma * @Date: 2018/8/3 16:38 * @return */@Configurationpublic class WebConfig extends WebMvcConfigurationSupport &#123; @Override protected void addArgumentResolvers(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers) &#123; // 注册Spring data jpa pageable的参数分解器 argumentResolvers.add(new PageableHandlerMethodArgumentResolver()); &#125; @Override protected void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; MappingJackson2HttpMessageConverter jackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter(); ObjectMapper objectMapper = new ObjectMapper(); /** * 序列换成json时,将所有的long变成string * 因为js中得数字类型不能包含所有的java long值 */ SimpleModule simpleModule = new SimpleModule(); simpleModule.addSerializer(Long.class, ToStringSerializer.instance); simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance); objectMapper.registerModule(simpleModule); // 将返回值null处理成空值 SerializerProvider serializerProvider = objectMapper.getSerializerProvider(); serializerProvider.setNullValueSerializer(new JsonSerializer&lt;Object&gt;() &#123; @Override public void serialize(Object o, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException, JsonProcessingException &#123; jsonGenerator.writeString(&quot;&quot;); &#125; &#125;); jackson2HttpMessageConverter.setObjectMapper(objectMapper); converters.add(jackson2HttpMessageConverter); converters.add(new StringHttpMessageConverter());// super.configureMessageConverters(converters); &#125;&#125; 该配置文件增加了两个json转换处理，顺便贴出来，知道在哪加怎么加就行，跟本文无关。 4、此处是以手机号举例的，实际生产中，视情况而定。 5、关于注解不生效的问题，Damon主要以Asyc和Transactional为例说明的，但是就其不生效的原因，玩转Spring —— 消失的事务基本上讲明白了。 完美~~~]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker学习案例：用docker部署mysql服务]]></title>
    <url>%2F2018%2F07%2F25%2Fdocker%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8docker%E9%83%A8%E7%BD%B2mysql%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[docker实际案例之在centOS7.4上用docker部署mysql服务简书地址 一、使用docker run命令直接启动一个mysql容器1.1 下载官方tomcat镜像123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[root@dev ~]# docker search mysqlINDEX NAME DESCRIPTION STARS OFFICIAL AUTOMATEDdocker.io docker.io/mysql MySQL is a widely used, open-source relati... 6589 [OK] docker.io docker.io/mariadb MariaDB is a community-developed fork of M... 2086 [OK] docker.io docker.io/mysql/mysql-server Optimized MySQL Server Docker images. Crea... 484 [OK]docker.io docker.io/zabbix/zabbix-server-mysql Zabbix Server with MySQL database support 107 [OK]docker.io docker.io/hypriot/rpi-mysql RPi-compatible Docker Image with Mysql 90 docker.io docker.io/zabbix/zabbix-web-nginx-mysql Zabbix frontend based on Nginx web-server ... 61 [OK]docker.io docker.io/centurylink/mysql Image containing mysql. Optimized to be li... 60 [OK]docker.io docker.io/1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5 ubuntu-16-nginx-php-phpmyadmin-mysql-5 38 [OK]docker.io docker.io/tutum/mysql Base docker image to run a MySQL database ... 32 docker.io docker.io/centos/mysql-57-centos7 MySQL 5.7 SQL database server 31 docker.io docker.io/mysql/mysql-cluster Experimental MySQL Cluster Docker images. ... 31 docker.io docker.io/schickling/mysql-backup-s3 Backup MySQL to S3 (supports periodic back... 20 [OK]docker.io docker.io/bitnami/mysql Bitnami MySQL Docker Image 15 [OK]docker.io docker.io/zabbix/zabbix-proxy-mysql Zabbix proxy with MySQL database support 15 [OK]docker.io docker.io/linuxserver/mysql A Mysql container, brought to you by Linux... 14 docker.io docker.io/centos/mysql-56-centos7 MySQL 5.6 SQL database server 8 docker.io docker.io/circleci/mysql MySQL is a widely used, open-source relati... 6 docker.io docker.io/openshift/mysql-55-centos7 DEPRECATED: A Centos7 based MySQL v5.5 ima... 6 docker.io docker.io/dsteinkopf/backup-all-mysql backup all DBs in a mysql server 4 [OK]docker.io docker.io/frodenas/mysql A Docker Image for MySQL 2 [OK]docker.io docker.io/mysql/mysql-router MySQL Router provides transparent routing ... 2 docker.io docker.io/openzipkin/zipkin-mysql Mirror of https://quay.io/repository/openz... 1 docker.io docker.io/ansibleplaybookbundle/mysql-apb An APB which deploys RHSCL MySQL 0 [OK]docker.io docker.io/cloudfoundry/cf-mysql-ci Image used in CI of cf-mysql-release 0 docker.io docker.io/cloudposse/mysql Improved `mysql` service with support for ... 0 [OK][root@dev mysql]# docker pull mysql:5.7.19Trying to pull repository docker.io/library/mysql ... 5.7.19: Pulling from docker.io/library/mysql85b1f47fba49: Pull complete 27dc53f13a11: Pull complete 095c8ae4182d: Pull complete 0972f6b9a7de: Pull complete 1b199048e1da: Pull complete 159de3cf101e: Pull complete 963d934c2fcd: Pull complete f4b66a97a0d0: Pull complete f34057997f40: Pull complete ca1db9a06aa4: Pull complete 0f913cb2cc0c: Pull complete Digest: sha256:bfb22e93ee87c6aab6c1c9a4e7cdc68e9cb9b64920f28fa289f9ffae9fe8e173Status: Downloaded newer image for docker.io/mysql:5.7.19[root@dev mysql]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmarvin/tomcat latest 098f61ab6f8b 22 hours ago 489 MBnginx_image1 latest c4d5f5accc06 24 hours ago 109 MBdocker.io/tomcat latest 2d43521f2b1a 6 days ago 463 MBdocker.io/nginx latest 8b89e48b5f15 7 days ago 109 MBdocker.io/mysql 5.7.19 3e3878acd190 9 months ago 412 MB[root@dev mysql]# 1.2 创建用于挂载的目录1234567891011[root@dev local]# pwd/usr/local[root@dev local]# mkdir mysql[root@dev local]# mkdir mysql/data[root@dev local]# mkdir mysql/conf.d[root@dev local]# cd mysql/[root@dev mysql]# lltotal 8drwxr-xr-x 2 root root 4096 Jul 24 14:18 conf.ddrwxr-xr-x 2 root root 4096 Jul 24 14:18 data[root@dev mysql]# 命令解析：mkdir /usr/local/mysql/data #用于挂载mysql数据文件mkdir /usr/local/mysql/conf.d #用于挂载mysql配置文件 1.3 启动容器1234567[root@dev mysql]# docker run --name mysql5.7 -p 3306:3306 -v /usr/local/mysql/data:/var/lib/mysql -v /usr/local/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=112233 -d mysql:5.7.1910151eef645f8621441585354ad11d1f98514cdb253c5d1b77db6c0c50327420[root@dev mysql]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES10151eef645f mysql:5.7.19 &quot;docker-entrypoint...&quot; 3 seconds ago Up 2 seconds 0.0.0.0:3306-&gt;3306/tcp mysql5.76f189daf5880 marvin/tomcat &quot;catalina.sh run&quot; 22 hours ago Up 22 hours 0.0.0.0:8080-&gt;8080/tcp tomcat8[root@dev mysql]# 其他参数： –restart always：开机启动–privileged=true：提升容器内权限-e MYSQL_USER=”marvin”：添加用户marvin-e MYSQL_PASSWORD=”pwd123”：设置marvin的密码伟pwd123-e MYSQL_ROOT_PASSWORD=”rootpwd123”：设置root的密码伟rootpwd123–character-set-server=utf8：设置字符集为utf8–collation-server=utf8_general_ci：设置字符比较规则为utf8_general_ci 注意：如果运行时添加了marvin用户，用root登录后执行用户授权ALTER USER &#39;marvin&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;password123&#39;;，才能用远程客户端访问数据库。 1.4 检查结果1234567891011121314151617181920212223242526[root@dev mysql]# docker exec -it mysql5.7 mysql -uroot -p112233mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 9Server version: 8.0.11 MySQL Community Server - GPLCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.01 sec)mysql&gt; 成功安装mysql 1.5 设置远程客户端登录1234mysql&gt; grant all privileges on *.* to root@&quot;%&quot; identified by &quot;root.123&quot; with grant option;Query OK, 0 rows affected, 1 warning (0.00 sec)mysql&gt; 通过客户端创建数据一个数据库，创建一张表 在server端用命令行查看:1234567891011121314151617181920212223242526272829mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || demo || mysql || performance_schema || sys |+--------------------+5 rows in set (0.00 sec)mysql&gt; use demo;Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+----------------+| Tables_in_demo |+----------------+| test |+----------------+1 row in set (0.00 sec)mysql&gt; select * from test;Empty set (0.00 sec)mysql&gt; 再看宿主机文件目录：1234567891011121314151617181920212223[root@dev data]# pwd/usr/local/mysql/data[root@dev data]# lltotal 188480-rw-r----- 1 polkitd ssh_keys 56 Jul 24 16:46 auto.cnf-rw------- 1 polkitd ssh_keys 1675 Jul 24 16:46 ca-key.pem-rw-r--r-- 1 polkitd ssh_keys 1074 Jul 24 16:46 ca.pem-rw-r--r-- 1 polkitd ssh_keys 1078 Jul 24 16:46 client-cert.pem-rw------- 1 polkitd ssh_keys 1675 Jul 24 16:46 client-key.pemdrwxr-x--- 2 polkitd ssh_keys 4096 Jul 24 16:52 demo-rw-r----- 1 polkitd ssh_keys 1321 Jul 24 16:46 ib_buffer_pool-rw-r----- 1 polkitd ssh_keys 79691776 Jul 24 16:52 ibdata1-rw-r----- 1 polkitd ssh_keys 50331648 Jul 24 16:52 ib_logfile0-rw-r----- 1 polkitd ssh_keys 50331648 Jul 24 16:46 ib_logfile1-rw-r----- 1 polkitd ssh_keys 12582912 Jul 24 16:52 ibtmp1drwxr-x--- 2 polkitd ssh_keys 4096 Jul 24 16:46 mysqldrwxr-x--- 2 polkitd ssh_keys 4096 Jul 24 16:46 performance_schema-rw------- 1 polkitd ssh_keys 1675 Jul 24 16:46 private_key.pem-rw-r--r-- 1 polkitd ssh_keys 451 Jul 24 16:46 public_key.pem-rw-r--r-- 1 polkitd ssh_keys 1078 Jul 24 16:46 server-cert.pem-rw------- 1 polkitd ssh_keys 1675 Jul 24 16:46 server-key.pemdrwxr-x--- 2 polkitd ssh_keys 12288 Jul 24 16:46 sys[root@dev data]# 完美！ 二、 使用dockerfile启动mysql容器2.1、编写docker file在当前目录（/usr/local/mysql/）创建dockerfile文件，编辑内容如下：1234567891011121314151617181920FROM docker.io/mysql:5.7.19 #设置免密登录ENV MYSQL_ALLOW_EMPTY_PASSWORD yes #将所需文件放到容器中COPY setup.sh /mysql/setup.shCOPY schema.sql /mysql/schema.sqlCOPY privileges.sql /mysql/privileges.sqlCOPY conf.d /etc/mysql/conf.dRUN chmod 755 /mysql/*.sh# 设置可以允许挂载的卷，可以用来备份数据库和配置文件# VOLUME /usr/local/mysql/data# 设置可以映射的端口EXPOSE 3306 #设置容器启动时执行的命令CMD [&quot;sh&quot;, &quot;/mysql/setup.sh&quot;] 2.2、写容器启动脚本setup.sh和配置文件。setup.sh内容如下：123456789101112131415161718192021222324252627282930#!/bin/bashset -e #查看mysql服务的状态，方便调试，这条语句可以删除echo `service mysql status` echo &apos;1.启动mysql....&apos;#启动mysqlservice mysql startsleep 3echo `service mysql status` echo &apos;2.开始导入数据....&apos;#导入数据mysql &lt; /mysql/schema.sqlecho &apos;3.导入数据完毕....&apos; sleep 3echo `service mysql status` #重新设置mysql密码echo &apos;4.开始修改密码....&apos;mysql &lt; /mysql/privileges.sqlecho &apos;5.修改密码完毕....&apos; #sleep 3echo `service mysql status`echo `mysql容器启动完毕,且数据导入成功` tail -f /dev/null 设置可执行权限： chmod u+x setup.sh 这里是先导入数据，然后才是设置用户和权限，是因为mysql容器一开始为免密登录，Dockerfile中有如下设置：ENV MYSQL_ALLOW_EMPTY_PASSWORD yes,此时执行导入数据命令不需要登录验证操作，如果是先执行权限操作，那么导入数据则需要登录验证，整个过程就麻烦了许多。 conf.d目录下创建配置文件my.cnf,内容如下：123456789101112[client]default-character-set=utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=’SET NAMES utf8mb4&apos;max_allowed_packet=100M[mysql]default-character-set=utf8mb4 2.3、需要导入数据的mysql脚本命令schema.sql：1234567891011121314151617181920212223-- 创建数据库create database `docker_mysql` default character set utf8 collate utf8_general_ci; use docker_mysql; -- 建表DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `id` bigint(20) NOT NULL, `created_at` bigint(40) DEFAULT NULL, `last_modified` bigint(40) DEFAULT NULL, `email` varchar(255) DEFAULT NULL, `first_name` varchar(255) DEFAULT NULL, `last_name` varchar(255) DEFAULT NULL, `username` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1; -- 插入数据INSERT INTO `user` (`id`, `created_at`, `last_modified`, `email`, `first_name`, `last_name`, `username`)VALUES (0,1490257904,1490257904,&apos;john.doe@example.com&apos;,&apos;John&apos;,&apos;Doe&apos;,&apos;user&apos;); 因为是测试，所以随便写了一个建表语句，如果是真实项目肯定不止这一张表，直接将建表语句覆盖过来就好。 2.4、mysql权限设置命令privileges.sql：1234567891011121314use mysql;select host, user from user;-- 因为mysql版本是5.7，因此新建用户为如下命令：create user docker identified by &apos;123456&apos;;-- 将docker_mysql数据库的权限授权给创建的docker用户，密码为123456：grant all on docker_mysql.* to docker@&apos;%&apos; identified by &apos;123456&apos; with grant option;-- 创建root用户，设置密码create user root identified by &apos;root.123&apos;;-- 授权root用户所有数据库密码grant all privileges on *.* to root@&quot;%&quot; identified by &quot;root.123&quot; with grant option;-- 这一条命令一定要有：flush privileges; 2.5、创建镜像docker build -t marvin/docker-mysql:5.7.19 .1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162[root@dev mysql]# lltotal 28drwxr-xr-x 2 root root 4096 Jul 24 19:16 conf.ddrwxr-xr-x 6 polkitd ssh_keys 4096 Jul 26 09:52 datadrwxr-xr-x 2 root root 4096 Jul 26 12:02 datadir-rw-r--r-- 1 root root 504 Jul 26 12:41 dockerfile-rw-r--r-- 1 root root 578 Jul 24 18:38 privileges.sql-rw-r--r-- 1 root root 713 Jul 24 17:59 schema.sql-rwxr--r-- 1 root root 592 Jul 24 18:02 setup.sh[root@dev mysql]# rm -rf datadir/[root@dev mysql]# lltotal 24drwxr-xr-x 2 root root 4096 Jul 24 19:16 conf.ddrwxr-xr-x 6 polkitd ssh_keys 4096 Jul 26 09:52 data-rw-r--r-- 1 root root 504 Jul 26 12:41 dockerfile-rw-r--r-- 1 root root 578 Jul 24 18:38 privileges.sql-rw-r--r-- 1 root root 713 Jul 24 17:59 schema.sql-rwxr--r-- 1 root root 592 Jul 24 18:02 setup.sh[root@dev mysql]# docker build -t marvin/docker-mysql:5.7.19 .Sending build context to Docker daemon 219.8 MBStep 1/9 : FROM docker.io/mysql:5.7.19 ---&gt; 3e3878acd190Step 2/9 : ENV MYSQL_ALLOW_EMPTY_PASSWORD yes ---&gt; Running in 12565f8c0c75 ---&gt; c3603b8b0ce0Removing intermediate container 12565f8c0c75Step 3/9 : COPY setup.sh /mysql/setup.sh ---&gt; 25f810745d6eRemoving intermediate container c87437761955Step 4/9 : COPY schema.sql /mysql/schema.sql ---&gt; 6336d1ec2e5cRemoving intermediate container d18c0faf05e2Step 5/9 : COPY privileges.sql /mysql/privileges.sql ---&gt; 909fd9a0147eRemoving intermediate container 597ba357c5ddStep 6/9 : COPY conf.d /etc/mysql/conf.d ---&gt; 0df0b1a8419aRemoving intermediate container 5495b6697f5aStep 7/9 : RUN chmod 755 /mysql/*.sh ---&gt; Running in 648c99da183d ---&gt; 9637b6b5e125Removing intermediate container 648c99da183dStep 8/9 : EXPOSE 3306 ---&gt; Running in 0b4514d7ffcc ---&gt; 0acd4a3a39a6Removing intermediate container 0b4514d7ffccStep 9/9 : CMD sh /mysql/setup.sh ---&gt; Running in 9cc069e6e6aa ---&gt; effcf5bab4c1Removing intermediate container 9cc069e6e6aaSuccessfully built effcf5bab4c1[root@dev mysql]# [root@dev mysql]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmarvin/docker-mysql 5.7.19 effcf5bab4c1 27 seconds ago 412 MBmarvin/tomcat latest 098f61ab6f8b 2 days ago 489 MBnginx_image1 latest c4d5f5accc06 2 days ago 109 MBdocker.io/tomcat latest 2d43521f2b1a 8 days ago 463 MBdocker.io/nginx latest 8b89e48b5f15 9 days ago 109 MBdocker.io/mysql 5.7.19 3e3878acd190 9 months ago 412 MB[root@dev mysql]# 2.6、启动容器docker run -d -p 13306:3306 -v /usr/local/mysql/datadir:/var/lib/mysql marvin/docker-mysql:5.7.1912345678[root@dev mysql]# docker run -d -p 13306:3306 -v /usr/local/mysql/datadir:/var/lib/mysql marvin/docker-mysql:5.7.19e55a41a9ace4fb09db5af3e77fab257764f938ffe2f7221ec312bf624f41543e[root@dev mysql]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESe55a41a9ace4 marvin/docker-mysql:5.7.19 &quot;docker-entrypoint...&quot; 4 seconds ago Up 3 seconds 0.0.0.0:13306-&gt;3306/tcp inspiring_bassi831da6f83e21 mysql:5.7.19 &quot;docker-entrypoint...&quot; 2 hours ago Up 2 hours 0.0.0.0:3306-&gt;3306/tcp mysql5.76f189daf5880 marvin/tomcat &quot;catalina.sh run&quot; 2 days ago Up 2 days 0.0.0.0:8080-&gt;8080/tcp tomcat8[root@dev mysql]# 2.7、检查结果docker exec -it e55a41a9ace4 mysql -udocker -p12345612345678910111213141516171819202122232425262728293031323334353637[root@dev mysql]# docker exec -it e55a41a9ace4 mysql -udocker -p123456 mysql: [Warning] Using a password on the command line interface can be insecure.Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 5Server version: 5.7.19 MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || docker_mysql |+--------------------+2 rows in set (0.01 sec)mysql&gt; use docker_mysqlReading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -ADatabase changedmysql&gt; show tables;+------------------------+| Tables_in_docker_mysql |+------------------------+| user |+------------------------+1 row in set (0.01 sec)mysql&gt; 2.8、远程登录 用客户端链接后创建了数据库，然后重新启动docker，数据仍然在。完美~~~ 美中不足1、找不到mysql.sock在实践过程中也碰到了比较恶心的问题，就是启动时老是找不到mysql.sock，最开始在my.cnf里没有配置socket的路径，这样没问题。 但是不知道默认的mysql.sock的容器里是在什么路径上； 于是在my.cnf配置文件里加上这个配置socket=/var/lib/mysql/mysql.sock; 启动的时候就怎么都会报错了错误信息大概是这样：1ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/var/lib/mysql/mysql.sock&apos; (2) 然后将配置改为socket=/tmp/mysql.sock启动的时候又变成这样了：12345678[root@dev mysql]# docker run -p 13306:3306 -v /usr/local/mysql/datadir:/var/lib/mysql marvin/docker-mysqlMySQL Community Server 5.7.19 is not running.1.启动mysql......MySQL Community Server 5.7.19 is started.MySQL Community Server 5.7.19 is running.2.开始导入数据....ERROR 2002 (HY000): Can&apos;t connect to local MySQL server through socket &apos;/tmp/mysql.sock&apos; (2) docker stop docker rm docker rmi docker build 又重新docker run反复了一上午。最后还是没办法，把配置文件中的sock的配置给删除了。 正常启动后查知sock的路径默认的原来是/var/run/mysqld12345root@63d3f0b5ea07:/var/run/mysqld# pwd/var/run/mysqldroot@63d3f0b5ea07:/var/run/mysqld# lsmysqld.pid mysqld.sock mysqld.sock.lockroot@63d3f0b5ea07:/var/run/mysqld# 应该能修改，不过不想折腾了。 2、如果挂载了数据持久化的数据卷，再次build容器，启动时会报创建用户失败等，因为已有用户了。因此如果是二次运行，要么删除掉持久化的数据，要么修改setup.sh脚本，不要再执行privileges.sql和schema.sql。 扩展生产环境中可能数据库要做主从、读写分离等等，但是因为数据是要共享的，所以有可能用到下知识. 数据共享如果要授权一个容器访问另一个容器的Volume，我们可以使用-volumes-from参数来执行docker run。1234$ docker run -it -h NEWCONTAINER --volumes-from container-test debian /bin/bashroot@NEWCONTAINER:/# ls /datatest-fileroot@NEWCONTAINER:/# 值得注意的是不管container-test是否运行，它都会起作用。只要有容器连接Volume，它就不会被删除。 数据容器常见的使用场景是使用纯数据容器来持久化数据库、配置文件或者数据文件等。官方的文档上有详细的解释。例如： 1docker run -it -v /dbdata:/dbdata --name dbdata centos 该命令将会创建一个已经包含在Dockerfile里定义过Volume的postgres镜像，运行echo命令然后退出。当我们运行docker ps命令时，echo可以帮助我们识别某镜像的用途。我们可以用-volumes-from命令来识别其它容器的Volume： 创建db1和db2两个容器，并使用–volumes-from挂载dbdata容器中的数据卷12[root@wls12c /]$ docker run -it --volumes-from dbdata --name db1 centos[root@wls12c /]$ docker run -it --volumes-from dbdata --name db2 centos 这样三个容器任何一个容器在该目录下写入，其它容器都能看见。 使用数据容器的两个注意点： 不要运行数据容器，这纯粹是在浪费资源。 不要为了数据容器而使用“最小的镜像”，如busybox或scratch，只使用数据库镜像本身就可以了。你已经拥有该镜像，所以并不需要占用额外的空间。 备份备份dbdata数据卷容器中的数据到主机的当前目录。 1234567891011[root@wls12c /]$ docker run --volumes-from dbdata -v $(pwd):/backup --name worker centos tar zcf /backup/backup.tar.gz /dbdatatar: Removing leading `/&apos; from member names[root@wls12c /]$ lsb2b boot dev lib media net root srv tmpbackup.tar.gz cgroup etc lib64 misc opt sbin sys usrbin dbdata home lost+found mnt proc selinux test var[root@wls12c /]$ tar -tvf backup.tar.gz drwxr-xr-x root/root 0 2016-08-26 10:51 dbdata/-rw-r--r-- root/root 0 2016-08-26 10:40 dbdata/demo-rw-r--r-- root/root 6 2016-08-26 10:48 dbdata/test.txt-rw-r--r-- root/root 0 2016-08-26 10:51 dbdata/hello 恢复创建一个带有数据卷的容器1[root@wls12c /]$ docker run -v /dbdata/dbdata --name db centos /bin/bash 恢复1[root@wls12c /]$ docker run --volumes-from db -v $(pwd):/backup centos tar xf /backup/backup.tar.gz 权限与许可通常你需要设置Volume的权限或者为Volume初始化一些默认数据或者配置文件。要注意的关键点是，在Dockerfile的VOLUME指令后的任何东西都不能改变该Volume，比如：12345FROM debian:wheezyRUN useradd fooVOLUME /dataRUN touch /data/xRUN chown -R foo:foo /data 该Docker file不能按预期那样运行，我们本来希望touch命令在镜像的文件系统上运行，但是实际上它是在一个临时容器的Volume上运行。如下所示： 12345FROM debian:wheezyRUN useradd fooRUN mkdir /data &amp;&amp; touch /data/xRUN chown -R foo:foo /dataVOLUME /data Docker可以将镜像中Volume下的文件挂载到Volume下，并设置正确的权限。如果你指定Volume的主机目录将不会出现这种情况。 如果你没有通过RUN指令设置权限，那么你就需要在容器启动时使用CMD或ENTRYPOINT指令来执行（译者注：CMD指令用于指定一个容器启动时要运行的命令，与RUN类似，只是RUN是镜像在构建时要运行的命令）。 删除Volumes这个功能可能会更加重要，如果你已经使用docker rm来删除你的容器，那可能有很多的孤立的Volume仍在占用着空间。 Volume只有在下列情况下才能被删除： 该容器是用docker rm －v命令来删除的（-v是必不可少的）。 docker run中使用了--rm参数 即使用以上两种命令，也只能删除没有容器连接的Volume。连接到用户指定主机目录的Volume永远不会被docker删除。 除非你已经很小心的，总是像这样来运行容器，否则你将会在/var/lib/docker/vfs/dir目录下得到一些僵尸文件和目录，并且还不容易说出它们到底代表什么。 参考详解利用Dockerfile构建mysql镜像并实现数据的初始化及权限设置基于Dockerfile构建mysqld服务镜像dockerfile 实例找不到mysql.sock的错误详解]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker学习案例：用docker部署tomcat服务]]></title>
    <url>%2F2018%2F07%2F23%2Fdocker%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8docker%E9%83%A8%E7%BD%B2tomcat%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[docker实际案例之在centOS7.4上用docker部署tomcat服务简书地址 一、使用docker run命令直接启动一个tomcat容器1.1 下载官方tomcat镜像123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051[root@dev nginx]# docker search tomcatINDEX NAME DESCRIPTION STARS OFFICIAL AUTOMATEDdocker.io docker.io/tomcat Apache Tomcat is an open source implementa... 1942 [OK] docker.io docker.io/tomee Apache TomEE is an all-Apache Java EE cert... 51 [OK] docker.io docker.io/dordoka/tomcat Ubuntu 14.04, Oracle JDK 8 and Tomcat 8 ba... 49 [OK]docker.io docker.io/davidcaste/alpine-tomcat Apache Tomcat 7/8 using Oracle Java 7/8 wi... 27 [OK]docker.io docker.io/bitnami/tomcat Bitnami Tomcat Docker Image 19 [OK]docker.io docker.io/consol/tomcat-7.0 Tomcat 7.0.57, 8080, &quot;admin/admin&quot; 16 [OK]docker.io docker.io/cloudesire/tomcat Tomcat server, 6/7/8 15 [OK]docker.io docker.io/tutum/tomcat Base docker image to run a Tomcat applicat... 10 docker.io docker.io/meirwa/spring-boot-tomcat-mysql-app a sample spring-boot app using tomcat and ... 9 [OK]docker.io docker.io/jeanblanchard/tomcat Minimal Docker image with Apache Tomcat 8 docker.io docker.io/aallam/tomcat-mysql Debian, Oracle JDK, Tomcat &amp; MySQL 7 [OK]docker.io docker.io/rightctrl/tomcat CentOS , Oracle Java, tomcat application s... 3 [OK]docker.io docker.io/amd64/tomcat Apache Tomcat is an open source implementa... 2 docker.io docker.io/arm64v8/tomcat Apache Tomcat is an open source implementa... 2 docker.io docker.io/fabric8/tomcat-8 Fabric8 Tomcat 8 Image 2 [OK]docker.io docker.io/maluuba/tomcat7-java8 Tomcat7 with java8. 2 docker.io docker.io/99taxis/tomcat7 Tomcat7 1 [OK]docker.io docker.io/camptocamp/tomcat-logback Docker image for tomcat with logback integ... 1 [OK]docker.io docker.io/primetoninc/tomcat Apache tomcat 8.5, 8.0, 7.0 1 [OK]docker.io docker.io/jelastic/tomcat 0 docker.io docker.io/oobsri/tomcat8 Testing CI Jobs with different names. 0 docker.io docker.io/picoded/tomcat7 tomcat7 with jre8 and MANAGER_USER / MANAG... 0 [OK]docker.io docker.io/s390x/tomcat Apache Tomcat is an open source implementa... 0 docker.io docker.io/swisstopo/service-print-tomcat backend tomcat for service-print &quot;the true... 0 docker.io docker.io/trollin/tomcat 0 [root@dev nginx]# docker pull docker.io/tomcatUsing default tag: latestTrying to pull repository docker.io/library/tomcat ... latest: Pulling from docker.io/library/tomcat55cbf04beb70: Pull complete 1607093a898c: Pull complete 9a8ea045c926: Pull complete 1290813abd9d: Pull complete 8a6b982ad6d7: Pull complete abb029e68402: Pull complete 8cd067dc06dc: Pull complete 1b9ce2097b98: Pull complete d6db5874b692: Pull complete 25b4aa3d52c5: Pull complete 53ec227dabf0: Pull complete 242938ace8b4: Pull complete Digest: sha256:87ad70ceaafd5c71301b081b37ca2795bd6c7c1a5599a8c92c9447bbd225ae47Status: Downloaded newer image for docker.io/tomcat:latest[root@dev nginx]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx_image1 latest c4d5f5accc06 57 minutes ago 109 MBdocker.io/tomcat latest 2d43521f2b1a 5 days ago 463 MBdocker.io/nginx latest 8b89e48b5f15 6 days ago 109 MB[root@dev nginx]# 1.2 启动容器123456789101112131415161718192021222324252627282930313233343536373839404142434445[root@dev nginx]# docker run -p 8080:8080 docker.io/tomcat23-Jul-2018 09:31:43.954 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version: Apache Tomcat/8.5.3223-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built: Jun 20 2018 19:50:35 UTC23-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number: 8.5.32.023-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name: Linux23-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version: 3.10.0-693.2.2.el7.x86_6423-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture: amd6423-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home: /usr/lib/jvm/java-8-openjdk-amd64/jre23-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version: 1.8.0_171-8u171-b11-1~deb9u1-b1123-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor: Oracle Corporation23-Jul-2018 09:31:43.966 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE: /usr/local/tomcat23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME: /usr/local/tomcat23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=204823-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=002723-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/usr/local/tomcat23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/usr/local/tomcat23-Jul-2018 09:31:43.967 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/usr/local/tomcat/temp23-Jul-2018 09:31:43.968 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent Loaded APR based Apache Tomcat Native library [1.2.17] using APR version [1.5.2].23-Jul-2018 09:31:43.968 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].23-Jul-2018 09:31:43.968 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]23-Jul-2018 09:31:43.981 INFO [main] org.apache.catalina.core.AprLifecycleListener.initializeSSL OpenSSL successfully initialized [OpenSSL 1.1.0f 25 May 2017]23-Jul-2018 09:31:44.152 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;http-nio-8080&quot;]23-Jul-2018 09:31:44.168 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read23-Jul-2018 09:31:44.190 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [&quot;ajp-nio-8009&quot;]23-Jul-2018 09:31:44.193 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read23-Jul-2018 09:31:44.197 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 987 ms23-Jul-2018 09:31:44.247 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]23-Jul-2018 09:31:44.248 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/8.5.3223-Jul-2018 09:31:44.281 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/docs]23-Jul-2018 09:31:44.886 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/docs] has finished in [606] ms23-Jul-2018 09:31:44.893 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/examples]23-Jul-2018 09:31:45.359 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/examples] has finished in [465] ms23-Jul-2018 09:31:45.359 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/ROOT]23-Jul-2018 09:31:45.396 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/ROOT] has finished in [37] ms23-Jul-2018 09:31:45.397 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/manager]23-Jul-2018 09:31:45.454 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/manager] has finished in [56] ms23-Jul-2018 09:31:45.454 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/usr/local/tomcat/webapps/host-manager]23-Jul-2018 09:31:45.499 INFO [localhost-startStop-1] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/usr/local/tomcat/webapps/host-manager] has finished in [45] ms23-Jul-2018 09:31:45.504 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;http-nio-8080&quot;]23-Jul-2018 09:31:45.533 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [&quot;ajp-nio-8009&quot;]23-Jul-2018 09:31:45.538 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 1340 ms 1.3 浏览器查看 1.4 部署自己的web应用将本地war包上传到宿主机/opt/tomcat8/目录下。先停止原来的tomcat容器，然后重新挂在新的war包并启动。 1234567891011121314151617[root@dev nginx]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES00a88a12a6f4 nginx_image1 &quot;/bin/sh -c &apos;nginx...&quot; About an hour ago Up About an hour 0.0.0.0:80-&gt;80/tcp nginx[root@dev nginx]# docker stop 00a88a12a6f400a88a12a6f4[root@dev nginx]# docker rm 00a88a12a6f400a88a12a6f4[root@dev nginx]# cd /opt/tomcat8/[root@dev tomcat8]# lltotal 25852-rw-r--r-- 1 root root 26470421 Jul 23 17:40 weixin.war[root@dev tomcat8]# docker run -d -v /opt/tomcat8/weixin.war:/usr/local/tomcat/webapps/weixin.war -p 8080:8080 docker.io/tomcat 2c2e386b7d1a2635f7be28c404a7a71a0ec8fda074b22035be6d62d28b8f8a50[root@dev tomcat8]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES2c2e386b7d1a docker.io/tomcat &quot;catalina.sh run&quot; 15 seconds ago Up 14 seconds 0.0.0.0:8080-&gt;8080/tcp mystifying_wilson[root@dev tomcat8]# 调用接口查看启动情况容器正常启动。 二、使用docker file启动tomcat容器2.1、编写docker file在当前/opt/tomcat8/目录下创建dockerfile文件，写入如下内容：12345from docker.io/tomcat:8.5.29 MAINTAINER marvin(qdhaiqiang@163.com) COPY webapps /usr/local/tomcat/webappsCOPY logs /usr/local/tomcat/logsCOPY conf/server.xml /usr/local/tomcat/conf/server.xml 2. 2、用dockerfile 构建出镜tomcat镜像12345678910111213141516171819[root@dev tomcat8]# docker build -t marvin/tomcat . Sending build context to Docker daemon 26.48 MBStep 1/5 : FROM docker.io/tomcat:latest ---&gt; 2d43521f2b1aStep 2/5 : MAINTAINER marvin(qdhaiqiang@163.com) ---&gt; Running in de53a8b32cf8 ---&gt; fd9c7980f09eRemoving intermediate container de53a8b32cf8Step 3/5 : COPY webapps /usr/local/tomcat/webapps ---&gt; 010bf40a7e8dRemoving intermediate container 27feb6b70ca8Step 4/5 : COPY logs /usr/local/tomcat/logs ---&gt; 010946977b25Removing intermediate container aff55ea55e30Step 5/5 : COPY conf/server.xml /usr/local/tomcat/conf/server.xml ---&gt; 098f61ab6f8bRemoving intermediate container 18d241c36d15Successfully built 098f61ab6f8b[root@dev tomcat8]# 查看新构建的镜像1234567[root@dev tomcat8]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmarvin/tomcat latest 098f61ab6f8b 11 seconds ago 489 MBnginx_image1 latest c4d5f5accc06 About an hour ago 109 MBdocker.io/tomcat latest 2d43521f2b1a 5 days ago 463 MBdocker.io/nginx latest 8b89e48b5f15 6 days ago 109 MB[root@dev tomcat8]# 2.3、 运行新构建的镜像123456[root@dev tomcat8]# docker run --name tomcat8 -d -p 8080:8080 marvin/tomcat6f189daf58807a5683a8b9d6c01b1b30ae8770045aa551535d27b641681c256a[root@dev tomcat8]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6f189daf5880 marvin/tomcat &quot;catalina.sh run&quot; 3 seconds ago Up 2 seconds 0.0.0.0:8080-&gt;8080/tcp tomcat8[root@dev tomcat8]# 2.4、 查看镜像运行效果 2.5、如果要配置https证书的话，可将jks的证书放于conf目录下，在server中使用相对路径引用证书，配置如下:123&lt;Connector port=&quot;8888&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot; URIEncoding=&quot;UTF-8&quot; clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;conf/SHA256withRSA__.haier.net.jks&quot; keystorePass=&quot;20170905&quot;/&gt; 或者如果是pem文件的话12345678910 &lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11AprProtocol&quot; maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; &gt; &lt;UpgradeProtocol className=&quot;org.apache.coyote.http2.Http2Protocol&quot; /&gt; &lt;SSLHostConfig&gt; &lt;Certificate certificateKeyFile=&quot;conf/localhost-rsa-key.pem&quot; certificateFile=&quot;conf/localhost-rsa-cert.pem&quot; certificateChainFile=&quot;conf/localhost-rsa-chain.pem&quot; type=&quot;RSA&quot; /&gt; &lt;/SSLHostConfig&gt;&lt;/Connector&gt; 2.6、在分布式微服务中的应用 tomcat作为web容器被广泛应用，但我们目前restful接口特别多，每个接口都需要一个tomcat来启动，为了配置隔离，一般都会把tomcat安装文件复制多遍，分别把war包部署在对应的webapp目录下，但这样造成的问题就是tomcat安装文件占用了大量的磁盘空间，且不便于统一管理。比如要修改tomcat的某个配置，那么对应的所有的tomcat目录都要修改一遍。 基于上述情况，作者设计了一种基于docker的tomcat服务化方案。 2.7、查看tomcat日志因为tomcat日志是随着程序运行生成的，所以不能使用add或者copy宿主机目录的形式添加到容器，目前的思路是将容器中的logs整个目录copy到宿主机，实际应用中可用定时任务执行脚本的形式解决。1234567891011121314151617[root@dev logs]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6f189daf5880 marvin/tomcat &quot;catalina.sh run&quot; 4 hours ago Up 4 hours 0.0.0.0:8080-&gt;8080/tcp tomcat8[root@dev logs]# [root@dev logs]# pwd/opt/tomcat8/logs[root@dev logs]# lltotal 0[root@dev logs]# docker cp 6f189daf5880:/usr/local/tomcat/logs /opt/tomcat8/[root@dev logs]# lltotal 16-rw-r----- 1 root root 7863 Jul 23 18:08 catalina.2018-07-23.log-rw-r----- 1 root root 0 Jul 23 18:07 host-manager.2018-07-23.log-rw-r----- 1 root root 930 Jul 23 18:08 localhost.2018-07-23.log-rw-r----- 1 root root 1424 Jul 23 22:49 localhost_access_log.2018-07-23.txt-rw-r----- 1 root root 0 Jul 23 18:07 manager.2018-07-23.log[root@dev logs]# 2.8 另一个tomcat+jdk的例子1234567891011121314151617181920212223242526272829303132#tomcat8 openjdk8FROM centos:7MAINTAINER fengzp &lt;fengzp@gzyitop.com&gt;ENV LANG en_US.UTF-8ENV TOMCAT_VERSION 8.5.13ENV CATALINA_HOME /opt/apache-tomcat-$TOMCAT_VERSIONENV PATH $CATALINA_HOME/bin:$PATHENV JDK_VERSION 1.8.0WORKDIR $CATALINA_HOMERUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN yum -y install java-$JDK_VERSION-openjdk-devel &amp;&amp; rm -rf /var/cache/yum/*ENV JAVA_HOME /usr/lib/jvm/java-openjdkRUN yum -y install wgetRUN cd /opt/ &amp;&amp; wget &quot;http://apache.fayea.com/tomcat/tomcat-8/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz&quot;RUN cd /opt/ &amp;&amp; tar -zxf apache-tomcat-$TOMCAT_VERSION.tar.gzRUN cd /opt/ &amp;&amp; rm -rf apache-tomcat-$TOMCAT_VERSION.tar.gzRUN chmod +x $CATALINA_HOME/bin/*.shVOLUME $CATALINA_HOME/webapps VOLUME $CATALINA_HOME/logsVOLUME $CATALINA_HOME/confEXPOSE 8080CMD $CATALINA_HOME/bin/startup.sh &amp;&amp; tail -F $CATALINA_HOME/logs/catalina.out 三、不适用容器自带jdk3.1 先将下载好的jdk和tomcat上传到宿主服务器12[root@dev tomcat8]# lsapache-tomcat-7.0.70.tar.gz jdk-7u80-linux-x64.tar.gz 3.2 dockerfile文件如下1234567891011#pull down centos imageFROM centosMAINTAINER test@test.com#copy jdk and tomcat into imageADD ./apache-tomcat-7.0.70.tar.gz /rootADD ./jdk-7u80-linux-x64.tar.gz /root#set environment variableENV JAVA_HOME /root/jdk1.7.0_80ENV PATH $JAVA_HOME/bin:$PATH#define entry point which will be run first when the container starts upENTRYPOINT /root/apache-tomcat-7.0.70/bin/startup.sh &amp;&amp; tail -F /root/apache-tomcat-7.0.70/logs/catalina.out 四、参考文章：https://blog.csdn.net/qq_32351227/article/details/78673591https://www.cnblogs.com/zydev/p/5804289.html]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker学习案例：用docker部署nginx服务]]></title>
    <url>%2F2018%2F07%2F22%2Fdocker%E5%AD%A6%E4%B9%A0%E6%A1%88%E4%BE%8B%EF%BC%9A%E7%94%A8docker%E9%83%A8%E7%BD%B2nginx%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[docker实际案例之在centOS7.4上用docker部署nginx服务简书地址] 一、使用docker run命令直接启动一个nginx容器直接上结果运行脚本：1、下载最新版nginx的docker镜像1$ docker pull nginx 2、启动容器12345678docker run \--name centos_nginx \-d -p 80:80 \-v /usr/local/nginx/html:/usr/share/nginx/html \-v /usr/local/nginx/logs:/var/log/nginx \-v /usr/local/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \-v /usr/local/nginx/conf/conf.d:/etc/nginx/conf.d \nginx 这里有几个注意事项：（1）第一个“-v”，是项目位置，把项目放到挂载到的目录下即可；（2）第二个“-v”，是挂载的主配置文件”nginx.conf”，注意”nginx.conf”文件内有一行”include /etc/nginx/conf.d/*.conf;”，这个include指向了子配置文件的路径，此处注意include后所跟的路径一定不要出错。（3）第三个“-v”，把docker内子配置文件的路径也挂载了出来，注意要与（2）中include指向路径一致（4）重点强调一下，nginx.conf是挂载了一个文件（docker是不推荐这样用的），conf.d挂载的是一个目录 再看宿主机配置：123456[root@dev nginx]# lltotal 12drwxr-xr-x 3 root root 4096 Jul 19 11:15 confdrwxr-xr-x 3 root root 4096 Jul 19 10:34 htmldrwxr-xr-x 2 root root 4096 Jul 19 10:41 logs[root@dev nginx]# /usr/local/nginx/conf/nginx.conf1234567891011121314151617181920212223242526272829303132user root;worker_processes 1;error_log /var/log/nginx/error.log warn;pid /var/run/nginx.pid; events &#123; worker_connections 1024;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; autoindex on; #gzip on; client_max_body_size 100M; client_header_buffer_size 128k; large_client_header_buffers 4 128k; include /etc/nginx/conf.d/*.conf; &#125; /usr/local/nginx/conf/conf.d/default.conf12345678910111213141516171819202122232425262728293031323334353637383940414243444546server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log /var/log/nginx/log/host.access.log main; location / &#123; root /usr/share/nginx/html/default; index index.html index.htm; autoindex on; #try_files $uri /index/index/page.html; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; /usr/local/nginx/html/default/index.html123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx! This is a demo!&lt;/title&gt;&lt;style&gt; body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;****************************&lt;/h1&gt;&lt;h1 align=&quot;center&quot; style=&quot;color:red;&quot; &gt;Welcome to nginx! &lt;/h1&gt;&lt;h1&gt;****************************&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt; &lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; /usr/local/nginx/logs/access.log1234567194.105.136.181 - - [19/Jul/2018:04:29:59 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot; &quot;-&quot;94.102.52.77 - - [19/Jul/2018:04:41:30 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;libwww-perl/6.34&quot; &quot;-&quot;187.74.100.192 - - [19/Jul/2018:04:59:21 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot; &quot;-&quot;106.11.225.139 - - [19/Jul/2018:05:17:41 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot; &quot;-&quot;103.3.76.194 - - [19/Jul/2018:05:33:48 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot; &quot;-&quot;106.11.226.243 - - [19/Jul/2018:05:42:05 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot; &quot;-&quot;177.137.62.62 - - [19/Jul/2018:06:18:32 +0000] &quot;GET / HTTP/1.1&quot; 200 742 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36&quot; &quot;-&quot; 启动效果： 二、 使用docker file启动nginx容器doeker常用命令： 1、编写docker file在任意目录创建一个nginx.Dockerfile 文件，写入如下内容：123456789101112131415# Base images 基础镜像FROM nginx MAINTAINER marvinENV RUN_USER nginx ENV RUN_GROUP nginx ENV DATA_DIR /usr/share/nginx/htmlENV LOG_DIR /var/log/nginxRUN mkdir /var/log/nginx -p RUN chown nginx.nginx -R /var/log/nginxADD html /usr/share/nginx/htmlADD logs /var/log/nginxADD conf/nginx.conf /etc/nginx/nginx.confADD conf/conf.d /etc/nginx/conf.dEXPOSE 80ENTRYPOINT nginx -g &quot;daemon off;&quot; 做了这么几件事： 1、拉取一个nginx镜像。2、设置了几个变量。3、创建了几个需要的目录。4、把当前目录下的web程序复制到镜像的/data/web目录。5、把nginx.conf配置文件和default.conf配置文件复制到镜像中。6、设置一个默认端口。7、最后设置了容器启动时执行的命令，我用来启动nginx程序，注意这个命令不能错，不然容器启动不了。这样设置后，当你docker run运行此镜像时不需要在后面再次执行需要执行的命令了。8、ADD后面src的路径不要是绝对路径，最好是dockerfile和这些添加的目录放在一个目录下，否则build时会提示lstat usr/local/nginx/html: no such file or directory的错误，别问为什么，经验之谈！ 2、用dockerfile 构建出镜nginx镜像12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849[root@dev nginx]# lsconf dockerfile html logs[root@dev nginx]# docker build -t nginx_image1 . Sending build context to Docker daemon 27.65 kBStep 1/14 : FROM nginx ---&gt; 8b89e48b5f15Step 2/14 : MAINTAINER marvin ---&gt; Using cache ---&gt; fc935dc63140Step 3/14 : ENV RUN_USER nginx ---&gt; Using cache ---&gt; 7ca3b90ddc2aStep 4/14 : ENV RUN_GROUP nginx ---&gt; Using cache ---&gt; a2e2674d4c9fStep 5/14 : ENV DATA_DIR /usr/share/nginx/html ---&gt; Using cache ---&gt; f031dd5f8ce0Step 6/14 : ENV LOG_DIR /var/log/nginx ---&gt; Using cache ---&gt; e57a42b5bea0Step 7/14 : RUN mkdir /var/log/nginx -p ---&gt; Using cache ---&gt; 0cbaaac3d55bStep 8/14 : RUN chown nginx.nginx -R /var/log/nginx ---&gt; Using cache ---&gt; 714919c0618bStep 9/14 : ADD html /usr/share/nginx/html ---&gt; 1c75fe9cdd3fRemoving intermediate container 702f4e3ace2eStep 10/14 : ADD logs /var/log/nginx ---&gt; 545ba7cc270bRemoving intermediate container 123bb6c3703cStep 11/14 : ADD conf/nginx.conf /etc/nginx/nginx.conf ---&gt; d96a6dfa8ba9Removing intermediate container db2394df7691Step 12/14 : ADD conf/conf.d /etc/nginx/conf.d ---&gt; d02f5acc99deRemoving intermediate container fdc7c2542990Step 13/14 : EXPOSE 80 ---&gt; Running in 679ecad9d883 ---&gt; 9ee05d0ab66fRemoving intermediate container 679ecad9d883Step 14/14 : ENTRYPOINT nginx -g &quot;daemon off;&quot; ---&gt; Running in 774ac2a000ac ---&gt; c4d5f5accc06Removing intermediate container 774ac2a000acSuccessfully built c4d5f5accc06[root@dev nginx]# 注意最后面的点 (“.”)，表示dockerfile所在当前目录。 从执行过程可以看出一共十三个步骤，都完成了。再查看目前的镜像：12345[root@dev nginx]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx_image1 latest c4d5f5accc06 47 seconds ago 109 MBdocker.io/nginx latest 8b89e48b5f15 6 days ago 109 MB[root@dev nginx]# 可以看到从官方拉取了一个nginx镜像，然后在此镜像的基础上构建了nginx_image1镜像。注意，由于nginx_image1是在nginx镜像的基础上构建出来的，所以如果你要删除nginx镜像是不允许的，只有先删除nginx_image1镜像后才可以删除nginx镜像。 3、 运行新构建的镜像12345678910[root@dev nginx]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEnginx_image1 latest c4d5f5accc06 47 seconds ago 109 MBdocker.io/nginx latest 8b89e48b5f15 6 days ago 109 MB[root@dev nginx]# docker run --name nginx -d -p 80:80 nginx_image100a88a12a6f4037c406a64f12e8c664cd1f1cbe1eb8c1c29371aa091a01ca161[root@dev nginx]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES00a88a12a6f4 nginx_image1 &quot;/bin/sh -c &apos;nginx...&quot; 15 seconds ago Up 14 seconds 0.0.0.0:80-&gt;80/tcp nginx[root@dev nginx]# 其他配置与上面情况一下的配置，浏览器查看效果 三、 备注3.1 docker run 执行完没有出错，但是docker ps时没有运行的容器。方案：用docker ps -a 能看到没有启动容器。用docker logs 查看容器启动时的log 3.2 删除docker 镜像中REPOSITORY 和 TAG 为 None的镜像 docker images|grep none|awk ‘{print $3}’|xargs docker rmi 使用如下命令给某个镜像指定REPOSITORY 和TAG:docker tag [image id] [name]:[版本] 例如: docker tag b03b74b01d97 docker-redis:0.0.1 参考文章https://my.oschina.net/u/3375733/blog/1591091http://www.ywnds.com/?p=7611]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[转--从Eclipse转移到IntelliJ IDEA一点心得]]></title>
    <url>%2F2018%2F07%2F11%2F%E8%BD%AC--%E4%BB%8EEclipse%E8%BD%AC%E7%A7%BB%E5%88%B0IntelliJ%20IDEA%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97%2F</url>
    <content type="text"><![CDATA[从eclipse到Intellij的各种不适应在此解决简书地址 使用IntelliJ IDEA其实并不太久，用了这段时间以后，觉得的确很是好用。刚刚从Eclipse转过来的很多人开始可能不适应，我就把使用过程中的一些经验和常用功能分享下，当然在看这篇之前推荐你先看完IntelliJ IDEA 的 20 个代码自动完成的特性，这篇文章对自动完成的特性介绍的非常好，只是快捷键说明部分还可以更完善一些，可以照顾下默认绑定键位不一致的童鞋。本文在说明快捷键的时候是根据Mac OSX 10.5+的默认keymap，当然也会提供相关的文字说明，如果和我的绑定不一致的可以直接去keymap中搜索即可。 基本设置显示行号这个以前在Eclipse中是个很简单的问题，转移到IntelliJ上以后的一些人也问过这个问题。使用同样的方式设置了以后发现只是对当前文件起作用了，打开另外一个文件依然没有行号。就好比你只是在vim中执行命令set number，而不是在.vimrc中设置一样的效果。这个是需要在IDE Settings中设置下的，如图所示勾选即可: 其他设置可参照该设置项勾选即可，例如显示空格等等. 文件和导航关联我们在写代码的时候经常需要打开某个文件的时候，想在左边的文件树上自动打开关联到位置，这样很方便的找寻本目录下的其他文件或者其他的相关文件，其实这个IntelliJ提供了好几种解决方案，第一个就是和Eclipse一样的方式，如下: 以前在Eclipse中设置也很简单，但是IntelliJ里面稍微有点不一样，如果想临时一次的话，打开文件的时候点击下图的小地球（第一眼看的时候很像个小地球仪）图标即可 如果你想和Eclipse的那个一样，让这一切自动的话，那么在上图的浮层中可以看到两个选项AutoScroll to Source和AutoScroll from source，IntelliJ很人性化的分了两个设置在里面，你两个都勾选就是基本和Eclipse的功能保持了完全一致，只是勾选一个自然也可以. 还有一种方式就是利用IntelliJ提供的Navigation Bar，IntelliJ很多功能操作都可以键盘化，这个就是喜欢键盘化操作的人的必备功能，操作方式就是打开文件的时候，使用快捷键⌘+UP (Jump to Navigation Bar)，然后就会出现一个下拉，基本就是这个文件所在目录的文件列表，还可以使用上下左右的键位来选择其他目录，是不是很酷？ 备注:此处建议把View &gt; Navigation Bar的选项点掉，这样就使用快捷键之后就会在你鼠标的位置出现，感觉会更输入一些，当然这样你就基本失去了使用鼠标的权利，这个需要你根据个人癖好使用即可。 快捷键使用如果你是苹果电脑用户的话，建议你改成Mac OSX 10.5+的键位绑定，因为Mac OSX 10.5这个兼容Windows的版本的键位实在是太蹩脚了，用着是真难受，好比你默认习惯⌘+w是关闭标签，在这个键位绑定中竟然是根据符号选择文本的一个快捷键. 这里主要介绍几个可能大家常用的，或者是你可能并不知道IntelliJ中有的几个快捷键，特别常用的你直接参照官网的Keymap介绍Getting Started就可以了。学会在Keymap中自己查询需要的快捷键是主要的，不要每次都打开那个没用的百度，具体可以参照本文最后给出的链接。 Outline调出以前在Eclipse中用的很多的一个快捷键就是ctrl+o，这样可以调出代码文件的所有成员变量和方法，并且可以支持搜索很是方便，IntelliJ这种基本的功能自然是有，新手的话还经常问，这个在IntellJ中的快捷键是⌘+F12 (File Structure)。如果你不是Mac OSX 10.5+键位绑定的话，小括号中的内容就是你可以去Keymap中去搜索的内容。 ###基本操作 复制整行或者块:在Eclipse中使用ctrl+alt+Up，IntelliJ默认是⌘+D (Duplicate Line or Block)，其实这个和Eclipse中的有差距，尤其是多行的时候或者选中内容的时候，不信你可以试试。所以你可以把Keymap中的Duplicate Lines定义上一个快捷键，我定义的是Option+D，这个键位在我的默认绑定中是没任何快捷键的，你可以自己绑定一个试试。 根据符号选择文本:这个键位用的太多了，并且也是非常的好用，举个例子，有这样一行代码&lt;name&gt;SpringSource Milestones Proxy&lt;/name&gt; 你光标在Milestones中的某一个位置，你想替换SpringSource Milestones Proxy为其他单词，假设想替换为Test XX，其实这样你只需要Option+Up (Select Word at Caret)两下就可以选中你想要的单词了，当你想在开发过程中，你会发现这个键位用的太多了，多到换了其他没有这个键位的编辑器或者IDE上，很是不习惯。 删除整行: 可以直接⌘+delete (Delete Line)或者利用IntelliJ智能的功能，剪切的快捷键，当本行选中文本的时候剪切⌘+x会按照选中的文本实现剪切，但是你本行内无任何选中文本的时候会自动剪切整行，那么自然就类似一个删除本行的快捷键，但是这个其实还是比较蹩脚的，建议使用⌘+delete`。 想直接跳转到接口的实现方法: ⌘+option+鼠标单击或者⌘+option+B。 语句自动完成 Statements completion:这个在IntelliJ IDEA 的 20 个代码自动完成的特性中已经说明，这里还是着重说下，因为的确很好用，也强烈推荐下，还有文中说的智能自动完成 ctrl+shift+Space，当给你的提示太多的时候，这个键绝对会给你惊喜. 同样单词之间跳转:在Eclipse中的快捷键是ctrl+k，这个挺好用的，在IntelliJ中也不缺这个功能，但是在Mac OSX 10.5+的键位绑定中默认为空。据说Windows的默认绑定中是有绑定的，自己可以查询下，我自己绑定了一个⌘+ctrl+k (Find Word at Caret)，没有的需要自己绑定一个，然后还能结合其他的键位实现上一个⌘+G (Find Next)下一个⌘+Shift+G (Find Previous)的功能.很是实用。 ##版本控制设置我们开发肯定是有版本控制的，大家以前Eclipse的时候在本地文件和版本库不一致的时候，那么文件以及所在的文件夹都会出现一个〉表示，大家能很轻松的看到本地文件修改了哪一些，但是IntelliJ中默认是不能这样的。仅仅是给变化的文件在修改的时候提供了颜色上的变化，不包括其所在的各个父级文件夹哦，如果想和Eclipse一样的话需要如下图把设置勾选就可以了 其实看英文解释就可以明白了，这个默认开启以后如果想调整文件夹的显示颜色的时候就直接去Settings &gt; Editor &gt; Colors &amp; Fonts &gt; File Status中调整即可了，可以调整成自己喜欢的样子。 ##Java资源文件非英文的情况显示IntelliJ在资源文件这方面个人觉得也是完胜Eclipse的，在Resource Bundle方式下想修改一个属性是相当方便的，可以在一个操作界面上修改所有语言的属性，这一切都是自动完成的，如下图所示： 并且还很贴心的有一个排序和分组的功能，尤其是这个排序。 默认设置下也有一个问题，就是中文默认会显示为Unicode码的，其实勾选一个设置(Settings &gt; File Encodings)就可以了，如下图： 这样设置以后所有Unicode显示的就可以自动转化为其应该显示的语言了. 符合Maven约定结构的web项目如何更好的运行记得刚开始用Eclipse的时候那时候默认是不支持Java EE项目的，必须使用一个MyEclipse的插件，直到今天好似还有人在用这个玩意，当年的时候每个Web项目修改之后都必须Deploy一下，修改的东西才会被执行，很是痛苦。后来就自己利用Tomcat插件，这个可以保证你修改jsp以及静态文件的时候不需要Deploy直接就可以被执行，因为Tomcat的目录指向其实直接是指向到了你的项目文件，这样的确省心了很多。 在IntelliJ中如果你是传统的Java EE的结构(根目录下面有src，webMoudle这样的结构)，那么在直接在Run Configurations中添加一个Tomcat即可，点击+号添加即可(当然需要注意虽然没搜索框，你输入字符会自动给你筛选结果)，这样运行的时候修改Java文件的话需要主动Make Project也就是⌘+F9 (Make Project).但是如果你是符合maven约定的项目结构的话如果继续这样配置就很不理想了，每次修改了jsp文件竟然也需要Make Project才可以，因为每次Make Project以后IntelliJ会自动给你DeployMent，这样好似又回到了几年前那种很麻烦的环境. 这个问题其实很容易解决，就是不要使用这种方式来运行你的web项目，既然符合maven结构的项目自然是使用maven或者gradle这种构建工具了，那么你需要利用maven的jetty的插件来运行项目即可了，如下图配置即可: 当然你也可以如下图直接点击运行就会自动添加一个: 参看上图其实也没必须非用jetty，用tomcat6或者tomcat7的插件运行也可以。 ##Eclipse的web结构项目如何导入和运行鉴于有一些用户还没转型Maven等来构建项目，当然我也衷心的说一句，构建这块还是赶紧转了吧.因为不转的话还单独出来这个章节，并且有的操作还是相当麻烦，下面也会讲到，还是一一道来吧，导入的时候有两个选择然后我分两个部分说明，点击File &gt; Import Project…，然后选择你的项目目录，点击OK，如下图: 使用新建项目来导入这个方式图中所示的第一种，导入基本就是一路next到完成，但是你第一次也可以费点心思注意下每一步做了啥，例如帮你分析了jar有哪一些，如果你使用了Spring还给你分析你的所有配置文件。最后完成以后项目就开始构建索引，等一切就绪以后我们就可以完成的基本配置了，由于是web项目基本上能够在Tomcat等服务器上跑起来就基本算成功了。主要几个点: 处理好依赖关系，因为我们没使用maven，所以你得自己动手丰衣足食了 设置java文件的编译路径，如果需要的话 添加你的Tomcat，运行成功 依赖关系打开File &gt; Project Structure ，本节我们主要用到下图几个标红的部分: 我们先了解下这几个主要部件: SDKs:主要存放了我们的JDK等，如下图(我自己下载带source的JDK，这样可以直接查看JDK相关的Java源代码): Global Libraries:主要是公用的jar文件，例如servlet的几个jar可能每个项目都需要，但是Eclipse的变量在此变得不好使，所以需要使用这个地方来配置，如下图参照使用即可: Facets:在此不做介绍，如有需要后续添加 Libraries:这里基本是项目的库，不是全局的，导入的项目一般都会把你Eclipse中的。classpath中的所有的依赖都导过来作为一个lib库，然后应用到你的项目的模块中 Modules:这个基本包括了项目的模块，通常来说Eclipse的项目结构中是单模块的 我们需要做的配置主要在Modules中，其他的几个自己根据理解配置即可。 我们先查看Modules中的Sources，如下图: 把项目所有的源码都添加即可，图中所示我的项目中其实少了resource的文件夹，这样我选中resource然后点击Sources即可，这样就会在左边的Source Folders中添加一个resource的文件夹。 然后是Paths部分，这个主要是class的输出路径，默认是在根目录下的out文件夹中，如果项目中对配置文件的解析等有写死路径，必须严格遵循Java EE的规范的话，那么需要将此部分修改如下(如果不存在我假设的情况可忽略本步骤): 然后的Dependencies，就更好配置了，添加需要的依赖即可。 这些步骤完成以后我们就可以点击Run &gt; Edit Configurations ，点击左上角的+号，然后选择Tomcat &gt; Local Server ，这些步骤和Eclipse类似，选择相应路径等等，只需要注意一点就可以，就是需要添加一个DeployMent，如下图: 如果是Windows的图中的DeployMent中的+号可能是在右侧，点击之后会弹出对话框选择文件夹，选择eclipse默认的webMoudle文件夹即可(MyEclipse就是WebRoot文件夹)，这个一定不能选错，不要选成项目的主文件夹，否则运行就不成功了，再然后ctrl+R运行即可。以debug方式运行就是ctrl+D。 使用IntelliJ对Eclipse项目的支持导入项目基本参照上个基本都类似，就是步骤比上个步骤要少点，如果出现问题参照上个章节即可。 HQL查询支持以前Eclipse有个HQL的插件可以直接输入HQL语法，查询测试结果是否正确，在IntelliJ中你也可以，不过不需要任何插件默认提供支持的，如果在导入项目的时候没有自动添加Hibernate的支持的话，那需要添加一下Hibernate的支持，鼠标选中项目，点击右键如下图: 点击选择Hibernate即可，如果没有Hibernate应该是项目已经自动添加了Hibernate的支持了。然后完成以后就可以如下图操作即可: 选中上面HQL图标，在出来的控制台输入你想输入的HQL即可了，一样可以自动完成的哦。 注意事项 IntelliJ对于文件是默认随时保存的，基本不需要你⌘+s(这个键位默认是保存所有)，所以需要注意不要随手不小心把某个文件改了下，然后直接关闭标签了，其实你的无意的操作已经导致修改了文件，可能导致你在项目运行的时候发现一个很离奇的错误，我暂时没发现可以关闭自动保存的设置，如果你对此非有强迫症的话，vim的插件可能会帮助到你。 IntelliJ中的文件是实时和本地文件同步的，所以Eclipse的刷新功能就不要问了，因为在这根本不需要那个功能。有的编辑器会提醒你是否和本地文件更新，这里也是默认不给任何提醒的，只要你修改了，这里就会立即自动同步更新文件。 在主菜单File下面，有个奇怪的Power Save Mode，这里也说明下，这个顾名思义是省电模式。当你勾选此模式以后，IntelliJ不会给你完成任何自动完成的功能，例如本来你输入一个字符会自动提示的，勾选以后就没有了，如果出现此问题的话可以考虑是不是自己手贱点过这个按钮噢，这个还是比较适合开会的时候无聊看代码用的，又省电又不影响你看代码。 Eclipse中有个F2的功能，可以查看到Java文件定义，你在Spring的配置文件中可能需要配置这个值，但是在IntelliJ中这个是不需要的，因为对于Spring这样的支持很是完善，你只需要在class的属性中输入class的名字然后ctrl+空格 (Basic 这个在code的completion下面)自动就完成了全路径，在智能的条件下可能就不需要蹩脚的实现。 项目刚开始导入或者清除cache重新打开的时候，下面的状态栏部分会显示Indexing，这个时候你就等着就可以了，基本你想做的事情什么都不能做，别在这个时候着急点来点去，不过它索引的速度挺快的，别着急。 Eclipse有个Save Actions的功能，主要是针对Java可以自动格式化以及优化import等功能，这个在IntelliJ上其实默认是没有的，想在IntelliJ中使用这功能可以使用以下两个思路: 利用宏录制，宏在开始以后你就格式化下代码，然后优化下import等操作，然后结束把宏定义一个⌘+s，不过问题就是不管什么文件都会执行这个宏，不仅仅是java文件，我就是利用这个宏主要完成把tab转为空格。 使用Eclipse Code Formatter的插件，这个插件基本和Eclipse默认的功能类似，但是也有少许区别，用户自己思量是否使用即可。 在Mac下IntelliJ代码区域是支持手势放大的，这个在给别人演示的时候很是方便。但是Run、Debug等视图的时候默认能使想到的就是手动的拖动大小，很是不便。你可以尝试下⌘+shift+up/down (Stretch to Top / Bottom)，当然其他的project视图等的也都可以利用这个快捷键配置上下左右的方向键来配置使用，方便的很，强烈推荐使用。 Eclipse中可以同一个窗口打开多个项目，但是IntelliJ IDEA在这里的设计是不一样的，具体可以参看IntelliJ IDEA Q&amp;A for Eclipse Users。 jar的source依赖问题，如果你是使用Maven的话都是可以自动完成的，只需要你发布出你的source jar就可以，但是如果你项目不是使用maven的话你就需要在项目配置的依赖的地方，点击你的需要引入source的jar，然后右键编辑，add你的本地source目录就可以了，不需要做Project的多个moudle即可，这里和Eclipse中的基本相似。 最后第一次发文，如果有什么问题欢迎留言交流，原始文档放在github上，各位如果也有一些技巧不妨共同完善下本文档。只需要Fock然后Pull Request就可以了，如果你觉得有个github帐号过于麻烦的话，那我个人觉得你还是转行比较合适。如果不想更新只是想订阅持续更新的内容，只需要Watch该项目即可。还可以对项目Star，这样你就可以在自己的帐号页面快速找到本项目。 附录 Win快捷键 Win Keymap Mac OS 快捷键 Mac OS Keymap 原文地址：https://github.com/ethanfu/Documents/blob/master/intellij/intellij_idea_use_documents.md]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>intellij idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决springboot war包在tomcat部署时启动慢的问题]]></title>
    <url>%2F2018%2F07%2F10%2F%E8%A7%A3%E5%86%B3springboot%20war%E5%8C%85%E5%9C%A8tomcat%E9%83%A8%E7%BD%B2%E6%97%B6%E5%90%AF%E5%8A%A8%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[linux上的tomcat上部署上springboot的war包启动总是很慢，分析启动log，三步调整，使启动时间从10分钟调整到3分钟。简书地址 最近测试服务器tomcat发布一次很慢，为了解决这个问题，特地看了tomcat的log文件，启动日志在tomcat/logs/catalina.out文件中。 1、INFO：org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory xxx.war卡顿刺风同学就是好记性不如烂笔头的实践者，被我也用上了。找到jdk1.x.x_xx/jre/lib/security/Java.security文件，在文件中找到securerandom.source这个设置项，将其改为：1securerandom.source=file:/dev/./urandom 重启tomcat,这一步的速度明显加快。原理据说是这样的： linux或者部分unix系统提供随机数设备是/dev/random 和/dev/urandom ，两个有区别，urandom安全性没有random高，但random需要时间间隔生成随机数。jdk默认调用random。 2、 WARN: Establishing SSL connection without server’s identity verification is not recommended.具体错误是这样的：123Mon Jul 09 09:30:13 CST 2018 WARN: Establishing SSL connection without server&apos;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&apos;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &apos;false&apos;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.Mon Jul 09 09:30:13 CST 2018 WARN: Establishing SSL connection without server&apos;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&apos;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &apos;false&apos;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.Mon Jul 09 09:30:14 CST 2018 WARN: Establishing SSL connection without server&apos;s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn&apos;t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to &apos;false&apos;. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. 这个错误会打几遍，每一遍都会卡一会儿，应该是在验证mysql的SSL配置。查阅资料说mysql的高版本默认要求使用SSL链接，所以在没有配置SSL也没有说SSL不需要时，就会一直验证，验证好几遍以后放弃。这个时间大概有1分钟。当然，方案就是在jdbc的链接上加上userSSL=false这个参数，jdbc:p6spy:mysql://127.0.0.1:3306/chuangke?characterEncoding=utf-8&amp;useSSL=false&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Hongkong&amp;autoReconnect=true类似这样。 3、 禁用Springboot的JNDI功能原来的log123456789101112131415161718192021222324252627282930313233343536373839404142434410:40:24.103 [localhost-startStop-1] DEBUG org.springframework.web.context.support.StandardServletEnvironment - Replacing PropertySource &apos;servletContextInitParams&apos; with &apos;servletContextInitParams&apos;10:40:24.685 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.exception-conversion-word]10:40:24.686 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.exception-conversion-word] not found - trying original name [logging.exception-conversion-word]. javax.naming.NameNotFoundException: Name [logging.exception-conversion-word] is not bound in this Context. Unable to find [logging.exception-conversion-word].10:40:24.687 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.exception-conversion-word]10:40:24.687 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.exception-conversion-word] threw NamingException with message: Name [logging.exception-conversion-word] is not bound in this Context. Unable to find [logging.exception-conversion-word].. Returning null.10:40:24.687 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.exception_conversion_word]10:40:24.688 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.exception_conversion_word] not found - trying original name [logging.exception_conversion_word]. javax.naming.NameNotFoundException: Name [logging.exception_conversion_word] is not bound in this Context. Unable to find [logging.exception_conversion_word].10:40:24.688 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.exception_conversion_word]10:40:24.688 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.exception_conversion_word] threw NamingException with message: Name [logging.exception_conversion_word] is not bound in this Context. Unable to find [logging.exception_conversion_word].. Returning null.10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.exceptionConversionWord]10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.exceptionConversionWord] not found - trying original name [logging.exceptionConversionWord]. javax.naming.NameNotFoundException: Name [logging.exceptionConversionWord] is not bound in this Context. Unable to find [logging.exceptionConversionWord].10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.exceptionConversionWord]10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.exceptionConversionWord] threw NamingException with message: Name [logging.exceptionConversionWord] is not bound in this Context. Unable to find [logging.exceptionConversionWord].. Returning null.10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.exceptionconversionword]10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.exceptionconversionword] not found - trying original name [logging.exceptionconversionword]. javax.naming.NameNotFoundException: Name [logging.exceptionconversionword] is not bound in this Context. Unable to find [logging.exceptionconversionword].10:40:24.689 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.exceptionconversionword]10:40:24.690 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.exceptionconversionword] threw NamingException with message: Name [logging.exceptionconversionword] is not bound in this Context. Unable to find [logging.exceptionconversionword].. Returning null.10:40:24.690 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.EXCEPTION-CONVERSION-WORD]10:40:24.690 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.EXCEPTION-CONVERSION-WORD] not found - trying original name [logging.EXCEPTION-CONVERSION-WORD]. javax.naming.NameNotFoundException: Name [logging.EXCEPTION-CONVERSION-WORD] is not bound in this Context. Unable to find [logging.EXCEPTION-CONVERSION-WORD].10:40:24.690 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.EXCEPTION-CONVERSION-WORD]10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.EXCEPTION-CONVERSION-WORD] threw NamingException with message: Name [logging.EXCEPTION-CONVERSION-WORD] is not bound in this Context. Unable to find [logging.EXCEPTION-CONVERSION-WORD].. Returning null.10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.EXCEPTION_CONVERSION_WORD]10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.EXCEPTION_CONVERSION_WORD] not found - trying original name [logging.EXCEPTION_CONVERSION_WORD]. javax.naming.NameNotFoundException: Name [logging.EXCEPTION_CONVERSION_WORD] is not bound in this Context. Unable to find [logging.EXCEPTION_CONVERSION_WORD].10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.EXCEPTION_CONVERSION_WORD]10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.EXCEPTION_CONVERSION_WORD] threw NamingException with message: Name [logging.EXCEPTION_CONVERSION_WORD] is not bound in this Context. Unable to find [logging.EXCEPTION_CONVERSION_WORD].. Returning null.10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging.EXCEPTIONCONVERSIONWORD]10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging.EXCEPTIONCONVERSIONWORD] not found - trying original name [logging.EXCEPTIONCONVERSIONWORD]. javax.naming.NameNotFoundException: Name [logging.EXCEPTIONCONVERSIONWORD] is not bound in this Context. Unable to find [logging.EXCEPTIONCONVERSIONWORD].10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging.EXCEPTIONCONVERSIONWORD]10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging.EXCEPTIONCONVERSIONWORD] threw NamingException with message: Name [logging.EXCEPTIONCONVERSIONWORD] is not bound in this Context. Unable to find [logging.EXCEPTIONCONVERSIONWORD].. Returning null.10:40:24.691 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging_exception-conversion-word]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging_exception-conversion-word] not found - trying original name [logging_exception-conversion-word]. javax.naming.NameNotFoundException: Name [logging_exception-conversion-word] is not bound in this Context. Unable to find [logging_exception-conversion-word].10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging_exception-conversion-word]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging_exception-conversion-word] threw NamingException with message: Name [logging_exception-conversion-word] is not bound in this Context. Unable to find [logging_exception-conversion-word].. Returning null.10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging_exception_conversion_word]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging_exception_conversion_word] not found - trying original name [logging_exception_conversion_word]. javax.naming.NameNotFoundException: Name [logging_exception_conversion_word] is not bound in this Context. Unable to find [logging_exception_conversion_word].10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging_exception_conversion_word]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging_exception_conversion_word] threw NamingException with message: Name [logging_exception_conversion_word] is not bound in this Context. Unable to find [logging_exception_conversion_word].. Returning null.10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging_exceptionConversionWord]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging_exceptionConversionWord] not found - trying original name [logging_exceptionConversionWord]. javax.naming.NameNotFoundException: Name [logging_exceptionConversionWord] is not bound in this Context. Unable to find [logging_exceptionConversionWord].10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging_exceptionConversionWord]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup for name [logging_exceptionConversionWord] threw NamingException with message: Name [logging_exceptionConversionWord] is not bound in this Context. Unable to find [logging_exceptionConversionWord].. Returning null.10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [java:comp/env/logging_exceptionconversionword]10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/logging_exceptionconversionword] not found - trying original name [logging_exceptionconversionword]. javax.naming.NameNotFoundException: Name [logging_exceptionconversionword] is not bound in this Context. Unable to find [logging_exceptionconversionword].10:40:24.692 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name [logging_exceptionconversionword] 参考配置教程修改。 摘要：在实际项目开发中使用springboot的时候，可以使用jar包的方式运行项目，也可以将springboot项目打成war包使用。springboot war包运行可能会出现1 [localhost-startStop-1] DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name [java:comp/env/LOGGING.pattern_level] not found - trying original name [LOGGING.pattern_level]. javax.naming.NameNotFoundException: Name [LOGGING.pattern_level] is not bound in this Context. Unable to find [LOGGING.pattern_level]。 反正就是诸如此类的问题吧。 上述的问题，在高版本的spring boot中会出现的，低版本不会出现这个问题。因为高版本中引入了JNDI查询的操作。 解决方案： 在项目的根目录中新建spring.properties配置文件，如下图所示： 添加属性以及值，如下所示：1spring.jndi.ignore=true 原理: 打开StandardServletEnvironment类，该类中的customizePropertySources方法如下： 123456789101112131415161718192021222324252627public static final String JNDI_PROPERTY_SOURCE_NAME = &quot;jndiProperties&quot;;protected void customizePropertySources(MutablePropertySources propertySources) &#123;propertySources.addLast(new StubPropertySource(SERVLET_CONFIG_PROPERTY_SOURCE_NAME));propertySources.addLast(new StubPropertySource(SERVLET_CONTEXT_PROPERTY_SOURCE_NAME));if (JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()) &#123;propertySources.addLast(new JndiPropertySource(JNDI_PROPERTY_SOURCE_NAME));&#125; super.customizePropertySources(propertySources);&#125;JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable()代码如下：public static final String IGNORE_JNDI_PROPERTY_NAME = &quot;spring.jndi.ignore&quot;;private static final boolean shouldIgnoreDefaultJndiEnvironment =SpringProperties.getFlag(IGNORE_JNDI_PROPERTY_NAME);public static boolean isDefaultJndiEnvironmentAvailable() &#123;//如果忽略jndi则返回falseif (shouldIgnoreDefaultJndiEnvironment) &#123;return false;&#125; try &#123; //准备jndi环境 new InitialContext().getEnvironment(); return true;&#125;catch (Throwable ex) &#123; return false;&#125;&#125; 通过上文可知： 1、如果我们需要忽略jndi则可以配置spring.jndi.ignore值为true即可。 2、在哪里配置呢？我们不妨跟进SpringProperties类中的getFlag方法。 spring.jndi.ignore获取原理 SpringProperties类的getFlag方法如下所示： 123public static boolean getFlag(String key) &#123; return Boolean.parseBoolean(getProperty(key));&#125; 继续跟进getProperty方法，如下所示： 123456789101112public static String getProperty(String key) &#123; //获取spring.jndi.ignore值String value = localProperties.getProperty(key);if (value == null) &#123; try &#123;//获取系统的变量 value = System.getProperty(key); &#125; catch (Throwable ex) &#123; &#125; &#125; return value;&#125; 上述的方法可以总结如下： 从localProperties集合中获取spring.jndi.ignore属性，如果没有获取到则直接从环境变量中进行获取。localProperties集合在哪里初始化的呢？我们看一下SpringProperties类中的静态代码块，如下所示： 1234567891011121314151617181920private static final String PROPERTIES_RESOURCE_LOCATION = &quot;spring.properties&quot;;static &#123;try &#123; ClassLoader cl = SpringProperties.class.getClassLoader(); URL url = (cl != null ? cl.getResource(PROPERTIES_RESOURCE_LOCATION) :ClassLoader.getSystemResource(PROPERTIES_RESOURCE_LOCATION)); if (url != null) &#123; logger.info(&quot;Found &apos;spring.properties&apos; file in local classpath&quot;); InputStream is = url.openStream(); try &#123; localProperties.load(is); &#125; finally &#123; is.close(); &#125; &#125; &#125;catch (IOException ex) &#123;&#125;&#125;&#125; 看到上面的代码，我们明白了，原来这里是直接读取跟目录中的spring.properties文件中的所有属性。看到这里，焕然大悟。原来如此。 调试中，我修改了application.yml或者application-dev.yml配置文件，在文件中加入了spring.jndi.ignore=true均为生效，必须新建一个spring.properties，我没有验证spring.yml行不行。 重启tomcat容器，没有jndi的警告日志了。 注意：这种日志如果在本地以直接运行springboot的入口文件的方式启动，是没有的，只有当打成war包，放在tomcat里，启动tomcat/bin/startup.sh时才会有。 经过几步修改，tomcat启动速度明显提高。 部署慢修改原文：https://www.cnblogs.com/mycifeng/p/6972446.html禁用jndi方式原文：https://blog.csdn.net/qq_30739519/article/details/78536965]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>tools</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[reactJS项目build时发生“v8::internal::V8::FatalProcessOutOfMemory”异常]]></title>
    <url>%2F2018%2F07%2F07%2FreactJS%E9%A1%B9%E7%9B%AEbuild%E6%97%B6%E5%8F%91%E7%94%9F%E2%80%9Cv8%3A%3Ainternal%3A%3AV8%3A%3AFatalProcessOutOfMemory%E2%80%9D%E5%BC%82%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[jenkins上build Ant design Pro管理后台项目时内存溢出异常解决简书地址 现象最近工程里有个用Ant Design Pro搭建的前后端分离的后台管理系统，一直使用jenkins自动部署的，但是今天一不小心build失败了。虽然很快就搞定了，但是还是记录一下，好记性不如烂笔头。 问题出现构建失败信息是这样的：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;pre class=&quot;console-output&quot; style=&quot;box-sizing: border-box; white-space: pre-wrap; word-wrap: break-word; margin: 0px; color: rgb(51, 51, 51); font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Started by user [超级管理员](http://jenkins.haier.haiqiang.xin:7776/user/admin)Building in workspace /var/lib/jenkins/workspace/chuangke_pre_portal_web_auto_deploy &gt; git rev-parse --is-inside-work-tree # timeout=10Fetching changes from the remote Git repository &gt; git config remote.origin.url git@git.3vyd.com:portalmanage.git # timeout=10Fetching upstream changes from git@git.3vyd.com:portalmanage.git &gt; git --version # timeout=10 &gt; git fetch --tags --progress git@git.3vyd.com:portalmanage.git +refs/heads/*:refs/remotes/origin/* &gt; git rev-parse refs/remotes/origin/master^&#123;commit&#125; # timeout=10 &gt; git rev-parse refs/remotes/origin/origin/master^&#123;commit&#125; # timeout=10Checking out Revision c9a9d48ae6453a8d84734920f8718abec5598f2a (refs/remotes/origin/master) &gt; git config core.sparsecheckout # timeout=10 &gt; git checkout -f c9a9d48ae6453a8d84734920f8718abec5598f2aCommit message: &quot;直播统计&quot; &gt; git rev-list --no-walk 34ede46c51b5a223746b1c07d0845952d7d0eefd # timeout=10[chuangke_pre_portal_web_auto_deploy] $ /bin/sh -xe /tmp/jenkins1426166608252484443.sh+ yarnyarn install v1.3.2[1/4] Resolving packages...success Already up-to-date.Done in 2.31s.+ REACT_APP_BRANCH=PRE+ yarn buildyarn run v1.3.2$ node scripts/build.jsCreating an optimized production build...&lt;--- Last few GCs ---&gt; 780502 ms: Mark-sweep 1323.4 (1408.7) -&gt; 1317.3 (1408.7) MB, 955.6 / 0.0 ms [allocation failure] [GC in old space requested]. 781304 ms: Mark-sweep 1317.3 (1408.7) -&gt; 1317.3 (1410.7) MB, 802.4 / 0.0 ms [allocation failure] [GC in old space requested]. 782171 ms: Mark-sweep 1317.3 (1410.7) -&gt; 1326.8 (1403.7) MB, 866.5 / 0.0 ms [last resort gc]. 782958 ms: Mark-sweep 1326.8 (1403.7) -&gt; 1336.9 (1403.7) MB, 787.3 / 0.0 ms [last resort gc].&lt;--- JS stacktrace ---&gt;==== JS stack trace =========================================Security context: 0x1116596cf781 &lt;JS Object&gt; 1: stringify [native json.js:~176] [pc=0x1ab7d7e562d3] (this=0x1116596c92a1 &lt;a JSON with map 0xa5d18e09b09&gt;,E=0x27fe2de64711 &lt;an Object with map 0x23d396b32619&gt;,F=0x111659604381 &lt;undefined&gt;,S=0x111659604381 &lt;undefined&gt;) 2: arguments adaptor frame: 1-&gt;3 3: /* anonymous */(aka /* anonymous */) [/var/lib/jenkins/workspace/chuangke_pre_portal_web_auto_deploy/node_modules/webpack/lib/Sou...FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 1: node::Abort() [node] 2: 0xdf1d9c [node] 3: v8::Utils::ReportApiFailure(char const*, char const*) [node] 4: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [node] 5: v8::internal::Factory::NewRawTwoByteString(int, v8::internal::PretenureFlag) [node] 6: v8::internal::String::SlowFlatten(v8::internal::Handle&lt;v8::internal::ConsString&gt;, v8::internal::PretenureFlag) [node] 7: v8::internal::String::Flatten(v8::internal::Handle&lt;v8::internal::String&gt;, v8::internal::PretenureFlag) [node] 8: v8::internal::BasicJsonStringifier::SerializeString(v8::internal::Handle&lt;v8::internal::String&gt;) [node] 9: v8::internal::BasicJsonStringifier::Result v8::internal::BasicJsonStringifier::Serialize_&lt;false&gt;(v8::internal::Handle&lt;v8::internal::Object&gt;, bool, v8::internal::Handle&lt;v8::internal::Object&gt;) [node]10: v8::internal::BasicJsonStringifier::SerializeJSArraySlow(v8::internal::Handle&lt;v8::internal::JSArray&gt;, unsigned int, unsigned int) [node]11: v8::internal::BasicJsonStringifier::Result v8::internal::BasicJsonStringifier::Serialize_&lt;true&gt;(v8::internal::Handle&lt;v8::internal::Object&gt;, bool, v8::internal::Handle&lt;v8::internal::Object&gt;) [node]12: v8::internal::BasicJsonStringifier::Result v8::internal::BasicJsonStringifier::Serialize_&lt;false&gt;(v8::internal::Handle&lt;v8::internal::Object&gt;, bool, v8::internal::Handle&lt;v8::internal::Object&gt;) [node]13: v8::internal::BasicJsonStringifier::Stringify(v8::internal::Handle&lt;v8::internal::Object&gt;) [node]14: v8::internal::Runtime_BasicJSONStringify(int, v8::internal::Object**, v8::internal::Isolate*) [node]15: 0x1ab7ca0092a7error Command failed with signal &quot;SIGABRT&quot;.info Visit [https://yarnpkg.com/en/docs/cli/run](https://yarnpkg.com/en/docs/cli/run) for documentation about this command.Build step &apos;Execute shell&apos; marked build as failureSending e-mails to: marvin.ma@3vyd.com damon.shen@3vyd.comFinished: FAILURE&lt;/pre&gt; 解决思路1、Jenkins服务器系统内存不够看了看jenkins所在服务器的内存，在jenkins执行这个job的时候，内存最高也就140%，因为服务器是Centos 4核16G的配置，用free查看，可用内存仍然9G多。当时没有截图，所以就不贴图了，但是肯定不是说服务器内存吃紧导致的。 2、排除了服务器本身内存小的问题，考虑本次build新进的代码的问题，看了一下就两个commit，因为网上有说是调用file.write的时候处理不当，会导致该问题的产生的，正好本次build有一个commit是添加了富文本编辑器。但是检查一圈好像没有问题。 3、框架问题，限制了内存。 解决方案最后通过https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory一文找到了解决方案。先做本地部署尝试，修改该job的build命令，将原来的 yarnREACT_APP_BRANCH=PRE yarn build 改成了 yarnREACT_APP_BRANCH=PRE node –max-old-space-size=4096 scripts/build.js 重新build，success。 然后因为该项目分开发，测试、生产等多个环境，因此打算在代码框架里直接作为配置项，具体的做法是在package.json的build命令前加上指定内存的参数--max-old-space-size=4096。将原来的：12345&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node scripts/start.js&quot;, &quot;build&quot;: &quot;node scripts/build.js&quot;, &quot;test&quot;: &quot;node scripts/test.js --env=jsdom&quot; &#125; 修改为：12345&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node scripts/start.js&quot;, &quot;build&quot;: &quot;node --max-old-space-size=4096 scripts/build.js&quot;, &quot;test&quot;: &quot;node scripts/test.js --env=jsdom&quot;&#125;, 提交代码，jenkins修改回原来的yarn start，重新build， SUCCESS。一劳永逸。]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tcpdump抓包并用WireShark进行数据分析]]></title>
    <url>%2F2018%2F07%2F07%2Ftcpdump%E6%8A%93%E5%8C%85%E5%B9%B6%E7%94%A8WireShark%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[在linux上使用tcpdump抓取http/tcp报文，使用WireShark进行参数分析。简书地址 1、使用背景最近在项目开发时遇到一种情况，写的接口前端同事反馈是400，后端同事认为http status 是4开头的，肯定是前端的问题，前端的同事又不知道接口是怎么写的，需要传的参数也传了，但是就是400，那么作为负责人，不能任由两边踢皮球吧，得拿出个方案看看为啥400。当然tacpdump这款强大的抓包工具不只是用使用解决我这个很low的问题，我的场景如果是前后端配合得当的话，或者已有默契的话，更好点，如果有文档，就不会有这个问题了。废话少说，直接说怎么做的吧。最后选择linux服务器上抓好报文，用WireShark这款强大的抓包工具来分析一下啦。 工具介绍 Wireshark是一个网络协议检测工具，支持Windows平台和Unix平台，我一般只在Windows平台下使用Wireshark，如果是Linux的话，我直接用tcpdump了，因为我工作环境中的Linux一般只有字符界面，且一般而言Linux都自带的tcpdump，或者用tcpdump抓包以后用Wireshark打开分析。在Windows平台下，Wireshark通过WinPcap进行抓包，封装的很好，使用起来很方便，可以很容易的制定抓包过滤器或者显示过滤器，具体在下面介绍。Wireshark是一个免费的工具，只要google一下就能很容易找到下载的地方。 tcpdump是基于Unix系统的命令行式的数据包嗅探工具。如果要使用tcpdump抓取其他主机MAC地址的数据包，必须开启网卡混杂模式，所谓混杂模式，用最简单的语言就是让网卡抓取任何经过它的数据包，不管这个数据包是不是发给它或者是它发出的，点击【http://en.wikipedia.org/wiki/Promiscuous_mode】获取更多有关混杂模式的资料。一般而言，Unix不会让普通用户设置混杂模式，因为这样可以看到别人的信息，比如telnet的用户名和密码，这样会引起一些安全上的问题，所以只有root用户可以开启混杂模式，开启混杂模式的命令是：ifconfig eth0 promisc, eth0是你要打开混杂模式的网卡。肯定有人要问如果在windows下要不要打开混杂模式，windows下网卡没有什么混杂模式不混杂模式，在于应用程序本身，如使用Wireshark抓包的时候可以通过设置为在混杂模式下抓包（这就是为什么该死的ARP欺骗病毒可以猖狂的原因）。tcpdump当然也可以指定抓包过滤器，而且其过滤器语言非常著名，叫做Berkeley包过滤，简称BPF语言。 2、实际操作实际操作过程因为我作为后端工程师，没有前端环境，因此用我本地接口调试神奇postman来模拟前端。服务端有一个接口是这样的：12345@PostMapping(&quot;tests&quot;)public RtnResult&lt;String&gt; testPost(@RequestBody DataVo vo) &#123; logger.info(&quot;post data:&#123;&#125;&quot; , JSONObject.toJSONString(vo)); return new RtnResult&lt;&gt;(0,&quot;保存成功&quot;);&#125; 用postman本地测试，故意不传参数，效果如下：接下来，抓包查看。 2.1、准备工作 先看看自己本地的ip，有个比较坑的地方，就是不要想当然的认为在本地命令行ipconfig或者ifconfig查看到的就是所谓的本地ip，要看外网出去的对公IP地址。比如http://www.ip138.com/这个网站可以就可以产看本地ip，可以试试，两种方式得到的ip地址是不一样的。 确保服务器安装了tcpdump，一般linux都自带了这个命令，如果没有的自行百度安装。 确定服务器的网卡号，一般默认是eth0。2.2、抓取服务端报文例如我截取本机112.224.67.134和主机39.106.35.56之间的数据，在服务器39.106.35.56的任意目录执行如下命令：12[root@dev ~]# tcpdump -A -i eth0 -w dump-file1 host 112.224.67.134tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes 在本地用post请求服务器的接口 Ctrl+C停止保存抓包，报文内容保存在dump-file1文件内123456789[root@dev ~]# tcpdump -A -i eth0 -w dump-file1 host 112.224.67.134tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes^C24 packets captured25 packets received by filter0 packets dropped by kernel[root@dev ~]# lltotal 4-rw-r--r-- 1 tcpdump tcpdump 2880 Jul 3 14:05 dump-file1[root@dev ~]# 可以使用tcpdump -r dump-file1命令查看123456789101112131415161718192021222324252627[root@dev ~]# tcpdump -r dump-file1 reading from file dump-file1, link-type EN10MB (Ethernet)14:04:30.636260 IP dev.ssh &gt; 112.224.67.134.26919: Flags [P.], seq 332116900:332116952, ack 3962938602, win 255, length 5214:04:30.661616 IP dev.ssh &gt; 112.224.67.134.26919: Flags [P.], seq 52:184, ack 1, win 255, length 13214:04:30.710115 IP 112.224.67.134.26919 &gt; dev.ssh: Flags [.], ack 184, win 66, length 014:04:49.658756 IP 112.224.67.134.26920 &gt; dev.ssh: Flags [P.], seq 3449703456:3449703492, ack 3469026640, win 64, length 3614:04:49.698057 IP dev.ssh &gt; 112.224.67.134.26920: Flags [.], ack 36, win 255, length 014:05:04.771846 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [S], seq 3379667287, win 17520, options [mss 1400,nop,wscale 8,nop,nop,sackOK], length 014:05:04.771914 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [S.], seq 2331290743, ack 3379667288, win 29200, options [mss 1460,nop,nop,sackOK,nop,wscale 7], length 014:05:04.811492 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], ack 1, win 68, length 014:05:04.820465 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [P.], seq 1:415, ack 1, win 68, length 41414:05:04.820496 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, length 014:05:04.824051 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [P.], seq 1:354, ack 415, win 237, length 35314:05:04.824297 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [P.], seq 354:359, ack 415, win 237, length 514:05:04.871458 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], ack 359, win 67, length 014:05:05.911468 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], seq 414:415, ack 359, win 67, length 114:05:05.911526 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, options [nop,nop,sack 1 &#123;414:415&#125;], length 014:05:06.951486 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], seq 414:415, ack 359, win 67, length 114:05:06.951537 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, options [nop,nop,sack 1 &#123;414:415&#125;], length 014:05:08.011588 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], seq 414:415, ack 359, win 67, length 114:05:08.011644 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, options [nop,nop,sack 1 &#123;414:415&#125;], length 014:05:09.051406 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], seq 414:415, ack 359, win 67, length 114:05:09.051452 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, options [nop,nop,sack 1 &#123;414:415&#125;], length 014:05:10.091399 IP 112.224.67.134.58166 &gt; dev.d-s-n: Flags [.], seq 414:415, ack 359, win 67, length 114:05:10.091451 IP dev.d-s-n &gt; 112.224.67.134.58166: Flags [.], ack 415, win 237, options [nop,nop,sack 1 &#123;414:415&#125;], length 014:05:10.130248 IP 112.224.67.134.26919 &gt; dev.ssh: Flags [P.], seq 1:53, ack 184, win 66, length 52[root@dev ~]# 2.2、用wireshark分析报文内容了解tcp网络协议的，看到以上报文，应该已经了解一二了。为了将其转换成常用的http协议，我们用wireshark这款工具再分析一下。下载该文件，在windows上可以直接将该文件拖入到wireshark，会自动打开。可以看到三次握手的具体报文。同时看到了一个post的http request和一个http status为200的http response。右击post请求，选择【追踪流】-&gt;【TCP流】：看到了前端传过来的参数和返回值。 当然，查看服务器log，也看到了日志信息122018-07-03 14:24:16.660 INFO 29004 --- [nio-8086-exec-6] com.hczt.shop.weixin.config.CorsFilter : requesturi is : /weixin/tests2018-07-03 14:24:16.661 INFO 29004 --- [nio-8086-exec-6] c.h.s.weixin.controller.TestController : post data:&#123;&quot;address&quot;:&quot;山东青岛&quot;,&quot;age&quot;:28,&quot;name&quot;:&quot;张三&quot;,&quot;sex&quot;:&quot;男&quot;&#125; 这里演示的正常返回的，如果接口是400，服务端也就没有这条log，这时候抓包也才更有意义了。到这里，基本的使用就介绍完了。至于WireShark在本地怎么使用，怎么添加过滤器等，查看其它博文学习。 3、推荐WireShark抓包使用教程tcpdump语法介绍与常用参数举例]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“SpringBoot2.0不容错过的新特性 WebFlux响应式编程”学习笔记(一)]]></title>
    <url>%2F2018%2F07%2F07%2Fspringboot2.0-webflux-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%2F</url>
    <content type="text"><![CDATA[WebFlux响应式编程好记性不如烂笔头简书地址 慕课网学习地址：https://coding.imooc.com/class/209.html原课程是付费的，但是同事发了我下载离线版，拿来抽空学呗，学无止境。 第一节 课程介绍 第二节 函数式编程和lambda表达式 数组里取最小值 12345678910111213141516public static void main(String[] args) &#123; int[] nums = &#123;33,55,-55,90,-666,90&#125;; int min = Integer.MAX_VALUE; for (int i : nums) &#123; if(i &lt; min) &#123; min = i; &#125; &#125; System.out.println(min); // jdk8 int min2 = IntStream.of(nums).parallel().min().getAsInt(); System.out.println(min2);&#125; 多线程 匿名内部类 1234567891011121314151617public static void main(String[] args) &#123; Object target = new Runnable() &#123; @Override public void run() &#123; System.out.println(&quot;ok&quot;); &#125; &#125;; new Thread((Runnable) target).start(); // jdk8 lambda Object target2 = (Runnable)() -&gt; System.out.println(&quot;ok&quot;); Runnable target3 = () -&gt; System.out.println(&quot;ok&quot;); System.out.println(target2 == target3); // false new Thread((Runnable) target2).start();&#125; 函数接口以及链式操作 123456789101112131415161718192021222324import java.text.DecimalFormat;import java.util.function.Function;class MyMoney &#123; private final int money; public MyMoney(int money) &#123; this.money = money; &#125; public void printMoney(Function&lt;Integer, String&gt; moneyFormat) &#123; System.out.println(&quot;我的存款：&quot; + moneyFormat.apply(this.money)); &#125;&#125;public class MoneyDemo &#123; public static void main(String[] args) &#123; MyMoney me = new MyMoney(99999999); Function&lt;Integer, String&gt; moneyFormat = i -&gt; new DecimalFormat(&quot;#,###&quot;) .format(i); // 函数接口链式操作 me.printMoney(moneyFormat.andThen(s -&gt; &quot;人民币 &quot; + s)); &#125;&#125; 运行效果 我的存款：人民币 99,999,999 函数式接口1234567891011public static void main(String[] args) &#123; // 断言函数接口 IntPredicate predicate = i -&gt; i &gt; 0; System.out.println(predicate.test(-9)); //建议使用带类型的接口，这样就不用写泛型了 // IntConsumer // 消费函数接口 Consumer&lt;String&gt; consumer = s -&gt; System.out.println(s); consumer.accept(&quot;输入的数据&quot;);&#125; 方法引用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109import java.util.ArrayList;import java.util.List;import java.util.function.Consumer;import java.util.function.IntUnaryOperator;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author marvin.ma * @create 2018-07-03 18:58 * @desc $&#123;DESCRIPTION&#125; **/class Dog &#123; private String name = &quot;哮天犬&quot;; /** * 默认10斤狗粮 */ private int food = 10; public Dog() &#123; &#125; /** * 带参数的构造函数 * * @param name */ public Dog(String name) &#123; this.name = name; &#125; /** * 狗叫，静态方法 * * @param dog */ public static void bark(Dog dog) &#123; System.out.println(dog + &quot;叫了&quot;); &#125; /** * 吃狗粮 JDK * * 默认会把当前实例传入到非静态方法，参数名为this，位置是第一个； * * @param num * @return 还剩下多少斤 */ public int eat(int num) &#123; System.out.println(&quot;吃了&quot; + num + &quot;斤狗粮&quot;); this.food -= num; return this.food; &#125; @Override public String toString() &#123; return this.name; &#125;&#125;public class MethodRefrenceDemo &#123; public static void main(String[] args) &#123; Dog dog = new Dog(); dog.eat(3); // 方法引用 Consumer&lt;String&gt; consumer = System.out::println; consumer.accept(&quot;接受的数据&quot;); // 静态方法的方法引用 Consumer&lt;Dog&gt; consumer2 = Dog::bark; consumer2.accept(dog); // 非静态方法，使用对象实例的方法引用 // Function&lt;Integer, Integer&gt; function = dog::eat; // UnaryOperator&lt;Integer&gt; function = dog::eat; //入参出参都是Integer，可以用这个 IntUnaryOperator function = dog::eat; // dog置空，不影响下面的函数执行，因为java 参数是传值 dog = null; System.out.println(&quot;还剩下&quot; + function.applyAsInt(2) + &quot;斤&quot;); // // // 使用类名来方法引用 // BiFunction&lt;Dog, Integer, Integer&gt; eatFunction = Dog::eat; // System.out.println(&quot;还剩下&quot; + eatFunction.apply(dog, 2) + &quot;斤&quot;); // // // 构造函数的方法引用 // Supplier&lt;Dog&gt; supplier = Dog::new; // System.out.println(&quot;创建了新对象：&quot; + supplier.get()); // // 带参数的构造函数的方法引用 Function&lt;String, Dog&gt; function2 = Dog::new; System.out.println(&quot;创建了新对象：&quot; + function2.apply(&quot;旺财&quot;)); // 测试java变量是传值还是穿引用 List&lt;String&gt; list = new ArrayList&lt;&gt;(); test(list); System.err.println(list); &#125; private static void test(List&lt;String&gt; list) &#123; list = null; &#125;&#125; 运行输出：吃了3斤狗粮接受的数据哮天犬叫了吃了2斤狗粮还剩下5斤创建了新对象：旺财 类型引用123456789101112131415161718192021222324252627282930313233343536373839404142434445@FunctionalInterfaceinterface IMath &#123; int add(int x, int y);&#125;@FunctionalInterfaceinterface IMath2 &#123; int sub(int x, int y);&#125;public class TypeDemo &#123; public static void main(String[] args) &#123; // 变量类型定义 IMath lambda = (x, y) -&gt; x + y; // 数组里 IMath[] lambdas = &#123; (x, y) -&gt; x + y &#125;; // 强转 Object lambda2 = (IMath) (x, y) -&gt; x + y; // 通过返回类型 IMath createLambda = createLambda(); TypeDemo demo = new TypeDemo(); // 当有二义性的时候，使用强转对应的接口解决 demo.test( (IMath2)(x, y) -&gt; x + y); &#125; public void test(IMath math) &#123; &#125; public void test(IMath2 math) &#123; &#125; public static IMath createLambda() &#123; return (x, y) -&gt; x + y; &#125;&#125; 级联表达式和珂里化级联表达式：有多个箭头的函数柯里化：把多个参数的函数转换为只有一个参数的函数高阶函数：就是返回函数的函数123456789101112131415161718192021222324252627282930313233343536import java.util.function.Function;/** * 级联表达式和柯里化 * 柯里化:把多个参数的函数转换为只有一个参数的函数 * 柯里化的目的：函数标准化 * 高阶函数：就是返回函数的函数 */public class CurryDemo &#123; public static void main(String[] args) &#123; // 实现了x+y的级联表达式 Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt; fun = x -&gt; y -&gt; x + y; System.out.println(fun.apply(2).apply(3)); Function&lt;Integer, Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;&gt; fun2 = x -&gt; y -&gt; z -&gt; x + y + z; System.out.println(fun2.apply(2).apply(3).apply(4)); int[] nums = &#123; 2, 3, 4 &#125;; Function f = fun2; for (int i = 0; i &lt; nums.length; i++) &#123; if (f instanceof Function) &#123; Object obj = f.apply(nums[i]); if (obj instanceof Function) &#123; f = (Function) obj; &#125; else &#123; System.out.println(&quot;调用结束：结果为&quot; + obj); &#125; &#125; &#125; &#125;&#125; 执行结果 59调用结束：结果为9 第三节 Stream流编程 demo1123456789101112131415161718192021222324252627282930313233343536373839import java.util.stream.IntStream;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-03 22:17 * @desc $&#123;DESCRIPTION&#125; **/public class StreamDemo1 &#123; public static void main(String[] args) &#123; int[] nums = &#123;1, 2, 3&#125;; // 外部迭代 int sum = 0; for (int i : nums) &#123; sum += i; &#125; System.out.println(&quot;结果为：&quot; + sum); // 使用stream的内部迭代 // map就是中间操作（返回stream的操作） // sum就是终止操作 System.out.println(&quot;结果为：&quot; + IntStream.of(nums).sum()); int sum2 = IntStream.of(nums).map(i -&gt; i*2).sum(); System.out.println(&quot;结果为：&quot; + sum2); System.out.println(&quot;惰性求值就是终止没有调用的情况下，中间操作不会执行&quot;); IntStream.of(nums).map(StreamDemo1::doubleNum); &#125; public static int doubleNum(int i) &#123; System.out.println(&quot;执行了乘以2&quot;); return i * 2; &#125;&#125; 执行结果: 结果为：6结果为：6结果为：12惰性求值就是终止没有调用的情况下，中间操作不会执行 demo 2, 流的创建1234567891011121314151617181920212223242526public class StreamDemo2 &#123; public static void main(String[] args) &#123; List&lt;String&gt; list = new ArrayList&lt;&gt;(); // 从集合创建 list.stream(); list.parallelStream(); // 从数组创建 Arrays.stream(new int[] &#123; 2, 3, 5 &#125;); // 创建数字流 IntStream.of(1, 2, 3); IntStream.rangeClosed(1, 10); // 使用random创建一个无限流 new Random().ints().limit(10); Random random = new Random(); // 自己产生流 Stream.generate(() -&gt; random.nextInt()).limit(20); &#125;&#125; demo3，流的中间操作 12345678910111213141516171819202122232425262728293031323334import java.util.Random;import java.util.stream.Stream;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-03 22:39 * @desc 流的中间操作 **/public class StreamDemo3 &#123; public static void main(String[] args) &#123; String str = &quot;my name is 007&quot;; //把每个单词的长度调用出来 Stream.of(str.split(&quot; &quot;)).filter(s -&gt; s.length() &gt; 2).map(s -&gt; s.length()).forEach(System.out::println); //flatMap 适合A元素下面有B属性，B属性是集合，最终得到所有A元素里面的所有B属性的集合 // intStream/longStream 并不是Stream的子类，所以要进行装箱 boxed Stream.of(str.split(&quot; &quot;)).flatMap(s -&gt; s.chars().boxed()) .forEach(i -&gt; System.out.println((char)i.intValue())); //peek 用于debug，是个中间操作，与foreach不同，foreach是终止操作 System.out.println(&quot;--------------peek------------&quot;); Stream.of(str.split(&quot; &quot;)).peek(System.out::println) .forEach(System.out::println); //limit的使用 new Random().ints().filter(i -&gt; i &gt; 100 &amp;&amp; i &lt; 1000).limit(10) .forEach(System.out::println); &#125;&#125; stream的终止操作 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051import java.util.*;import java.util.stream.Collectors;import java.util.stream.Stream;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-06 13:33 * @desc $&#123;DESCRIPTION&#125; **/public class StreamDemo4 &#123; public static void main(String[] args) &#123; String str = &quot;my name is 007&quot;; //使用并行流 str.chars().parallel().forEach(i -&gt; System.out.print((char)i)); System.out.println(); // 使用 forEachOrdered 保证顺序 str.chars().parallel().forEachOrdered(i -&gt; System.out.print((char) i)); System.out.println(); //收集到list/set set时最后使用toSet方法 List&lt;String&gt; list = Stream.of(str.split(&quot; &quot;)).collect(Collectors.toList()); System.out.println(list); //使用reduce拼接字符串 Optional&lt;String&gt; letters = Stream.of(str.split(&quot; &quot;)).reduce((s1, s2) -&gt; s1 + &quot;|&quot; + s2); System.out.println(letters.orElse(&quot;&quot;)); //带初始值的reduce String reduce = Stream.of(str.split(&quot; &quot;)).reduce(&quot;&quot;, (s1, s2) -&gt; s1 + &quot;|&quot; + s2); System.out.println(reduce); //计算所有单词总长度 Integer length = Stream.of(str.split(&quot; &quot;)).map(s -&gt; s.length()) .reduce(0, (s1, s2) -&gt; s1 +s2); System.out.println(length); //使用max函数 Optional&lt;String&gt; max = Stream.of(str.split(&quot; &quot;)).max(Comparator.comparingInt(String::length)); System.out.println(max.get()); //// 使用 findFirst 短路操作 OptionalInt findFirst = new Random().ints().filter(i -&gt; i &gt; 10000).findFirst(); System.out.println(findFirst.getAsInt()); &#125;&#125; 运行结果： immnae7y 0 0 smy name is 007[my, name, is, 007]&gt;my|name|is|007|my|name|is|00711name113660557 并行流 &amp; 串行流知识点1、调用parallel 产生一个并行流.2、调用sequential 产生串行流.3、多次调用 parallel / sequential, 以最后一次调用为准.4、并行流使用的默认线程池名称: ForkJoinPool.commonPool，默认的线程数是 当前机器的cpu个数.5、使用这个属性可以修改默认的线程数：System.setProperty(“java.util.concurrent.ForkJoinPool.common.parallelism”, “20”);6、一般地，推荐使用自己的线程池, 不使用默认线程池, 防止任务被阻塞。注意在main函数中调用，要让main函数不退出，等会儿再退出。自己新起的线程要用shutdown关闭，不然会一直执行着。1234567891011121314151617181920212223public static void main(String[] args) &#123; ForkJoinPool pool = new ForkJoinPool(20); pool.submit(() -&gt; IntStream.range(1, 100).parallel() .peek(StreamDemo5::debug).count()); pool.shutdown(); synchronized (pool) &#123; try &#123; pool.wait(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;public static void debug(int i) &#123; System.out.println(Thread.currentThread().getName() + &quot; debug &quot; + i); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125; 运行结果 ForkJoinPool-1-worker-25 debug 65ForkJoinPool-1-worker-18 debug 31ForkJoinPool-1-worker-11 debug 90ForkJoinPool-1-worker-4 debug 15ForkJoinPool-1-worker-19 debug 56ForkJoinPool-1-worker-15 debug 81ForkJoinPool-1-worker-8 debug 21ForkJoinPool-1-worker-26 debug 40ForkJoinPool-1-worker-29 debug 43ForkJoinPool-1-worker-12 debug 93ForkJoinPool-1-worker-5 debug 28ForkJoinPool-1-worker-30 debug 78ForkJoinPool-1-worker-22 debug 96ForkJoinPool-1-worker-23 debug 87ForkJoinPool-1-worker-1 debug 6ForkJoinPool-1-worker-9 debug 12ForkJoinPool-1-worker-16 debug 18ForkJoinPool-1-worker-2 debug 3ForkJoinPool-1-worker-27 debug 48ForkJoinPool-1-worker-20 debug 37 收集器所收集的对象信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class Student &#123; private String name; private int age; private Gender gender; private Grade grade; public Student(String name, int age, Gender gender, Grade grade) &#123; super(); this.name = name; this.age = age; this.gender = gender; this.grade = grade; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125; public Gender getGender() &#123; return gender; &#125; public void setGender(Gender gender) &#123; this.gender = gender; &#125; public Grade getGrade() &#123; return grade; &#125; public void setGrade(Grade grade) &#123; this.grade = grade; &#125; @Override public String toString() &#123; return &quot;[name=&quot; + name + &quot;, age=&quot; + age + &quot;, gender=&quot; + gender + &quot;, grade=&quot; + grade + &quot;]&quot;; &#125;&#125;/** * 性别 */enum Gender &#123; MALE, FEMALE&#125;/** * 班级 */enum Grade &#123; ONE, TWO, THREE, FOUR;&#125; 测试类：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import org.apache.commons.collections.MapUtils;import java.util.Arrays;import java.util.IntSummaryStatistics;import java.util.List;import java.util.Map;import java.util.stream.Collectors;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-07 22:37 * @desc 流收集器demo **/public class CollectDemo &#123; public static void main(String[] args) &#123; // 测试数据 List&lt;Student&gt; students = Arrays.asList( new Student(&quot;小明&quot;, 10, Gender.MALE, Grade.ONE), new Student(&quot;大明&quot;, 9, Gender.MALE, Grade.THREE), new Student(&quot;小白&quot;, 8, Gender.FEMALE, Grade.TWO), new Student(&quot;小黑&quot;, 13, Gender.FEMALE, Grade.FOUR), new Student(&quot;小红&quot;, 7, Gender.FEMALE, Grade.THREE), new Student(&quot;小黄&quot;, 13, Gender.MALE, Grade.ONE), new Student(&quot;小青&quot;, 13, Gender.FEMALE, Grade.THREE), new Student(&quot;小紫&quot;, 9, Gender.FEMALE, Grade.TWO), new Student(&quot;小王&quot;, 6, Gender.MALE, Grade.ONE), new Student(&quot;小李&quot;, 6, Gender.MALE, Grade.ONE), new Student(&quot;小马&quot;, 14, Gender.FEMALE, Grade.FOUR), new Student(&quot;小刘&quot;, 13, Gender.MALE, Grade.FOUR)); // 得到所有学生的年龄列表 // 推荐使用方法引用Student::getAge，不要使用s-&gt;s.getAge(),就不会多生成一个类似 lambda$0这样的函数 List&lt;Integer&gt; ages = students.stream().map(Student::getAge).collect(Collectors.toList()); System.out.println(&quot;所有学生的年龄:&quot; + ages); // 统计汇总信息 IntSummaryStatistics agesSummaryStatistics = students.stream().collect(Collectors.summarizingInt(Student::getAge)); System.out.println(&quot;年龄汇总信息:&quot; + agesSummaryStatistics); //分块 Map&lt;Boolean, List&lt;Student&gt;&gt; genders = students.stream().collect(Collectors.partitioningBy(s -&gt; s.getGender() == Gender.MALE)); //System.out.println(&quot;男女学生列表:&quot; + genders); MapUtils.verbosePrint(System.out, &quot;男女学生列表&quot;, genders); //分组，比如分块就是分两组，返回boolean Map&lt;Grade, List&lt;Student&gt;&gt; grades = students.stream().collect(Collectors.groupingBy(Student::getGrade)); MapUtils.verbosePrint(System.out, &quot;学生班级列表&quot;, grades); //得到所有班级学生的个数 Map&lt;Grade, Long&gt; gradesCount = students.stream().collect(Collectors.groupingBy(Student::getGrade, Collectors.counting())); MapUtils.verbosePrint(System.out, &quot;学生班级个数列表&quot;, gradesCount); &#125;&#125; 运行结果： Connected to the target VM, address: ‘javadebug’, transport: ‘shared memory’所有学生的年龄:[10, 9, 8, 13, 7, 13, 13, 9, 6, 6, 14, 13]年龄汇总信息:IntSummaryStatistics{count=12, sum=121, min=6, average=10.083333, max=14}男女学生列表 ={ false = [[name=小白, age=8, gender=FEMALE, grade=TWO], [name=小黑, age=13, gender=FEMALE, grade=FOUR], [name=小红, age=7, gender=FEMALE, grade=THREE], [name=小青, age=13, gender=FEMALE, grade=THREE], [name=小紫, age=9, gender=FEMALE, grade=TWO], [name=小马, age=14, gender=FEMALE, grade=FOUR]] true = [[name=小明, age=10, gender=MALE, grade=ONE], [name=大明, age=9, gender=MALE, grade=THREE], [name=小黄, age=13, gender=MALE, grade=ONE], [name=小王, age=6, gender=MALE, grade=ONE], [name=小李, age=6, gender=MALE, grade=ONE], [name=小刘, age=13, gender=MALE, grade=FOUR]]}学生班级列表 ={ ONE = [[name=小明, age=10, gender=MALE, grade=ONE], [name=小黄, age=13, gender=MALE, grade=ONE], [name=小王, age=6, gender=MALE, grade=ONE], [name=小李, age=6, gender=MALE, grade=ONE]] FOUR = [[name=小黑, age=13, gender=FEMALE, grade=FOUR], [name=小马, age=14, gender=FEMALE, grade=FOUR], [name=小刘, age=13, gender=MALE, grade=FOUR]] TWO = [[name=小白, age=8, gender=FEMALE, grade=TWO], [name=小紫, age=9, gender=FEMALE, grade=TWO]] THREE = [[name=大明, age=9, gender=MALE, grade=THREE], [name=小红, age=7, gender=FEMALE, grade=THREE], [name=小青, age=13, gender=FEMALE, grade=THREE]]}Disconnected from the target VM, address: ‘javadebug’, transport: ‘shared memory’学生班级个数列表 ={ ONE = 4 FOUR = 3 TWO = 2 THREE = 3} Stream 运行机制验证： 所有操作是链式调用, 一个元素只迭代一次 每一个中间操作返回一个新的流. 流里面有一个属性sourceStage指向同一个 地方,就是Head Head-&gt;nextStage-&gt;nextStage-&gt;… -&gt; null 有状态操作会把无状态操作阶段,单独处理 并行环境下, 有状态的中间操作不一定能并行操作 parallel/ sequetial 这2个操作也是中间操作(也是返回stream)但是他们不创建流, 他们只修改 Head的并行标志 第三节 reactive stream 响应式流1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889import java.util.concurrent.Flow;import java.util.concurrent.SubmissionPublisher;import java.util.concurrent.TimeUnit;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-08 0:03 * @desc 响应式流 **/public class FlowDemo &#123; public static void main(String[] args) throws InterruptedException &#123; //1.定义发布者，发布的数据类型是Integer // 直接使用jdk自带的SubmissionPublisher，它实现了Publisher接口 SubmissionPublisher&lt;Integer&gt; publisher = new SubmissionPublisher&lt;&gt;(); //2. 定义订阅者 Flow.Subscriber&lt;Integer&gt; subscriber = new Flow.Subscriber&lt;Integer&gt;() &#123; private Flow.Subscription subscription; @Override public void onSubscribe(Flow.Subscription subscription) &#123; // 保存订阅关系，需要用它来给发布者响应 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(Integer item) &#123; // 接收一个数据，并处理 System.out.println(&quot;接收到的数据：&quot; + item); try &#123; TimeUnit.SECONDS.sleep(3); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 处理完调用request再请求一个数据 this.subscription.request(1); //或者 已经达到了目标，调用cancel告诉发布者不再接收数据了 //this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; //出现了异常（例如处理数据的时候产生了异常） throwable.printStackTrace(); //我们可以告诉发布者，后面不接收数据了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 全部数据处理完了（发布者关闭了） System.out.println(&quot;处理完了！&quot;); &#125; &#125;; //3. 发布者和订阅者建立订阅关系 publisher.subscribe(subscriber); //4. 生产数据，并发布 这里忽略数据生产过程 for (int i=0;i&lt;1000;i++) &#123; System.out.println(&quot;生成数据：&quot; + i); //submit 是个block方法 publisher.submit(i); &#125; //5. 结束后 关闭发布者 // 正式环境应该放在finally或者使用try-resource 确保关闭 publisher.close(); //主线程延迟停止， 否则数据没有消费就退出了 Thread.currentThread().join(1000); //debug的时候，下面这行需要有断点。否则主线程结束无法debug System.out.println(); &#125;&#125; 运行效果 生成数据：262接收到的数据：6生成数据：263接收到的数据：7生成数据：264接收到的数据：8生成数据：265接收到的数据：9生成数据：266接收到的数据：10生成数据：267接收到的数据：11生成数据：268 另一个例子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135import java.util.concurrent.Flow;import java.util.concurrent.SubmissionPublisher;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author 马海强 * @create 2018-07-08 23:14 * @desc 带 process 的 flow demo * Processor, 需要继承SubmissionPublisher并实现Processor接口 * 输入源数据 integer, 过滤掉小于0的, 然后转换成字符串发布出去 **/class MyProcessor extends SubmissionPublisher&lt;String&gt; implements Flow.Processor&lt;Integer, String&gt; &#123; private Flow.Subscription subscription; @Override public void onSubscribe(Flow.Subscription subscription) &#123; // 保存订阅关系, 需要用它来给发布者响应 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(Integer item) &#123; // 接受到一个数据, 处理 System.out.println(&quot;处理器接受到数据: &quot; + item); // 过滤掉小于0的, 然后发布出去 if (item &gt; 0) &#123; this.submit(&quot;转换后的数据:&quot; + item); &#125; // 处理完调用request再请求一个数据 this.subscription.request(1); // 或者 已经达到了目标, 调用cancel告诉发布者不再接受数据了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 出现了异常(例如处理数据的时候产生了异常) throwable.printStackTrace(); // 我们可以告诉发布者, 后面不接受数据了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 全部数据处理完了(发布者关闭了) System.out.println(&quot;处理器处理完了!&quot;); // 关闭发布者 this.close(); &#125;&#125;public class FlowDemo2 &#123; public static void main(String[] args) throws Exception &#123; // 1. 定义发布者, 发布的数据类型是 Integer // 直接使用jdk自带的SubmissionPublisher SubmissionPublisher&lt;Integer&gt; publiser = new SubmissionPublisher&lt;Integer&gt;(); // 2. 定义处理器, 对数据进行过滤, 并转换为String类型 MyProcessor processor = new MyProcessor(); // 3. 发布者 和 处理器 建立订阅关系 publiser.subscribe(processor); // 4. 定义最终订阅者, 消费 String 类型数据 Flow.Subscriber&lt;String&gt; subscriber = new Flow.Subscriber&lt;String&gt;() &#123; private Flow.Subscription subscription; @Override public void onSubscribe(Flow.Subscription subscription) &#123; // 保存订阅关系, 需要用它来给发布者响应 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(String item) &#123; // 接受到一个数据, 处理 System.out.println(&quot;接受到数据: &quot; + item); // 处理完调用request再请求一个数据 this.subscription.request(1); // 或者 已经达到了目标, 调用cancel告诉发布者不再接受数据了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 出现了异常(例如处理数据的时候产生了异常) throwable.printStackTrace(); // 我们可以告诉发布者, 后面不接受数据了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 全部数据处理完了(发布者关闭了) System.out.println(&quot;处理完了!&quot;); &#125; &#125;; // 5. 处理器 和 最终订阅者 建立订阅关系 processor.subscribe(subscriber); // 6. 生产数据, 并发布 // 这里忽略数据生产过程 publiser.submit(-111); publiser.submit(111); // 7. 结束后 关闭发布者 // 正式环境 应该放 finally 或者使用 try-resouce 确保关闭 publiser.close(); // 主线程延迟停止, 否则数据没有消费就退出 Thread.currentThread().join(1000); &#125;&#125; 运行结果: 处理器接受到数据: -111处理器接受到数据: 111处理器处理完了!接受到数据: 转换后的数据:111处理完了!]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>webflux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot之“服务端推送事件SSE（server-send-events）”]]></title>
    <url>%2F2018%2F07%2F01%2Fspringboot%E4%B9%8B%E2%80%9C%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A8%E9%80%81%E4%BA%8B%E4%BB%B6SSE%EF%BC%88server-send-events%EF%BC%89%E2%80%9D%2F</url>
    <content type="text"><![CDATA[server-send-events简单应用demo简书地址 1.应用场景当我们做异步请求处理的时候，客户端向服务端的请求不是立即返回的，而是在服务端有数据的时候才发送给客户端的。本例演示是服务端数据是另外的事件触发并推送给客户端的。 当使用微信或者支付宝扫码支付的时候，在客户支付成功之后，后台得到微信(支付宝)回调需要通知我们的客户端支付已经完成，客户端得到通知后可以做一些后续的操作。这涉及到后台需要将支付成功的消息主动推送给客户端，让客户端记性后续的操作。 客户端向后台(SseController-&gt;push)发送异步请求，客户端处于监听等待状态; 微信(支付宝)支付成功后回调后台(SseController-&gt;payCallback模拟); payCallback方法通过applicationContext.publishEvent向系统内部发送支付完成事件; push方法通过payCompletedListener监听事件并通过SseEmitter发送给客户端。名词解释：SSE–server send event是一种服务端推送的技术，本例使用SseEmitter来实现。2. 上代码web api 接口类SseController123456789101112131415161718192021222324252627@RestControllerpublic class SseController &#123; @Autowired ApplicationContext applicationContext; @Autowired PayCompletedListener payCompletedListener; @GetMapping(&quot;/push&quot;) public SseEmitter push(@RequestParam Long payRecordId)&#123; final SseEmitter emitter = new SseEmitter(); try &#123; payCompletedListener.addSseEmitters(payRecordId,emitter); &#125;catch (Exception e)&#123; emitter.completeWithError(e); &#125; return emitter; &#125; @GetMapping(&quot;/pay-callback&quot;) public String payCallback(@RequestParam Long payRecordId)&#123; applicationContext.publishEvent(new PayCompletedEvent(this,payRecordId)); return &quot;请到监听处查看消息&quot;; &#125;&#125; 支付完成事件 PayCompletedEvent12345678910@Getter@Setterpublic class PayCompletedEvent extends ApplicationEvent &#123; private Long payRecordId; public PayCompletedEvent(Object source, Long payRecordId) &#123; super(source); this.payRecordId = payRecordId; &#125;&#125; 支付完成事件监听器PayCompletedListener1234567891011121314151617@Componentpublic class PayCompletedListener &#123; private static Map&lt;Long,SseEmitter&gt; sseEmitters = new Hashtable&lt;&gt;(); public void addSseEmitters(Long payRecordId, SseEmitter sseEmitter) &#123; sseEmitters.put(payRecordId, sseEmitter); &#125; @EventListener public void deployEventHandler(PayCompletedEvent payCompletedEvent) throws IOException &#123; Long payRecordId = payCompletedEvent.getPayRecordId(); SseEmitter sseEmitter = sseEmitters.get(payRecordId); sseEmitter.send(&quot;支付成功&quot;); sseEmitter.complete(); &#125;&#125; 3. 效果演示 先访问http://localhost:8080/push?payRecordId=123,此时客户端处于等待状态. 再访问http://localhost:8080/pay-callback?payRecordId=123,模拟回调通知客户端支付成功,这是会通知上一步并推送到客户端. 4. 另外一个极简的例子 服务端模拟servlet的一个get请求 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859import java.io.IOException;import java.util.concurrent.TimeUnit;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class SSE */@WebServlet(&quot;/SSE&quot;)public class SSE extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public SSE() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse * response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.setContentType(&quot;text/event-stream&quot;); response.setCharacterEncoding(&quot;utf-8&quot;); for (int i = 0; i &lt; 5; i++) &#123; // 指定事件标识 response.getWriter().write(&quot;event:me\n&quot;); // 格式: data: + 数据 + 2个回车 response.getWriter().write(&quot;data:&quot; + i + &quot;\n\n&quot;); response.getWriter().flush(); try &#123; TimeUnit.SECONDS.sleep(1); &#125; catch (InterruptedException e) &#123; &#125; &#125; &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse * response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; 模拟客户端的代码 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/javascript&quot;&gt; // 初始化, 参数为url // 依赖H5 var sse = new EventSource(&quot;SSE&quot;); sse.onmessage = function(e) &#123; console.log(&quot;message&quot;, e.data, e); &#125; // 监听指定事件, (就不会进入onmessage了) sse.addEventListener(&quot;me&quot;, function(e) &#123; console.log(&quot;me event&quot;, e.data); // 如果不关闭,会自动重连 if (e.data == 3) &#123; sse.close(); &#125; &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 效果 5.鸣谢http://www.wisely.top/2018/03/01/sse-eventlistener/]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>sse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[springboot 之 “定时任务-动态修改表达式”]]></title>
    <url>%2F2018%2F06%2F29%2Fspringboot%20%E4%B9%8B%20%E2%80%9C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E2%80%9D%2F</url>
    <content type="text"><![CDATA[定时任务主要用于定时发送邮件、夜间自动维护等。简书地址 （1）开启定时任务功能1234567891011@Configuration @EnableScheduling public class SpringTaskScheduleConfig &#123; @Bean public TaskScheduler poolScheduler() &#123; ThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler(); scheduler.setThreadNamePrefix(&quot;poolScheduler&quot;); scheduler.setPoolSize(10); return scheduler; &#125; &#125; 或者在运行类TaskApplication添加上@EnableScheduling注解。（2）主角登场，添加定时任务 简单方式：修改定时任务的执行周期； 按正常来讲，修改定时任务的执行周期，把服务停下来，改下任务的cron参数，再重启服务就搞搞定了。这种方式很简单，没有可说的，但是有没有一种可能，在不停服务的情况下，就可以动态的修改任务的cron参数呢？哈哈，那是必须的必。比如： 123456789101112131415161718192021222324252627import com.hczt.haier.task.service.UserTaskService;import lombok.extern.slf4j.Slf4j;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;import javax.annotation.Resource;/** * 用户菜单定时设置 */@Slf4j@Componentpublic class UserMenuTask &#123; @Resource private UserTaskService userTaskService; /** * 每天一点进行同步 */ @Scheduled(cron = &quot;0 0 1 * * *&quot;) public void setUserMenu()&#123; log.info(&quot;-----Start Set User Menus -----&quot;); userTaskService.timeSetMenus(); log.info(&quot;-----End Set User Menus -----&quot;); &#125;&#125; 动态修改定时任务的执行周期； 首先我们先会回顾下，我们之前是使用了@Scheduled(cron =“0/5 *”)这种方式适用于固定任务周期的任务，若要修改任务执行周期，只能走“停服务—修改任务执行周期—重启服务”这条路。那么如何动态修改呢，我们看下步骤： ① 在定时任务类上增加@EnabledScheduling注解，并实现SchedulingConfigurer接口。② 设置一个静态的cron，用于存放任务执行周期参数。③ 开启一个线程，用于模拟实际业务中外部原因修改了任务执行周期。④ 设置任务触发器，触发任务执行。 本项目是基于spring data jpa的，数据检索使用的是repository，具体创建数据表：1234567891011121314CREATE TABLE `t_scheduled_task_cron` ( `task_cron_id` INT(11) NOT NULL AUTO_INCREMENT COMMENT &apos;id自增&apos;, `task_code` VARCHAR(40) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;定时任务编码&apos;, `task_name` VARCHAR(40) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;定时任务名称&apos;, `task_package` VARCHAR(400) NULL DEFAULT &apos;&apos; COMMENT &apos;定时任务包名&apos;, `task_cron` VARCHAR(40) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;定时任务执行表达式&apos;, `task_cron_description` VARCHAR(400) NOT NULL DEFAULT &apos;&apos;, `remark` VARCHAR(400) NULL DEFAULT NULL COMMENT &apos;备注&apos;, PRIMARY KEY (`task_cron_id`))COMMENT=&apos;定时任务执行时间存储表&apos;COLLATE=&apos;utf8mb4_general_ci&apos;ENGINE=InnoDB; 创建实体12345678910111213141516171819202122232425262728import javax.persistence.*;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author marvin.ma * @create 2018-06-28 22:35 * @desc 定时任务表达式实体 **/@Data@Entity@Table(name = &quot;t_scheduled_task_cron&quot;)public class ScheduledTaskCron &#123; @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = &quot;task_cron_id&quot;) private String taskCronId; private String taskCode; private String taskName; private String taskPackage; private String taskCron; private String taskCronDescription; private String remark;&#125; 创建repository1234567891011121314151617import com.hczt.haier.db.user.entity.ScheduledTaskCron;import org.springframework.data.jpa.repository.JpaRepository;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author marvin.ma * @create 2018-06-28 22:37 * @desc 定时任务表达式dao **/public interface ScheduledTaskCronRepository extends JpaRepository&lt;ScheduledTaskCron, String&gt; &#123; ScheduledTaskCron findByTaskCode(String taskCode);&#125; 创建定时任务123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import com.hczt.haier.db.user.entity.ScheduledTaskCron;import com.hczt.haier.db.user.repository.ScheduledTaskCronRepository;import com.hczt.haier.task.service.UserTaskService;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.Trigger;import org.springframework.scheduling.TriggerContext;import org.springframework.scheduling.annotation.SchedulingConfigurer;import org.springframework.scheduling.config.ScheduledTaskRegistrar;import org.springframework.scheduling.support.CronTrigger;import org.springframework.stereotype.Component;import java.text.SimpleDateFormat;import java.util.Date;/** * 精诚所至，金石为开。 * 石の上にも三年;陽気の発する所金石亦透る。 * Faith moves mountains. * * @author marvin.ma * @create 2018-06-28 13:27 * @desc 动态表达式定时任务 **/@Componentpublic class DynamicScheduledTask implements SchedulingConfigurer &#123; private static final SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;HH:mm:ss&quot;); private static final String DEFAULT_CRON = &quot;0/5 * * * * ?&quot;; private String cron = DEFAULT_CRON; @Autowired private ScheduledTaskCronRepository scheduledTaskCronRepository; @Autowired private UserTaskService userTaskService; @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123; Runnable task = new Runnable() &#123; @Override public void run() &#123; // 定时任务的业务逻辑 System.out.println(&quot;动态修改定时任务cron参数，当前时间：&quot; + dateFormat.format(new Date())); userTaskService.timeSetMenus(); &#125; &#125;; Trigger trigger = new Trigger() &#123; @Override public Date nextExecutionTime(TriggerContext triggerContext) &#123; // 定时任务触发，可修改定时任务的执行周期 ScheduledTaskCron scheduledTaskCronEntity = scheduledTaskCronRepository.findByTaskCode(&quot;1&quot;); if (null == scheduledTaskCronEntity || StringUtils.isEmpty(scheduledTaskCronEntity.getTaskCron())) &#123; cron = DEFAULT_CRON; &#125; CronTrigger trigger = new CronTrigger(cron); Date nextExecDate = trigger.nextExecutionTime(triggerContext); return nextExecDate; &#125; &#125;; taskRegistrar.addTriggerTask(task, trigger); &#125; public void setCron(String cron) &#123; this.cron = cron; &#125;&#125; 修改数据库后定时任务立即生效。 参考文章：http://412887952-qq-com.iteye.com/blog/2367537http://rensanning.iteye.com/blog/2361912]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>定时任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用ngrok一分钟实现内网穿透]]></title>
    <url>%2F2018%2F06%2F26%2F%E4%BD%BF%E7%94%A8ngrok%E4%B8%80%E5%88%86%E9%92%9F%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[一分钟有点夸张，5分钟总可以将本地web服务映射到公网了吧。简书地址 1、 因果周末作为纯后端，与前端同事联调微信jsapi的授权接口，听说就一个接口，不用数据库，不鸟权限的事，就是从服务端向微信发起一个请求token和ticket的接口，返回给前端而已。原计划半个小时搞定的，结果搞了三个多小时，如果不是参考原来一个项目里的实现，估计在加两个小时也不一定能搞出个成品。因为微信限制调用频次，而且本地获取还需要加白名单，但是给前端同事联调的话还需要打包扔到一台公网服务器上，甚是麻烦啊，于是想这次弄完看看搞一个内网穿透，再有类似场景，直接使用。 2、名词解释2.1、为什么需要内网穿透当内网中的主机没有静态IP地址要被外网稳定访问时可以使用内网穿透 在互联网中唯一定位一台主机的方法是通过公网的IP地址，但固定IP是一种非常稀缺的资源，不可能给每个公司都分配一个，且许多中小公司不愿意为高昂的费用买单，多数公司直接或间接的拨号上网，电信部门会给接入网络的用户分配IP地址，以前上网用户少的时候基本分配的都是临时的静态IP地址，租约过了之后可能会更换成另一个IP地址，这样外网访问就不稳定，因为内网的静态IP地址一直变化，为了解决这个问题可以使用动态域名解析的办法变换域名指向的静态IP地址。但是现在越来越多的上网用户使得临时分配的静态IP地址也不够用了，电信部门开始分配一些虚拟的静态IP地址，这些IP是公网不能直接访问的，如以125开头的一些IP地址，以前单纯的动态域名解析就不好用了。 2.2、内网穿透的定义与障碍简单来说实现不同局域网内的主机之间通过互联网进行通信的技术叫内网穿透。 障碍一：位于局域网内的主机有两套 IP 地址，一套是局域网内的 IP 地址，通常是动态分配的，仅供局域网内的主机间通信使用；一套是经过网关转换后的外网 IP 地址，用于与外网程。 障碍二：位于不同局域网内的两台主机，即使是知道了对方的 IP 地址和端口号，“一厢情愿”地将数据包发送过去，对方也是接收不到的。 因为出于安全起见，除非是主机主动向对方发出了连接请求（这时会在该主机的数据结构中留下一条记录），否则，当主机接收到数据包时，如果在其数据结构中查询不到对应的记录，那些不请自来的数据包将会被丢弃。 解决办法：要想解决以上两大障碍，我们需要借助一台具有公网 IP 的服务器进行桥接。 3、 选型3.1、花生壳花生壳既是内网穿透软件、内网映射软件,也是端口映射软件。规模最大，较正规，完善。 收费高，使用简单 官网：http://www.oray.com/ 3.2、Nat123nat123是内网端口映射与动态域名解析软件，在内网启动映射后，可在外网访问连接内网网站等应用。整个网站我都没有找到客服电话，网友发了一些反面的评价 收费，使用简单 官网：http://www.nat123.com 3.3、NATAPPNATAPP基于ngrok的国内内网穿透服务，免费版会强制更换域名，临时用一下可以 收费，使用简单 官网：https://natapp.cn/ 3.4、frp与其它frp 是一个高性能的反向代理应用，可以帮助您轻松地进行内网穿透，对外网提供服务，支持 tcp, http, https 等协议类型，并且 web 服务支持根据域名进行路由转发。 开源免费 使用相对复杂，需要代理服务器支持 官网：https://github.com/fatedier/frp 文档：查看帮助文档，简书示例 利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。 对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。 利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。 因为frp 仍然处于前期开发阶段，未经充分测试与验证，不推荐用于生产环境，所有我选择了ngrok，资料比较多。 还有如圣剑内网通、ngrok（开源免费）、更多办法 3.5、ngrokngrok是一个反向代理，通过在公共的端点和本地运行的Web服务器之间建立一个安全的通道。ngrok可捕获和分析所有通道上的流量，便于后期分析与响应。 开源免费 官网：https://ngrok.com/ 源码：https://github.com/inconshreveable/ngrok ngrok1.x开源，ngrok2.x不开源 ngrok使用go语言开发，源代码分为客户端与服务器端。 国内免费服务器：http://ngrok.ciqiuwl.cn/，更多免费服务器请大家挖掘，资源共享，我随时更新：） 如果有服务器，仅客户端的使用是不复杂的，以上面的免费服务器为示例完成内网穿透 本屌丝一向没有多余钱给服务商，只能搜索免费的，最后选了ngrok 3、 搭建搭建过程很简单，如果参考官网估计会走点弯路，因为windows对很多东西都有这要求。不过还好，找到了小米球ngrok，让所谓的搭建好像没什么可以说的了。复制一下使用教程。 ●windows用户:1、下载windows版本的客户端，解压到你喜欢的目录2、在命令行下进入到ngrok客户端目录下3、执行 ngrok -config=ngrok.cfg -subdomain xxx 80 //(xxx 是你自定义的域名前缀)4、如果开启成功 你就可以使用 xxx.ngrok.xiaomiqiu.cn 来访问你本机的 127.0.0.1:80 的服务啦5、如果你自己有顶级域名，想通过自己的域名来访问本机的项目，那么先将自己的顶级域名解析到&gt;120.25.161.137(域名需要已备案哦)，然后执行 ngrok -config=ngrok.cfg -hostname xxx.xxx.xxx 80 //(xxx.xxx.xxx是你自定义的顶级域名)6、如果开启成功 你就可以使用你的顶级域名来访问你本机的 127.0.0.1:80 的服务啦7、如果失败 就加下交流群 反馈下问题 本屌会看看什么原因….吧8、如果实在闲命令打开麻烦，windows版提供了一键启动脚本！直接启动即可（其它版本没有脚本）●linux用户:只在centos6.5 amd64 下测试没有问题1、下载linux版本的客户端，解压到你喜欢的目录,注意：要给ngrok文件的可执行权限2、在命令行下进入到ngrok客户端目录下3、执行 ./ngrok -config=ngrok.cfg -subdomain xxx 80 //(xxx 是你自定义的域名前缀)4、如果开启成功 你就可以使用 xxx.ngrok.xiaomiqiu.cn 来访问你本机的 127.0.0.1:80 的服务啦5、如果你自己有顶级域名，想通过自己的域名来访问本机的项目，那么先将自己的顶级域名解析到120.25.161.137 (域名需要已备案哦),然后执行./ngrok -config=ngrok.cfg -hostname xxx.xxx.xxx 80 //(xxx.xxx.xxx是你自定义的顶级域名)6、如果开启成功 你就可以使用你的顶级域名来访问你本机的 127.0.0.1:80 的服务啦7、最近有很多同学提到需要linux32位与arm版本，这边也新增了两个客户端，由于本屌没有相应设备或环境，请自行测试，如果有问题，可以反馈。8、如果失败 就加下交流群 反馈下问题 本屌会看看什么原因….吧●Mac 用户:1、呃,虽然提供了mac版的客户端，但是本屌没有mac，所有没有测试！2、所以你下载了之后 自己琢磨吧(应该和linux的使用一样….吧)…….●其他使用方法1、呃,虽然搭建了ngrok服务，但是实际上上面的教程只介绍了一些简单的操作2、ngrok还有许多使用方法，大家可以多了解探索一下3、比如，同时开启多个服务，TCP端口转发，这些大家可以在.cfg上进行配置，本屌就不一一叙述了。 3.1、下载下载 windows 64位版（密码: p6n6），并解压，内包含3个文件： ngrok.cfgngrok.exe小米球Ngrok启动工具.bat 3.2、运行本地web服务我现在本地运行我的程序，在80端口上，运行起来以后访问我写的获取微信签名的接口： 3.3、启动ngrok，配置映射回车，提示配置成功，显示出访问地址：按照提示在浏览器访问一下:然后再观察ngrok的控制台，发现已经记录了一条访问access log：到此，穿透完毕，so easy！ 鸣谢感谢小米球的分享这篇文章用ngrok官网的指导使用也不错]]></content>
      <categories>
        <category>工具使用</category>
      </categories>
      <tags>
        <tag>tools</tag>
        <tag>server</tag>
        <tag>网络</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react native项目编译，打包成android APP]]></title>
    <url>%2F2018%2F06%2F15%2Freact%20native%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91%EF%BC%8C%E6%89%93%E5%8C%85%E6%88%90android%20APP%2F</url>
    <content type="text"><![CDATA[编译react native项目，并最终打包成安卓的apk包简书地址 第十章 离线打包发布10.2 Android打包发布1）将js代码打包成jsbundle包 在android工程中创建assets文件夹，可以用命令行创建，也可以手动创建，命令如下: mkdir android/app/src/main/assets 在工程的根目录输入如下命令进行打包 react-native bundle –entry-file demo/index.js –bundle-output ./android/app/src/main/assets/index.android.jsbundle –platform android –assets-dest ./android/app/src/main/res/ –dev false 【注意：上述命令中 “demo/index/.js”是你工程的安卓入口文件目录】 -entry-file 指定入口文件 因为要打包ios平台，所以指定为rn项目的index.ios.js作为入口 –bundle-output 指定输出的jsbundle文件路径和文件名 指定到rn项目的ios工程文件夹下，记得一定要先创建bundle文件夹，不然终端会报文件夹找不到的错误 –platform 指定平台类型 –assets-dest 指定资源文件夹路径 assets文件夹的路径，包含图片、node模块等资源 –dev 是否为开发模式 如果设置为false，不会产生警告，并且bundle会被压缩 还有其他命令，比如：transformer、prepack、bundle-encoding等，可以到官网查看具体介绍。 在MyApplication.java中的ReactNativeHost中添加getBundleAssetName`方法，该方法的返回值，必须与上一步中生成的jsbundle文件的文件名保持一致。 12345@Nullable@Overrideprotected String getBundleAssetName() &#123; return &quot;index.android.bundle&quot;;&#125; 2）利用命令行打包安卓APKAndroid要求所有应用都必须有一个签名证书才允许安装在手机上，所以，在把应用发布到应用市场之前必须生成1个签名的apk包。 生成签名秘钥 在Windows上keytool命令放在JDK的bin目录中（比如C:\Program Files\Java\jdkx.x.x_x\bin），你可能需要在命令行中先进入那个目录才能执行此命令。在mac上，建议在工程目录下生成： 12&gt;$ keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000&gt; 【注：keystore名称可自己修改】 这条命令会要求你输入密钥库（keystore）和对应密钥的密码，然后设置一些发行相关的信息。最后它会生成一个叫做my-release-key.keystore的密钥库文件。 在运行上面这条语句之后，密钥库里应该已经生成了一个单独的密钥，有效期为10000天。–alias参数后面的别名是你将来为应用签名时所需要用到的，所以记得记录这个别名。 设置gradle变量 把my-release-key.keystore文件放到你工程中的android/app文件夹下。 在android工程的gradle.properties文件中加入如下代码： 1234MYAPP_RELEASE_STORE_FILE=my-release-key.keystoreMYAPP_RELEASE_KEY_ALIAS=my-key-aliasMYAPP_RELEASE_STORE_PASSWORD=hongchuangMYAPP_RELEASE_KEY_PASSWORD=hongchuang 添加签名到gradle配置文件 编辑你项目目录下的android/app/build.gradle，添加如下的签名配置： 1234567891011121314151617181920...android &#123; ... defaultConfig &#123; ... &#125; signingConfigs &#123; release &#123; storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD &#125; &#125; buildTypes &#123; release &#123; ... signingConfig signingConfigs.release &#125; &#125;&#125;... 生成签名apk包 cd android ./gradlew assembleRelease ./gradlew assembleRelease在macOS、Linux或是windows的PowerShell环境中表示执行当前目录下的名为gradlew的脚本文件，且其运行参数为assembleRelease，注意这个./不可省略；而在windows的传统CMD命令行下则需要去掉./。 Gradle的assembleRelease参数会把所有用到的JavaScript代码都打包到一起，然后内置到APK包中。如果你想调整下这个行为（比如js代码以及静态资源打包的默认文件名或是目录结构等），可以看看android/app/build.gradle文件，然后琢磨下应该怎么修改以满足你的需求。 生成的APK文件位于android/app/build/outputs/apk/app-release.apk，它已经可以用来发布了。 测试签名包 输入以下命令来安装上一步生成的签名包，来进行测试。 cd android ./gradlew installRelease 注意installRelease参数只能在你完成了上面的签名配置之后才可以使用。 你现在可以关掉运行中的packager了，因为你所有的代码和框架依赖已经都被打包到apk包中，可以离线运行了。 在debug和release版本间来回切换安装时可能会报错签名不匹配，此时需要先卸载前一个版本再尝试安装。 启用Proguard代码混淆来缩小apk文件大小（可选） Proguard是一个Java字节码混淆压缩工具，它可以移除掉React Native Java（和它的依赖库中）中没有被使用到的部分，最终有效的减少APK的大小。 【启用Proguard之后，你必须再次全面地测试你的应用。Proguard有时候需要为你引入的每个原生库做一些额外的配置。参见app/proguard-rules.pro文件。】 启用方法是修改android工程的build.gradle文件，设置minifyEnabled选项为true 1234567buildTypes &#123; release &#123; signingConfig signingConfigs.release minifyEnabled true proguardFile &apos;proguard.txt&apos; &#125; &#125; 3）利用androidStudio打包生成apk 利用AndroidStudio生成签名秘钥 具体方法是，androidStudio—&gt;Build—&gt;Generate Signed apk—&gt;点击【next】—&gt;【Create new】 如下图所示： 然后进入创建窗口，选择keystore路径，key store密码，然后下面如图所示输入公司及开发者信息，信息输入完成后点击【ok】即可生成keystore。 此处的keystore password 跟key Alias 以及password 需要记住，当利用keystore打包时需要填写。 利用AndroidStudio打包生成签名apk 方法还是，androidStudio—&gt;Build—&gt;Generate Signed apk—&gt;点击【next】—&gt;【Choose existing】—&gt;选择上一步生成的keystore文件路径—&gt;输入keystore相关信息—&gt;【Next】 然后选择apk存储路径—&gt;Signature Versions 选择【V2（Full APK Signature）】—&gt;【Finish】然后等待apk 打包完成即可 到这里，打包工作就完成了，把apk上传应用商店即可。 推荐 另一篇好博文]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-native 安卓项目gradle优化]]></title>
    <url>%2F2018%2F06%2F15%2Freact-native%20%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AEgradle%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[大前端学习之安卓项目编译速度优化简书地址 profile报告命令1./gradlew clean app:assembleDebug --profile 1、debug环境禁止crashLytics上报2、避免Legacy Multidex 记录2018-11-06 11:05 cleangradlew clean app:assembleDebug –profile 1、修改参数，加快buildorg.gradle.jvmargs=-Xmx4608M -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8安卓：非发布版禁用fabric上报，修改jvmargs参数，使开发环境build时间降至2min以内http://www.easemob.com/news/852https://medium.com/exploring-code/how-to-decrease-your-gradle-build-time-by-65-310b572b0c43 debug环境禁用fabric非发布版本关闭Fabirc123456android &#123; buildTypes &#123; debug &#123; // Disable fabric build ID generation for debug builds ext.enableCrashlytics = false ... 参考：https://www.cnblogs.com/zhou-guobao/p/disable-crashlytics-for-debug-builds.html 2、配置不同的图标https://blog.csdn.net/MAIMIHO/article/details/76106700?utm_source=blogxgwz4 配置不同app名称遇到一个错误：12345678910111213FAILURE: Build failed with an exception.* What went wrong:Execution failed for task &apos;:app:processDebugManifest&apos;.&gt; Manifest merger failed : Attribute application@label value=(@string/app_name_debug) from AndroidManifest.xml:86:9-37 is also present at [:react-native-fetch-blob] AndroidManifest.xml:11:18-50 value=(@string/app_name). Suggestion: add &apos;tools:replace=&quot;android:label&quot;&apos; to &lt;application&gt; element at AndroidManifest.xml:80:5-324:19 to override.* Try:Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.* Get more help at https://help.gradle.org 按照提示解决，解释：https://www.2cto.com/kf/201712/702939.html 3、配置不同applicationIdfileprovider 修改，https://www.jianshu.com/p/1afa7d4c0afd 提醒FileHelp.java中使用父项目的BuildConf.applicationId 4、打jsbundle后生成的这个垃圾文件D:\Git\pingtai\Portal\android\app\src\main\res\drawable-mdpi\js_commonview_echarts_tpl.html 5、android studio 中distributionUrl使用本地文件D:\Git\pingtai\Portal\android\gradle\wrapper\gradle-wrapper.properties 6、修改combile 7、开发环境使用比android studio 自带的【apply changes】更牛逼的【JRebel for Android】 1、安装Jrebel插件：https://zeroturnaround.com/software/jrebel-for-android/quick-start/#!/installation 2、激活帮助：http://blog.lanyus.com/archives/299.html 生成GUID：https://www.qvdv.com/tools/guid.html我生成的：http://idea.lanyus.com/E086630D-638A-07A7-58D2-68ED4762D053 3、配置参考博客地址：http://www.czhzero.com/2016/08/10/jrebel-for-android-guide/ 8、减小APP的体积]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>react-native</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql数据库安装和一般配置]]></title>
    <url>%2F2018%2F06%2F15%2Fmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85%E5%92%8C%E4%B8%80%E8%88%AC%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[在linux上安装mysql server，进行常规设置简书地址 同事那里的总结拿过来自己保存一份，类似的教程太多了。 在linux上安装mysql server，进行常规设置 MySQL数据库安装 安装 12345# 更新包索引sudo apt-get update# 安装sudo apt-get install mysql-server 安装过程中会提示设置root密码。 设置 12345678910# 执行安全脚本设置sudo mysql_secure_installation# 执行初始化脚本(按此方法安装不用执行)# 5.7.6之前的版本执行mysql_install_db# 5.7.6及后续版本执行mysqld --initialize 测试 1234567891011# 查看mysql运行状态systemctl status mysql.service# 启动Mysqlsudo systemctl start mysql# 停止Mysqlsudo systemctl stop mysql# 重启Mysqlsudo systemctl restart mysql MySQL数据库配置按此种方式安装完Mysql后，配置文件默认位于/etc/msyql下，其中mysql.conf.d下的mysqld.cnf用于配置服务端，conf.d下的mysql.cnf用于配置客户端。 忽略大小写 123456# 编辑my.cnf文件vim /etc/my.cnf# 在[msyqld]下添加如下代码[mysqld]lower_case_table_names=1 设置编码格式为utf8mb4，并支持emoji表情 12345678910111213141516171819# 编辑my.cnf文件vim /etc/my.cnf[client]default-character-set=utf8mb4[mysqld]character-set-client-handshake = FALSEcharacter-set-server = utf8mb4collation-server = utf8mb4_unicode_ciinit_connect=’SET NAMES utf8mb4'[mysql]default-character-set=utf8mb4 数据库、表和字段的设置分别如下： 1） 修改database的字符集： ALTER DATABASE 数据库名 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; 示例： ALTER DATABASE xxxdb CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; 2） 步骤1）执行完成之后，需要执行use 数据库名，指明当前需要进行字符集修改的数据库；示例：use xxxdb; 3）修改table的字符集： ALTER TABLE 表名 CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 示例： ALTER TABLE user_comments CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 4） 修改column的字符集： ALTER TABLE 表名 CHANGE 字段名 字段名 该字段原来的数据类型 CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 示例： ALTER TABLE user_comments CHANGE content content TEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 设置max_allowed_package 1234# 编辑my.cnf文件vim /etc/my.cnf[mysqld]max_allowed_packet=100M 允许远程访问 4.1 排队网络或防火墙问题 先看能否ping通远程服务器，如果不可以就是网络问题。然后，检查端口是否被防火墙挡住了 1telnet ip地址 3306 如果连接失败，配置防火墙 123# 防火墙放开Mysql端口iptables -A INPUT -p tcp --dport 3306 -j ACCEPT iptables -A OUTPUT -p tcp --dport 3306 -j ACCEPT 4.2 检查MySQL配置如果开启了防火墙，telnet还是失败，通过netstat查看3306的端口状态 1234netstat -apn | grep 3306# 返回结果tcp6 0 0 127.0.0.1:3306 :::* LISTEN 13524/mysqld 如果显示127.0.0.1：3306表示3306被绑定到了本地。需要修改mysqld.conf 1234# 编辑mysqld.cnf文件vim /etc/mysql/mysql.conf.d/mysqld.cnf[mysqld]bind-address=addr 不配置或者IP配置为0.0.0.0，表示监听所有客户端连接。 4.3 检查用户访问权限 MySQ建用户的时候会指定一个host,默认是127.0.0.1/localhost，那么这个用户就只能本机访问，其他机器用这个账号访问会提示没有权限，host改为%，表示允许所有机器访问。 123456789101112131415161718# 登录mysql服务器mysql -uroot -p# 使用mysql数据库mysql&gt; use mysql;Database changed# 修改root用户访问权限mysql&gt; update user set host=&apos;%&apos; where user=&apos;root&apos;;Query OK, 0 rows affected(0.00 sec)Row matched: 1 Changed: 0 Warnings: 0# 查看结果mysql&gt; select host, user from user;+------+-------+|host |user |+------+-------+|% |root | 重启Mysql使用修改生效 设置开机启动及禁止 12345# 禁止启动sudo systemctl disable mysqld# 开机启动sudo systemctl enable mysqld MySQL用户及数据库/表权限配置基本操作命令： 1、查询用户权限 1show grants for username; 2、用户授权 1grant select on db.* to username; 3、回收用户权限 1revoke select on db.* from username;(权限不存在会报错) 1、新建用户 1.1 登录MYSQL： root@bin&gt;mysql -u root -p Enter password: ** 1.2 创建用户： mysql&gt; insert into mysql.user(Host,User,Password) values(“localhost”,”demo”,password(“1234”)); 这样就创建了一个名为：demo 密码为：1234 的用户。 注意：此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录。如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录。也可以指定某台机器可以远程登录。 1.3 然后登录一下： mysql&gt;exit; root@bin&gt;mysql -u demo -p Enter password: ** 2、用户授权授权格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”; 2.1 登录MYSQL（有ROOT权限），这里以ROOT身份登录： root@bin&gt;mysql -u demo -p Enter password: ** 2.2 首先为用户创建一个数据库(testDB)： mysql&gt;create database demoDB; 2.3 授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）： mysql&gt;grant all privileges on demoDB.* to demo@localhost identified by ‘1234’; mysql&gt;flush privileges;//刷新系统权限表 格式：grant 权限 on 数据库.* to 用户名@登录主机 identified by “密码”; 2.4 如果想指定部分权限给一用户，可以这样来写: mysql&gt;grant select,update on demoDB.* to demo@localhost identified by ‘1234’; mysql&gt;flush privileges; //刷新系统权限表 2.5 授权test用户拥有所有数据库的某些权限： mysql&gt;grant select,delete,update,create,drop on . to demo@”%” identified by “1234”; //test用户对所有数据库都有select,delete,update,create,drop 权限。 //@”%” 表示对所有非本地主机授权，不包括localhost。（localhost地址设为127.0.0.1，如果设为真实的本地地址，不知道是否可以，没有验证。） //对localhost授权：加上一句grant all privileges on demoDB.* to demo@localhost identified by ‘1234’;即可。 3、删除用户root@bin&gt;mysql -u demo -p Enter password: ** mysql&gt;Delete FROM user Where User=’demo’ and Host=’localhost’; mysql&gt;flush privileges; mysql&gt;drop database demoDB; //删除用户的数据库删除账户及权限：&gt;drop user 用户名@’%’; &gt;drop user 用户名@ localhost; 4、修改用户密码root@bin&gt;mysql -u demo -p Enter password: ** mysql&gt;update mysql.user set password=password(‘新密码’) where User=”demo” and Host=”localhost”; mysql&gt;flush privileges; 说明：grant和revoke可以在几个层次上控制访问权限1.整个服务器：grant all /revoke all2.整个数据库：on database.*3.特定的表：on database.table4.特定的列：grant select(id, se, rank) on testdb.apache_log to dba@localhost;5.特定的存储过程：grant execute on procedure testdb.pr_add to ’dba’@’localhost’6.特定的函数：grant execute on function testdb.fn_add to ’dba’@’localhost’]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux上搭建热更服务器并在移动端通过react native项目验证]]></title>
    <url>%2F2018%2F06%2F13%2FLinux%E4%B8%8A%E6%90%AD%E5%BB%BA%E7%83%AD%E6%9B%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%9A%E8%BF%87react%20native%E9%A1%B9%E7%9B%AE%E9%AA%8C%E8%AF%81%2F</url>
    <content type="text"><![CDATA[本文介绍搭建热更服务器并在手机上测试react native热更的全过程。简书地址 安装MySQL安装完成后，会弹出初始密码，粗细的我，随手点了OK，此处挖坑半天。权限密码问题可以参考这篇博客，其它的都是小问题 code-push热更服务器搭建：安装code-push-server npm安装 12# 安装code-push-servernpm install code-push-server -g 源码安装（推荐） 123456# 从git库下载最新代码git clone https://github.com/lisong/code-push-server.git# 进入到code-push-server目录cd code-push-server# 安装npm install Code-Push-Server配置修改config/config.js文件，指定数据库，数据存放位置 配置数据库 12345678db: &#123; username: &quot;root&quot;, password: &quot;Your PWD&quot;, database: &quot;codepush&quot;, host: &quot;127.0.0.1&quot;, port: 3306, dialect: &quot;mysql&quot;&#125; 配置存储（默认为local,本次也采用local） 1234567891011121314151617181920212223242526272829303132333435363738common: &#123; // dataDir用于进行存放比对文件 dataDir: &quot;/Users/tablee/workspaces/data&quot;, // 存储类型，可选值有local,oss,qiniu,s3 storageType: &quot;local&quot;&#125;,// 文件存储在本地 当storageType为local时需要配置local: &#123; // 二进制文件存放目录，文件下载目录，不要使用临时目录 storageDir: &quot;/Users/tablee/workspaces/storage&quot;, // 文件下载地址 CodePushServer地址 + ’/download‘,download对应app.js里面的地址 //默认此处的下载地址是127.0.0.1:3000这个自然是错误的，要外网ip地址 downloadUrl: &quot;https://tech.haier.net:7788/download&quot;, // public static download spacename public: &apos;/download&apos;&#125;,//七牛云存储配置 当storageType为qiniu时需要配置qiniu: &#123; accessKey: &quot;&quot;, secretKey: &quot;&quot;, bucketName: &quot;&quot;, //文件下载域名地址 downloadUrl: &quot;&quot;&#125;,//阿里云存储配置 当storageType为oss时需要配置oss: &#123; accessKeyId: &quot;&quot;, secretAccessKey: &quot;&quot;, endpoint: &quot;&quot;, bucketName: &quot;&quot;, // 对象Key的前缀，允许放到子文件夹里面 prefix: &quot;&quot;, // 文件下载域名地址，需要包含前缀 downloadUrl: &quot;&quot;,&#125; 配置签名,可以不修改，但是推荐更改 123456jwt: &#123; // 登录jwt签名密钥，必须更改，否则有安全隐患，可以使用随机生成的字符串 // Recommended: 63 random alpha-numeric characters // Generate using: https://www.grc.com/passwords.htm tokenSecret: &apos;https://www.grc.com/passwords.htm&apos;&#125; 初始化数据库配置完成后，进行数据初始化工作 npm安装 12# 初始化数据库,**替换为数据库密码**（参考后面配置说明）code-push-server-db init --dbhost localhost --dbuser root --dbpassword **Your PWD** --dbport 3306 源码安装 12# 初始化数据库./bin/db init --dbhost localhost --dbuser root --dbpassword **Your PWD** --dbport 3306 注意事项： 不论采取哪种安装方式，初始化数据库时要保证数据库用户名密码正确；数据库中不能存在codepush数据库(默认数据库为codepush) 采用源码安装，执行bin目录下的db命令时，要保证此文件具有可执行权限，如果没有，需要添加权限12# 添加db文件的可执行权限chmod +x bin/db 如果数据库密码复杂，带有特殊符号，初始化语句将执行失败。此时因为是第一次安装，可以在数据库服务器手动创建名为codepush(必须是这个名字)的数据库，然后执行/opt/chuangke/code-push-server/sql/目录下的codepush-all.sql脚本来初始化数据库。初始化成功后数据库中的表如下：服务启动安装配置文件中的目录结构，到/Users目录中建立如下文件夹 /Users/tablee/workspaces/storage npm启动 12345# 启动服务，默认使用3000端口,可以在浏览器中打开 http://127.0.0.1:3000code-push-server# 指定端口号运行PORT=3000 HOST=127.0.0.1 NODE_ENV=production code-push-server 源码启动 12345678# 启动服务(保证www具有可执行权限)，在浏览器中打开 http://127.0.0.1:3000./bin/www# 以守护进程的方式运行nohup ./bin/www &amp;# 指定端口号运行PORT=3000 HOST=127.0.0.1 NODE_ENV=production node ./bin/www forever 后台启动（推荐）先安装forever当然，有人说forever已经过时了，推荐使用pm2代替forever，请参考linux npm start 保持后台运行 12345# 全局安装$ npm install forever -g# 查看是否安装成功$ forever listinfo: No forever processes running 很抱歉，如果不顺利的话，会有这么个情况12345678910[root@izm5e3m6sxwr4dw9w7r6h4z lib]# npm install forever -g/opt/software/node-v10.0.0-linux-x64/bin/forever -&gt; /opt/software/node-v10.0.0-linux-x64/lib/node_modules/forever/bin/forevernpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/forever/node_modules/fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ forever@0.15.3updated 1 package in 2.109s[root@izm5e3m6sxwr4dw9w7r6h4z lib]# forever list-bash: forever: 未找到命令[root@izm5e3m6sxwr4dw9w7r6h4z lib]# 不美丽了，命名安装成功了，但是还是提示找不到命令，怎么办呢？我来教你，这个是因为这个-g是吧命令安装到了node所在目录，可以看看具体在哪123456789101112[root@izm5e3m6sxwr4dw9w7r6h4z ~]# npm list -g --depth 0/opt/software/node-v10.0.0-linux-x64/lib├── forever@0.15.3└── npm@5.6.0[root@izm5e3m6sxwr4dw9w7r6h4z ~]# cd /opt/software/node-v10.0.0-linux-x64/lib[root@izm5e3m6sxwr4dw9w7r6h4z lib]# lsnode_modules[root@izm5e3m6sxwr4dw9w7r6h4z lib]# cd node_modules/forever/bin/[root@izm5e3m6sxwr4dw9w7r6h4z bin]# lsforever monitor[root@izm5e3m6sxwr4dw9w7r6h4z bin]# 这次是真的看见forever被安装到哪里，接下来就来个软链到/usr/bin下就可以了1234[root@izm5e3m6sxwr4dw9w7r6h4z bin]# ln -s /opt/software/node-v10.0.0-linux-x64/lib/node_modules/forever/bin/forever /usr/bin/forever[root@izm5e3m6sxwr4dw9w7r6h4z bin]# forever listinfo: No forever processes running[root@izm5e3m6sxwr4dw9w7r6h4z bin]# 完美，接着使用forever启动应用啦。比如我的server源码的位置在/opt/chuangke/code-push-server/，在当前目录下执行如下命令启动1NODE_ENV=production forever start -l log/forever.log -o log/info.log -e log/err.log bin/www 可以用如下绝对路径命令启动：1NODE_ENV=production forever start -l /opt/chuangke/code-push-server/log/forever.log -o /home/haieradmin/codepush/code-push-server/log/info.log -e /home/haieradmin/codepush/code-push-server/log/err.log /home/haieradmin/codepush/code-push-server/bin/www 服务启动验证命令行验证1234$ forever listinfo: Forever processes runningdata: uid command script forever pid id logfile uptime data: [0] 8Or8 /usr/local/node8/bin/node /opt/chuangke/code-push-server/bin/www 60199 60209 /opt/chuangke/code-push-server/log/forever.log 0:15:2:21.503 如果服务器启动成功，则用浏览器访问默认的3000端口，可以看到如下效果到此服务器端到配置就完成了。 客户端热更验证客户端测试代码以 https://github.com/lisong/code-push-demo-app 为例 客户端安装code-push-cli 12345# 全局安装$ npm install -g code-push-cli # 查看版本$ code-push -v2.1.8 下载客户端验证程序，并安装第一版 clone程序并install1234$ git clone git@github.com:lisong/code-push-demo-app.git# cd 到demo路径，执行npm install 安装node依赖包$ cd code-push-demo-app$ npm install 打开命令终端，登录code-push-server服务器，这里配置为local，所以登录地址为http://127.0.0.1:300012$ code-push login http://127.0.0.1:3000 //账号密码为博主提供 account: admin password: 123456登录成功之后获取token 将文本框中的key复制粘贴到登录终端，点击回车登录成功输入账号密码，点击登录。获取token：1234$ code-push login http://127.0.0.1:3000Please login to Mobile Center in the browser window we&apos;ve just opened.Enter your token from the browser: HugyOJpzvzhEhB05galUftoL4zrz4ksvOXqogSuccessfully logged-in. Your session file was written to C:\Users\marvin\AppData\Local\.code-push.config. You can run the code-push logout command at any time to delete this file and terminate your session. 在命令行查看当前热更服务器的部署信息，1234$ code-push app list┌──────┬─────────────┐│ Name │ Deployments │└──────┴─────────────┘ 添加新的APP（以安卓为例） 1234567891011121314151617# 安卓版$ code-push app add CodePushReactNativeDemo-android android react-nativeSuccessfully added the &quot;CodePushReactNativeDemo-android&quot; app, along with the following default deployments:┌────────────┬───────────────────────────────────────┐│ Name │ Deployment Key │├────────────┼───────────────────────────────────────┤│ Production │ VKNbn9Oe5Wj9bPoGkYCUVuzRuqHV4ksvOXqog │├────────────┼───────────────────────────────────────┤│ Staging │ 6KfLoVvhgdsnFzFCIohRb2t5grmD4ksvOXqog │└────────────┴───────────────────────────────────────┘# 再运行命令查看$ code-push app list┌─────────────────────────────────┬─────────────────────┐│ Name │ Deployments │├─────────────────────────────────┼─────────────────────┤│ CodePushReactNativeDemo-android │ Production, Staging │└─────────────────────────────────┴─────────────────────┘ 修改配置添加完成之后可以用code-push app list命令查看创建好的app，并将测试的Staging key拷贝到MainApplication.java中的 “Your Key“ 的位置，推送的时候通过key将app和服务器端关联。 用Android Studio打开code-push-demo-app/android目录到MainApplication.java里面修改以下代码：123456789101112131415161718192021@Overrideprotected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new CodePush( &quot;YourKey&quot;, // code-push app add项目后生成的app 推送key MainApplication.this, BuildConfig.DEBUG, &quot;YourCodePushServerUrl&quot; // config.js中配置的downloadUrl 地址 不需要/download后缀 ) );&#125; 我的配置是：修改MainApplication.java的代码如下：12345678910@Overrideprotected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new CodePushBuilder(getResources().getString(R.string.reactNativeCodePush_androidDeploymentKey),getApplicationContext()) .setIsDebugMode(BuildConfig.DEBUG) .setServerUrl(getResources().getString(R.string.reactNativeCodePush_androidServerURL)) .build() );&#125; 修改android/app/src/main/res/values/strings.xml文件，指定reactNativeCodePush_androidDeploymentKey和reactNativeCodePush_androidServerURL的值。12345&lt;resources&gt; &lt;string moduleConfig=&quot;true&quot; name=&quot;reactNativeCodePush_androidDeploymentKey&quot;&gt;6KfLoVvhgdsnFzFCIohRb2t5grmD4ksvOXqog&lt;/string&gt; &lt;string moduleConfig=&quot;true&quot; name=&quot;reactNativeCodePush_androidServerURL&quot;&gt;http://xxx.xxx:3000/&lt;/string&gt; &lt;string name=&quot;app_name&quot;&gt;CodePushDemoApp&lt;/string&gt;&lt;/resources&gt; cd 到code-push-demo-app目录，允许react-native start 启动react-native 服务。可以选择用数据线连接手机，手机开启开发者模式。也可以直接将code-push-demo-app\android\app\build\outputs\apk\debug以后的apk包发送到手机上，直接打开安装。1$ react-native run-android 在手机上运行app的截图如下： Android Studio编译并将项目运行到手机上，reload更新到最新js包在code-push-demo-app中首页随意做一些修改，这里是将CodePushDemoApp/App.js文件做了如下修改。执行推送命令123456789101112131415161718192021222324252627# 测试环境执行：$ code-push release-react CodePushReactNativeDemo-android androidDetecting android app version:Using the target binary version value &quot;2.1.0&quot; from &quot;android\app\build.gradle&quot;.Running &quot;react-native bundle&quot; command:node node_modules\react-native\local-cli\cli.js bundle --assets-dest C:\Users\marvin\AppData\Local\Temp\CodePush\CodePush --bundle-output C:\Users\marvin\AppData\Local\Temp\CodePush\CodePush\index.android.bundle --dev false --entry-file index.js --platform androidScanning folders for symlinks in D:\Git\oschina\react\code-push-demo-app\node_modules (101ms)Scanning folders for symlinks in D:\Git\oschina\react\code-push-demo-app\node_modules (48ms)Loading dependency graph, done.bundle: Writing bundle output to: C:\Users\marvin\AppData\Local\Temp\CodePush\CodePush\index.android.bundlebundle: Done writing bundle outputbundle: Copying 1 asset filesbundle: Done copying assetsReleasing update contents to CodePush:Successfully released an update containing the &quot;C:\Users\marvin\AppData\Local\Temp\CodePush\CodePush&quot; directory to the &quot;Staging&quot; deployment of the &quot;CodePushReactNativeDemo-android&quot; app.# 生产环境执行：$ code-push release-react CodePushReactNativeDemo-android android -d Production#指定版本，添加注释$ code-push release-react CodePushReactNativeDemo-android android -d Production --des &quot;marvin code push testing&quot; -t &quot;1.0.0&quot; Successfully 表示热更包推送成功，然后在手机上点击Press for dialog-driven sync链接。弹出下载确认 点击【install】至此，热更服务器搭建，及android版app体验完毕。 扩展1、产看更新包安装情况12# code-push deployment history appName deploymentNamecode-push deployment history CodePushReactNativeDemo-android Staging Staging 或者 Production 2、列表部署名称1code-push deployment ls CodePushReactNativeDemo-android 3、常见错误3.1、 download地址写错，默认是http://127.0.0.1:3000 如果不改成外网域名和端口，下载将失败。app启动抓包查看的结果就是，返回的下载地址无法下载到资源。 3.2、nginx限制资源大小需要修改配置，我们的一个app打包后约70M，上传时就报错了，后来才知道是nginx指定的上传大小是50M，所以要修改nginx配置文件，加上client_max_body_size 100M;这个样配置。 3.3、数据库配置错误将数据库的端口，或者用户名密码写错也很常见 3.4、目录权限问题配置文件里默认的dataDir和storeage目录必须有code-push运行用户的操作权限，否则会有以下错误。 常用命令12345// 账户相关code-push login 登陆code-push loout 注销code-push access-key ls 列出登陆的tokencode-push access-key rm &lt;accessKye&gt; 删除某个 access-key 123456// app操作相关code-push app add &lt;appName&gt; &lt;platform&gt; react-native 在账号里面添加一个新的appcode-push app remove 或者 rm 在账号里移除一个 appcode-push app rename 重命名一个存在 appcode-push app list 或则 ls 列出账号下面的所有 appcode-push app transfer 把app的所有权转移到另外一个账号 1234567// 应用信息相关code-push deployment add &lt;appName&gt; 部署code-push deployment rm &lt;appName&gt; 删除部署code-push deployment rename &lt;appName&gt; 重命名code-push deployment ls &lt;appName&gt; 列出应用的部署情况code-push deployment ls &lt;appName&gt; -k 查看部署的keycode-push deployment history &lt;appName&gt; &lt;deploymentName&gt; 查看历史版本 12345678// 发布code-push release-react &lt;appName&gt; &lt;platform&gt; -t 版本 -d 环境 --des 描述 -m true （强制更新）// 清除历史部署记录code-push deployment clear &lt;appName&gt; Production or Staging// 回滚code-push rollback &lt;appName&gt; Production --targetRelease v4(codepush服务部署的版本号) 注意事项： 更新规则 1&gt; CodePush部署版本 &gt; App版本 更新可用，但当前版本比运行版本高。不作更新 2&gt; CodePush部署版本 &lt; App版本 不执行更新处理 3&gt; CodePush部署版本 == App版本 自动下载更新，并根据加载策略加载最新bundle 回滚 当部署的版本不同时，不能跨版本回滚。 例如：CodePush历史版本中为2.10.1，此时发布2.10.2版本。当从2.10.2发起回滚操作回到2.10.1时，是不可行的。 部署信息参数在部署了版本之后，执行 【code-push deployment ls uniApp-Android】可以查看当前版本、当前部署环境下的部署信息： Update Metadata（更新信息） Label：标识当前部署版本，每部署新版本，版本号增加1 App Version：当前部署的App版本号 Mandatory：是否强制更新 Release Time：部署时间 Released By：部署用户 Description：部署 描述信息 从上面内容不难发现，这些信息基本都会在我们执行 code-push release 时配置 Install Metrics（安装指标） Active：成功安装并运行当前release的用户的数量，即表示当前下载更新部署的活跃用户数量，of 左边数会随着用户安装、卸载而 增加、减少。of右边数代表当前安装或收 到部署版本的用户数，当有用户卸载App，该数值会降低。 因此它很好的解释了当前更新包有多少活跃用户，多少用户接收过这个安装包 Total：成功安装部署当前release的用户量，只增不减 Pending：当前release版本被下载的数量，但是还没有被安装，该值会随着用户下载安装后增加， 在卸载时降低。 参考资料code-push-server 搭建自己的推送服务器流程热更新（android）windows系统code-push-server 的使用ReactNative集成CodePush教程 集成Code Push的案例说明react-native热更新全方位讲解零客户端开发经验 React Native 热更新 CodePush 打包集成指北react native codepush热更新解决成功更新Android Studio 权威教程 打包、生成jks密钥、签名Apk、多渠道打包http://www.tl628.com/index.php/2018/05/31/code-push_fa_bu_de_shi_hou_chu_xian_error_upload_error/]]></content>
      <categories>
        <category>大前端</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>codepush</tag>
        <tag>react-native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习书单]]></title>
    <url>%2F2018%2F06%2F10%2F%E5%AD%A6%E4%B9%A0%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[免费的计算机编程类中文书籍。简书地址 你想要的干货，都在这里哟！ 摘自:github上由justjavac整理的free-programming-books-zh_CN(免费的计算机编程类中文书籍)觉得不错的可以去star和fork一下哟! 写在最前面的话首先声明,本篇博文并非本人原创,而是摘自github上大神justjavac发起并整理的free-programming-books-zh_CN(免费的计算机编程类中文书籍)开源项目,旨在帮助不经常逛github的童鞋发掘优质的学习干货,节省学习时间成本.最后再次感谢justjavac的整理与分享. 目录 语言无关类 操作系统 智能系统 分布式系统 编译原理 函数式概念 计算机图形学 WEB服务器 版本控制 编辑器 NoSQL PostgreSQL MySQL 管理和监控 项目相关 设计模式 Web 大数据 编程艺术 其它 语言相关类 Android APP AWK C/C++ C# Clojure CSS/HTML Dart Elixir Erlang Fortran Go Groovy Haskell iOS Java JavaScript LaTeX LISP Lua OCaml Perl PHP Prolog Python R Ruby Rust Scala Shell Swift 读书笔记及其它 测试相关 置顶 [笔记]前端工程师的入门与进阶 [全文]如何正确的学习 Node.js 语言无关类 操作系统 开源世界旅行手册 鸟哥的Linux私房菜 The Linux Command Line (中英文版) Linux 设备驱动 (第三版) 深入分析Linux内核源码 UNIX TOOLBOX Docker中文指南 Docker —— 从入门到实践 Docker入门实战 Docker Cheat Sheet FreeRADIUS新手入门 Mac 开发配置手册 FreeBSD 使用手册 Linux 命令行(中文版) Linux 构建指南 Linux工具快速教程 Linux Documentation (中文版) 嵌入式 Linux 知识库 (eLinux.org 中文版) 理解Linux进程 命令行的艺术 SystemTap新手指南 操作系统思考 智能系统 一步步搭建物联网系统 分布式系统 走向分布式 编译原理 《计算机程序的结构和解释》公开课 翻译项目 函数式概念 傻瓜函数编程 计算机图形学 OpenGL 教程 WebGL自学网 WEB服务器 Nginx开发从入门到精通 (淘宝团队出品) Nginx教程从入门到精通(PDF版本，运维生存时间出品) OpenResty最佳实践 Apache 中文手册 版本控制 Git教程 （本文由 廖雪峰 创作，如果觉得本教程对您有帮助，可以去 iTunes 购买） git - 简易指南 猴子都能懂的GIT入门 Git 参考手册 Pro Git Pro Git 中文版 (整理在gitbook上) Git Magic GotGitHub Git权威指南 Git Community Book 中文版 Mercurial 使用教程 HgInit (中文版) 沉浸式学 Git Git-Cheat-Sheet （感谢 @flyhigher139 翻译了中文版） GitHub秘籍 GitHub帮助文档 git-flow 备忘清单 svn 手册 GitHub漫游指南 编辑器 exvim–vim 改良成IDE项目 笨方法学Vimscript 中译本 Vim中文文档 所需即所获：像 IDE 一样使用 vim vim 实操教程 Atom飞行手册中文版 Markdown·简单的世界 一年成为 Emacs 高手 Emacs 生存指南 Atom官方手册 NoSQL NoSQL数据库笔谈 Redis 设计与实现 Redis 命令参考 带有详细注释的 Redis 3.0 代码 带有详细注释的 Redis 2.6 代码 The Little MongoDB Book The Little Redis Book Neo4j 简体中文手册 v1.8 Neo4j .rb 中文資源 Disque 使用教程 Apache Spark 设计与实现 PostgreSQL PostgreSQL 8.2.3 中文文档 PostgreSQL 9.3.1 中文文档 PostgreSQL 9.5.3 中文文档 MySQL MySQL索引背后的数据结构及算法原理 21分钟MySQL入门教程 管理和监控 ELKstack 中文指南 Mastering Elasticsearch(中文版) ElasticSearch 权威指南 Elasticsearch 权威指南（中文版） Logstash 最佳实践 Puppet 2.7 Cookbook 中文版 项目相关 持续集成（第二版） (译言网) 让开发自动化系列专栏 追求代码质量 selenium 中文文档 Selenium Webdriver 简易教程 Joel谈软件) 約耳談軟體(Joel on Software) Gradle 2 用户指南 Gradle 中文使用文档 编码规范 开源软件架构 GNU make 指南 GNU make 中文手册 The Twelve-Factor App 设计模式 图说设计模式 史上最全设计模式导学目录 design pattern 包教不包会 设计模式 Java 版 Web 关于浏览器和网络的 20 项须知 浏览器开发工具的秘密 Chrome 开发者工具中文手册 Chrome扩展开发文档 Grunt中文文档 gulp中文文档 Gulp 入门指南 移动Web前端知识库 正则表达式30分钟入门教程 前端开发体系建设日记 移动前端开发收藏夹 JSON风格指南 HTTP 接口设计指北 前端资源分享（一） 前端资源分享（二） 前端代码规范 及 最佳实践 前端开发者手册 前端工程师手册 w3school教程整理 Wireshark用户手册 一站式学习Wireshark HTTP 下午茶 HTTP/2.0 中文翻译 RFC 7540 - HTTP/2 中文翻译版 http2讲解 3 Web Designs in 3 Weeks 站点可靠性工程 大数据 大数据/数据挖掘/推荐系统/机器学习相关资源 面向程序员的数据挖掘指南 大型集群上的快速和通用数据处理架构 数据挖掘中经典的算法实现和详细的注释 Spark 编程指南简体中文版 编程艺术 程序员编程艺术 每个程序员都应该了解的内存知识(译)【第一部分】 取悦的工序：如何理解游戏 (豆瓣阅读，免费书籍) 其它 OpenWrt智能、自动、透明翻墙路由器教程 SAN 管理入门系列 Sketch 中文手册 深入理解并行编程 程序员的自我修养 Growth: 全栈增长工程师指南 语言相关类Android Android Design(中文版) Google Material Design 正體中文版 (译本一 译本二) Material Design 中文版 Google Android官方培训课程中文版 Android学习之路 Android开发技术前线(android-tech-frontier) Point-of-Android Android 一些重要知识点解析整理 Android6.0新特性详解 APP Apache Cordova 开发指南 AWK awk程序设计语言 awk中文指南 C/C++ C/C++ 中文参考手册 (欢迎大家参与在线翻译和校对) C 语言编程透视 C++ 并发编程指南 Linux C编程一站式学习 (宋劲杉, 北京亚嵌教育研究中心) CGDB中文手册 100个gdb小技巧 100个gcc小技巧 ZMQ 指南 How to Think Like a Computer Scientist (中英文版) 跟我一起写Makefile(PDF) GNU make中文手册 GNU make 指南 Google C++ 风格指南 C/C++ Primer (by @andycai) 简单易懂的C魔法 Cmake 实践 (PDF版) C++ FAQ LITE(中文版) C++ Primer 5th Answers C++ 并发编程(基于C++11) QT 教程 DevBean的《Qt学习之路2》(Qt5) C++ Template 进阶指南 libuv中文教程 Boost 库中文教程 笨办法学C C MSDN C# 中文文档 .NET 类库参考 ASP.NET MVC 5 入门指南 超全面的 .NET GDI+ 图形图像编程教程 .NET控件开发基础 .NET开发要点精讲（初稿） Clojure Clojure入门教程 CSS/HTML 学习CSS布局 通用 CSS 笔记、建议与指导 CSS参考手册 Emmet 文档 前端代码规范 (腾讯 AlloyTeam 团队) HTML和CSS编码规范 Sass Guidelines 中文 CSS3 Tutorial 《CSS3 教程》 MDN HTML 中文文档 MDN CSS 中文文档 Dart Dart 语言导览 Elixir Elixir编程入门 Erlang 21天学通Erlang Fortran Fortran77和90/95编程入门 Go Go编程基础 Go入门指南 学习Go语言 Go Web 编程 (此书已经出版，希望开发者们去购买，支持作者的创作) Go实战开发 (当我收录此项目时，作者已经写完第三章，如果读完前面章节觉得有帮助，可以给作者捐赠，以鼓励作者的继续创作) Network programming with Go 中文翻译版本 Effective Go Go 语言标准库 Golang标准库文档 Revel 框架手册 Java程序员的Golang入门指南 Go命令教程 Go语言博客实践 Go 官方文档翻译 深入解析Go Go语言圣经(中文版) (GitBook) Groovy 实战 Groovy 系列 Haskell Real World Haskell 中文版 Haskell趣学指南 iOS iOS开发60分钟入门 iOS7人机界面指南 Google Objective-C Style Guide 中文版 iPhone 6 屏幕揭秘 Apple Watch开发初探 马上着手开发 iOS 应用程序 网易斯坦福大学公开课：iOS 7应用开发字幕文件 Java Apache Shiro 用户指南 Jersey 2.x 用户指南 Spring Framework 4.x参考文档 Spring Boot参考指南 (翻译中) MyBatis中文文档 MyBatis Generator 中文文档 用jersey构建REST服务 Activiti 5.x 用户指南 Google Java编程风格指南 Netty 4.x 用户指南 Netty 实战(精髓) REST 实战 Java 编码规范 Apache MINA 2 用户指南 H2 Database 教程 Java Servlet 3.1 规范 JSSE 参考指南 Java开源实现及最佳实践 Java 编程要点 Think Java Java 8 简明教程 JavaScript Google JavaScript 代码风格指南 Google JSON 风格指南 Airbnb JavaScript 规范 JavaScript 标准参考教程（alpha） Javascript编程指南 (源码) javascript 的 12 个怪癖 JavaScript 秘密花园 JavaScript核心概念及实践 (PDF) (此书已由人民邮电出版社出版发行，但作者依然免费提供PDF版本，希望开发者们去购买，支持作者) 《JavaScript 模式》 “JavaScript patterns”中译本 命名函数表达式探秘 (注:原文由为之漫笔翻译，原始地址无法打开，所以此处地址为我博客上的备份) 学用 JavaScript 设计模式 (开源中国) 深入理解JavaScript系列 ECMAScript 5.1 中文版 ECMAScript 6 入门 (作者：阮一峰) JavaScript Promise迷你书 You-Dont-Know-JS (深入JavaScript语言核心机制的系列图书) JavaScript 教程 廖雪峰 MDN JavaScript 中文文档 jQuery jQuery 解构 简单易懂的JQuery魔法 How to write jQuery plugin You Don’t Need jQuery 如何实现一个类jQuery？ Node.js Node入门 七天学会NodeJS Nodejs Wiki Book (繁体中文) express.js 中文文档 koa 中文文档 一起学koa 使用 Express + MongoDB 搭建多人博客 Express框架 Node.js 包教不包会 Learn You The Node.js For Much Win! (中文版) Node debug 三法三例 nodejs中文文档 orm2 中文文档 underscore.js Underscore.js中文文档 backbone.js backbone.js中文文档 backbone.js入门教程 (PDF) Backbone.js入门教程第二版 Developing Backbone.js Applications(中文版) AngularJS AngularJS最佳实践和风格指南 AngularJS中译本 AngularJS入门教程 构建自己的AngularJS 在Windows环境下用Yeoman构建AngularJS项目 Zepto.js Zepto.js 中文文档 Sea.js Hello Sea.js React.js React.js 中文文档 React webpack-cookbook React 入门教程 React Native 中文文档(含最新Android内容) Learn React &amp; Webpack by building the Hacker News front page impress.js impress.js的中文教程 CoffeeScript CoffeeScript Cookbook The Little Book on CoffeeScript中文版 CoffeeScript 编码风格指南 TypeScipt TypeScript Handbook ExtJS Ext4.1.0 中文文档 Meteor Discover Meteor Meteor 中文文档 Angular-Meteor 中文教程 Chrome扩展及应用开发 LaTeX 一份其实很短的 LaTeX 入门文档 一份不太简短的 LATEX 2ε 介绍 （PDF版） LISP Common Lisp ANSI Common Lisp 中文翻譯版 On Lisp 中文翻译版本 Scheme Yet Another Scheme Tutorial Scheme入门教程 Scheme语言简明教程 Racket Racket book Lua Lua编程入门 Lua 5.1 参考手册 中文翻译 Lua 5.3 参考手册 中文翻译 Lua源码欣赏 OCaml Real World OCaml Perl Modern Perl 中文版 Perl 程序员应该知道的事 PHP PHP 官方手册 PHP调试技术手册(PDF) PHP之道：php-the-right-way (@wulijun版 PHPHub版) PHP 最佳实践 PHP 开发者实践 深入理解PHP内核 PHP扩展开发及内核应用 Laravel5.1 中文文档 Laravel 5.1 LTS 速查表 Symfony2 Cookbook 中文版(版本 2.7.0 LTS) Symfony2中文文档 (未译完) YiiBook几本Yii框架的在线教程 深入理解 Yii 2.0 Yii 框架中文文檔 简单易懂的PHP魔法 swoole文档及入门教程 Composer 中文网 Slim 中文文档 Lumen 中文文档 PHPUnit 中文文档 Prolog 笨办法学Prolog Python 廖雪峰 Python 2.7 中文教程 廖雪峰 Python 3 中文教程 简明Python教程 零基础学 Python 第一版 零基础学 Python 第二版 可爱的 Python Python 2.7 官方教程中文版 Python 3.3 官方教程中文版 Python Cookbook 中文版 Python3 Cookbook 中文版 深入 Python 深入 Python 3 PEP8 Python代码风格规范 Google Python 风格指南 中文版 Python入门教程 (PDF) 笨办法学 Python (PDF EPUB) Python自然语言处理中文版 （感谢陈涛同学的翻译，也谢谢 @shwley 联系了作者） Python 绘图库 matplotlib 官方指南中文翻译 Scrapy 0.25 文档 ThinkPython ThinkPython 2ed Python快速教程 Python 正则表达式操作指南 python初级教程：入门详解 Twisted 与异步编程入门 TextGrocery 中文 API ( 基于svm算法的一个短文本分类 Python 库 ) Requests: HTTP for Humans Pillow 中文文档 PyMOTW 中文版 Python 官方文档中文版 Fabric 中文文档 Beautiful Soup 4.2.0 中文文档 用Python做科学计算 Sphinx 中文文档 精通 Python 设计模式 python 安全编程教程 程序设计思想与方法 知乎周刊·编程小白学Python Scipy 讲义 Python 学习笔记 基础篇 Python 学习笔记 模块篇 Python 标准库 中文版 Python进阶 Python 核心编程 第二版 CPyUG译 Python最佳实践指南 Python 精要教程 Python 量化交易教程 Django Django 1.5 文档中文版 正在翻译中 Diango 1.7 文档中文版 正在翻译中，目前只翻译了目录 Django 1.8.2 文档中文版 正在翻译中 Django 最佳实践 Django搭建简易博客教程 The Django Book 中文版 Django 设计模式与最佳实践 Django 网站开发 Cookbook Django Girls 學習指南 Flask Flask 文档中文版 Jinja2 文档中文版 Werkzeug 文档中文版 Flask之旅 Flask 扩展文档汇总 Flask 大型教程 SQLAlchemy 中文文档 web.py web.py 0.3 新手指南 Web.py Cookbook 简体中文版 Tornado Introduction to Tornado 中文翻译 Tornado源码解析 Tornado 4.3 文档中文版 R R语言忍者秘笈 Ruby Ruby 风格指南 Rails 风格指南 笨方法學 Ruby Ruby on Rails 指南 Ruby on Rails 實戰聖經 Ruby on Rails Tutorial 原书第 3 版 (本书网页版免费提供，电子版以 PDF、EPub 和 Mobi 格式提供购买，仅售 9.9 美元) Rails 实践 Rails 5 开发进阶(Beta) Rails 102 编写Ruby的C拓展 Ruby 源码解读 Ruby中的元编程 Rust rust book 中文翻译 rust primer Scala Scala课堂 (Twitter的Scala中文教程) Effective Scala(Twitter的Scala最佳实践的中文翻译) Scala指南 Shell Shell脚本编程30分钟入门 Bash脚本15分钟进阶教程 Linux工具快速教程 shell十三问 Shell编程范例 Swift The Swift Programming Language 中文版 Swift 语言指南 Stanford 公开课，Developing iOS 8 Apps with Swift 字幕翻译文件 C4iOS - COSMOS 读书笔记及其它 编译原理（紫龙书）中文第2版习题答案 把《编程珠玑》读薄 Effective C++读书笔记 Golang 学习笔记、Python 学习笔记、C 学习笔记 (PDF) Jsoup 学习笔记 学习笔记: Vim、Python、memcached 图灵开放书翻译计划–C++、Python、Java等 蒂姆·奥莱利随笔 （由译言网翻译，电子版免费） SICP 解题集 精彩博客集合 中文文案排版指北 Standard C 语言标准函数库速查 (Cheat Sheet) Git Cheatsheet Chs GitBook简明教程 JavaScript语言精粹 制造开源软件 提问的智慧 Markdown 入门参考 AsciiDoc简明指南 背包问题九讲 老齐的技术资料 前端技能汇总 借助开源项目，学习软件开发 前端工作面试问题 leetcode/lintcode题解/算法学习笔记 前端开发笔记本 测试相关]]></content>
      <categories>
        <category>学习资源</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+next打造自己的博客站点]]></title>
    <url>%2F2018%2F06%2F10%2F%E4%BD%BF%E7%94%A8hexo%2Bnext%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[用hexo+next搭建自己的博客站点简书地址 起因这段时间工作很忙，2018年，从过了年以后就一直很忙，尤其是3月15号开始到海尔驻场以后，干的工作越来越杂，一开始前面还有个商务，项目上有个产品经理，3月底商务辞职了，再后来产品经理也调走了，项目上也没有测试人员，所以我就变成了一身多职的角色。 因为总是比较忙，而且无论如何也还是一枚程序猿，还是码农，但是我觉得自己的工作内容离技术路远有点越走越远，所以我起了在还没有荒废技术之前，将已有的知识总结总结，归纳归纳，搭建一套属于自己的博客站点。 最后的效果暂时是这样的 选型1）java+tomcat博客过年前后因为在学习spring cloud，docker技术，也是出于想把自己学到的东西积攒起来，而且自己本身就是java奴，所以选择了 Docker+SpringBoot+Mybatis+thymeleaf 结构的博客，主要是那会儿看着这个博客确实也还挺漂亮的。有个成型的 博客 系统，可以看出来样子确实还不错，管理后台也有了，也集成了富文本编辑器（主要是小白我不会markdown语法，也不敢去学）所以觉得很到位了。于是自己clone下来，先用tomcat做服务器配置起来，前后端run起来以后写了一篇文章，发现几个不方便的地方： 一共有20张定死的首页展示图，并不是随机的，而且获取这些图的地方，随机数总数也是写死了，与我以为每次都从某一图库随机获取有点差异。 管理后台上传图片不太方便，tomcat重启后图片就没有了，因此我是动用都七牛的图片服务器，拿到链接后在代码里面直接使用，跟预想有出入。 富文本编辑器的排班不理想。跟发布以后生成的效果有差异。 首页功能有点少，自己定制的话成本有点大，也不划算，分享、评论等功能缺失。 发布有点麻烦，还要从新启动服务器。 2）wordpress博客WordPress是使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL数据库的服务器上架设属于自己的网站。也可以把 WordPress当作一个内容管理系统（CMS）来使用。 WordPress是一款个人博客系统，并逐步演化成一款内容管理系统软件，它是使用PHP语言和MySQL数据库开发的。用户可以在支持 PHP 和 MySQL数据库的服务器上使用自己的博客。 WordPress有许多第三方开发的免费模板，安装方式简单易用。不过要做一个自己的模板，则需要你有一定的专业知识。比如你至少要懂的标准通用标记语言下的一个应用HTML代码、CSS、PHP等相关知识。 WordPress官方支持中文版，同时有爱好者开发的第三方中文语言包，如wopus中文语言包。WordPress拥有成千上万个各式插件和不计其数的主题模板样式。 身边就有两位同事在使用着基于php环境的WordPress的博客，我也查过，这款博客的好评率确实也可以，应用也是相当的广泛，甚至还衍生出了Jpress这样的产品，号称是wordpress的java版，这篇文章里的介绍至少看起来是比较好的，不过我没有亲试，倒是身边就有两个同事用的wordpress的博客。一个是Dirk的博客 ： 奋力奔跑的蜗牛一个壮壮的博客 ：StrongFish。 3）hexo+next 超级火的静态博客基于docker的博客虽然搭起来了，也写了一篇文章，但是这小半年时间没有再更新了。最近在掘金上看到了不少关于博客的好文，提的比较多的是hexo，因为现在都流行静态网页，所以我打算动手重新DIY一个自己的站点。要走高端大气上档次，炫酷狂拽叼炸天的路线了 搭建自己的小空间网上搭建系统的文章写的很好的太多了，再说也就那么点事，所以不再浪费时间，简单记录下重要过程吧。 2018-06-05 ：clone hexo和next的项目 修改站点名称，使用gitbub作为项目的最终部署地，使用hexo d命令，将原始代码部署上去，发现https://qdhaiqiang.github.io可以访问,第一步完成。 2018-06-06 ：将原来的qdhaiqiqiang.github.io项目拉出来删除部署文件，重新建一个项目叫blog，blog是项目原文件，而github.io是部署后的文件，一开始以为是一个，后来才明白原来可以不是同一个项目。 2018-06-07 ：修改hexo的主题文件，主要修改项参考博文hexo的next主题个性化教程:打造炫酷网站一文，感谢作者的总结。 2018-06-08 ：修改新建文章模板，创建时同时创建图库；添加音乐播放外链；修改【阅读全文】的样式；添加来必力评论系统；添加百度SEO收录，谷歌SEO收录。 2018-06-09 ：添加jiathis分享；添加站内搜索；修改头像；引入daovioce在线交流，并绑定微信接收消息；添加侧栏音乐；关闭canvas线条，关闭打赏(还是脸皮饱，不好意思要); 至此，本站点基本可以。换遗留几个想搞但没有搞起来的东西 博客上还没有萌萌的宠物，还想养只猫； 文章加密还没有做，有需要的时候再考虑； 百度收录没有成功，https验证没有通过，很遗憾，继续加油； 动态背景； 鸣谢&amp;推荐这里要公布几个查资料时查到的用hexo实现的好的博客，当然，都是next主题的。另外就是针对hexo+next的实现的一些好的博文，在此免费做个推广，博主就不用谢了哈。 好的hexo站点darryrzhongMoorezWenBo丨星空灬时间的朋友 很巧妙的是，在这次搭建过程中发现的这几个博客博主看起来都是前端工程，而用wordpress搭建的多是后端工程师，不知道这个研究结果值多少钱，哈哈哈。 好的博文浅析 Hexo 搭建博客的原理Hexo-NexT主题搭建个人博客网易云跟帖关闭服务后转移到来必力hexo的next主题个性化配置教程踢球动画插件 特别推荐darryrzhong的文章是从基础篇 -&gt; 进阶篇 -&gt; 高级篇 -&gt; 百度收录 -&gt; 谷歌收录一路走过来的，配置截图等都非常详细，非常的教程，感谢博主的努力，真想给扒过来，呵呵呵。 博客搭建暂时告一段段落，好好丰富内容吧，加油！]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello Hexo Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 测试远程图片：测试本地图片： 添加音乐去往网易云音乐搜索喜欢的音乐，点击生成外链播放器，复制代码直接放到博文末尾即可，height设为0可隐藏播放器，但仍然可以播放音乐，auto设成0可手动播放，默认是1自动播放，可把代码放到themes/next/layout/_custom/sidebar.swig文件里，播放器会显示在站点预览中。其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐。]]></content>
  </entry>
</search>
